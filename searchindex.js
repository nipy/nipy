Search.setIndex({"docnames": ["api/generated/gen", "api/generated/nipy.algorithms.clustering.bgmm", "api/generated/nipy.algorithms.clustering.ggmixture", "api/generated/nipy.algorithms.clustering.gmm", "api/generated/nipy.algorithms.clustering.hierarchical_clustering", "api/generated/nipy.algorithms.clustering.imm", "api/generated/nipy.algorithms.clustering.utils", "api/generated/nipy.algorithms.clustering.von_mises_fisher_mixture", "api/generated/nipy.algorithms.diagnostics.commands", "api/generated/nipy.algorithms.diagnostics.screens", "api/generated/nipy.algorithms.diagnostics.timediff", "api/generated/nipy.algorithms.diagnostics.tsdiffplot", "api/generated/nipy.algorithms.fwhm", "api/generated/nipy.algorithms.graph.bipartite_graph", "api/generated/nipy.algorithms.graph.field", "api/generated/nipy.algorithms.graph.forest", "api/generated/nipy.algorithms.graph.graph", "api/generated/nipy.algorithms.group.parcel_analysis", "api/generated/nipy.algorithms.interpolation", "api/generated/nipy.algorithms.kernel_smooth", "api/generated/nipy.algorithms.optimize", "api/generated/nipy.algorithms.registration.affine", "api/generated/nipy.algorithms.registration.chain_transform", "api/generated/nipy.algorithms.registration.groupwise_registration", "api/generated/nipy.algorithms.registration.histogram_registration", "api/generated/nipy.algorithms.registration.optimizer", "api/generated/nipy.algorithms.registration.polyaffine", "api/generated/nipy.algorithms.registration.resample", "api/generated/nipy.algorithms.registration.scripting", "api/generated/nipy.algorithms.registration.similarity_measures", "api/generated/nipy.algorithms.registration.transform", "api/generated/nipy.algorithms.registration.type_check", "api/generated/nipy.algorithms.resample", "api/generated/nipy.algorithms.segmentation.brain_segmentation", "api/generated/nipy.algorithms.segmentation.segmentation", "api/generated/nipy.algorithms.slicetiming.timefuncs", "api/generated/nipy.algorithms.statistics.bayesian_mixed_effects", "api/generated/nipy.algorithms.statistics.bench.bench_intvol", "api/generated/nipy.algorithms.statistics.empirical_pvalue", "api/generated/nipy.algorithms.statistics.formula.formulae", "api/generated/nipy.algorithms.statistics.mixed_effects_stat", "api/generated/nipy.algorithms.statistics.models.family.family", "api/generated/nipy.algorithms.statistics.models.family.links", "api/generated/nipy.algorithms.statistics.models.family.varfuncs", "api/generated/nipy.algorithms.statistics.models.glm", "api/generated/nipy.algorithms.statistics.models.model", "api/generated/nipy.algorithms.statistics.models.nlsmodel", "api/generated/nipy.algorithms.statistics.models.regression", "api/generated/nipy.algorithms.statistics.models.utils", "api/generated/nipy.algorithms.statistics.onesample", "api/generated/nipy.algorithms.statistics.rft", "api/generated/nipy.algorithms.statistics.utils", "api/generated/nipy.algorithms.utils.fast_distance", "api/generated/nipy.algorithms.utils.matrices", "api/generated/nipy.algorithms.utils.pca", "api/generated/nipy.cli.diagnose", "api/generated/nipy.cli.img3dto4d", "api/generated/nipy.cli.img4dto3d", "api/generated/nipy.cli.realign4d", "api/generated/nipy.cli.tsdiffana", "api/generated/nipy.conftest", "api/generated/nipy.core.image.image", "api/generated/nipy.core.image.image_list", "api/generated/nipy.core.image.image_spaces", "api/generated/nipy.core.reference.array_coords", "api/generated/nipy.core.reference.coordinate_map", "api/generated/nipy.core.reference.coordinate_system", "api/generated/nipy.core.reference.slices", "api/generated/nipy.core.reference.spaces", "api/generated/nipy.core.utils.generators", "api/generated/nipy.interfaces.matlab", "api/generated/nipy.interfaces.spm", "api/generated/nipy.io.files", "api/generated/nipy.io.nibcompat", "api/generated/nipy.io.nifti_ref", "api/generated/nipy.labs.datasets.converters", "api/generated/nipy.labs.datasets.transforms.affine_transform", "api/generated/nipy.labs.datasets.transforms.affine_utils", "api/generated/nipy.labs.datasets.transforms.transform", "api/generated/nipy.labs.datasets.volumes.volume_data", "api/generated/nipy.labs.datasets.volumes.volume_field", "api/generated/nipy.labs.datasets.volumes.volume_grid", "api/generated/nipy.labs.datasets.volumes.volume_img", "api/generated/nipy.labs.glm.glm", "api/generated/nipy.labs.group.permutation_test", "api/generated/nipy.labs.mask", "api/generated/nipy.labs.spatial_models.bayesian_structural_analysis", "api/generated/nipy.labs.spatial_models.bsa_io", "api/generated/nipy.labs.spatial_models.discrete_domain", "api/generated/nipy.labs.spatial_models.hierarchical_parcellation", "api/generated/nipy.labs.spatial_models.hroi", "api/generated/nipy.labs.spatial_models.mroi", "api/generated/nipy.labs.spatial_models.parcel_io", "api/generated/nipy.labs.spatial_models.parcellation", "api/generated/nipy.labs.spatial_models.structural_bfls", "api/generated/nipy.labs.statistical_mapping", "api/generated/nipy.labs.utils.reproducibility_measures", "api/generated/nipy.labs.utils.simul_multisubject_fmri_dataset", "api/generated/nipy.labs.utils.zscore", "api/generated/nipy.labs.viz_tools.activation_maps", "api/generated/nipy.labs.viz_tools.anat_cache", "api/generated/nipy.labs.viz_tools.cm", "api/generated/nipy.labs.viz_tools.coord_tools", "api/generated/nipy.labs.viz_tools.maps_3d", "api/generated/nipy.labs.viz_tools.slicers", "api/generated/nipy.labs.viz_tools.test.test_activation_maps", "api/generated/nipy.labs.viz_tools.test.test_cm", "api/generated/nipy.labs.viz_tools.test.test_coord_tools", "api/generated/nipy.labs.viz_tools.test.test_edge_detect", "api/generated/nipy.labs.viz_tools.test.test_slicers", "api/generated/nipy.modalities.fmri.design", "api/generated/nipy.modalities.fmri.design_matrix", "api/generated/nipy.modalities.fmri.experimental_paradigm", "api/generated/nipy.modalities.fmri.fmri", "api/generated/nipy.modalities.fmri.fmristat.hrf", "api/generated/nipy.modalities.fmri.fmristat.invert", "api/generated/nipy.modalities.fmri.fmristat.model", "api/generated/nipy.modalities.fmri.fmristat.outputters", "api/generated/nipy.modalities.fmri.glm", "api/generated/nipy.modalities.fmri.hemodynamic_models", "api/generated/nipy.modalities.fmri.hrf", "api/generated/nipy.modalities.fmri.realfuncs", "api/generated/nipy.modalities.fmri.spm.correlation", "api/generated/nipy.modalities.fmri.spm.model", "api/generated/nipy.modalities.fmri.spm.reml", "api/generated/nipy.modalities.fmri.spm.trace", "api/generated/nipy.modalities.fmri.utils", "api/generated/nipy.pkg_info", "api/generated/nipy.testing.decorators", "api/generated/nipy.utils", "api/generated/nipy.utils.arrays", "api/generated/nipy.utils.perlpie", "api/generated/nipy.utils.utilities", "api/index", "devel/code_discussions/brainvisa_repositories", "devel/code_discussions/comparisons/index", "devel/code_discussions/comparisons/vtk_datasets", "devel/code_discussions/coordmap_notes", "devel/code_discussions/image_ordering", "devel/code_discussions/index", "devel/code_discussions/pipelining_api", "devel/code_discussions/refactoring/imagelists", "devel/code_discussions/refactoring/index", "devel/code_discussions/registration_api", "devel/code_discussions/repository_api", "devel/code_discussions/repository_design", "devel/code_discussions/simple_viewer", "devel/code_discussions/understanding_affines", "devel/code_discussions/usecases/batching", "devel/code_discussions/usecases/images", "devel/code_discussions/usecases/index", "devel/code_discussions/usecases/resampling", "devel/code_discussions/usecases/transformations", "devel/development_quickstart", "devel/guidelines/build_debug", "devel/guidelines/changelog", "devel/guidelines/commit_codes", "devel/guidelines/compiling_windows", "devel/guidelines/coverage_testing", "devel/guidelines/debugging", "devel/guidelines/gitwash/configure_git", "devel/guidelines/gitwash/development_workflow", "devel/guidelines/gitwash/following_latest", "devel/guidelines/gitwash/forking_hell", "devel/guidelines/gitwash/git_development", "devel/guidelines/gitwash/git_install", "devel/guidelines/gitwash/git_intro", "devel/guidelines/gitwash/git_resources", "devel/guidelines/gitwash/index", "devel/guidelines/gitwash/maintainer_workflow", "devel/guidelines/gitwash/patching", "devel/guidelines/gitwash/set_up_fork", "devel/guidelines/howto_document", "devel/guidelines/index", "devel/guidelines/make_release", "devel/guidelines/open_source_devel", "devel/guidelines/optimization", "devel/guidelines/sphinx_helpers", "devel/guidelines/testing", "devel/images", "devel/index", "devel/install/debian", "devel/install/fedora", "devel/install/index", "devel/install/windows", "devel/install/windows_scipy_build", "devel/planning/TODO", "devel/planning/index", "devel/planning/roadmap", "devel/tools/index", "devel/tools/tricked_out_emacs", "devel/tools/virtualenv-tutor", "documentation", "faq/documentation_faq", "faq/index", "faq/johns_bsd_pitch", "faq/licensing", "faq/why", "glossary", "history", "index", "labs/datasets", "labs/enn", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.as_volume_img", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.composed_with_transform", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.resampled_to_img", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.values_in_world", "labs/generated/nipy.labs.utils.mask.compute_mask", "labs/generated/nipy.labs.utils.mask.compute_mask_files", "labs/generated/nipy.labs.utils.mask.compute_mask_sessions", "labs/generated/nipy.labs.viz_tools.activation_maps.plot_map", "labs/generated/nipy.labs.viz_tools.maps_3d.affine_img_src", "labs/generated/nipy.labs.viz_tools.maps_3d.plot_anat_3d", "labs/generated/nipy.labs.viz_tools.maps_3d.plot_map_3d", "labs/index", "labs/mask", "labs/simul_activation", "labs/viz", "license", "mission", "publications", "references/brainpy_abstract", "users/basic_io", "users/coordinate_map", "users/glm_spec", "users/index", "users/install_data", "users/installation", "users/introduction", "users/math_coordmap", "users/scipy_orientation", "users/tutorial"], "filenames": ["api/generated/gen.rst", "api/generated/nipy.algorithms.clustering.bgmm.rst", "api/generated/nipy.algorithms.clustering.ggmixture.rst", "api/generated/nipy.algorithms.clustering.gmm.rst", "api/generated/nipy.algorithms.clustering.hierarchical_clustering.rst", "api/generated/nipy.algorithms.clustering.imm.rst", "api/generated/nipy.algorithms.clustering.utils.rst", "api/generated/nipy.algorithms.clustering.von_mises_fisher_mixture.rst", "api/generated/nipy.algorithms.diagnostics.commands.rst", "api/generated/nipy.algorithms.diagnostics.screens.rst", "api/generated/nipy.algorithms.diagnostics.timediff.rst", "api/generated/nipy.algorithms.diagnostics.tsdiffplot.rst", "api/generated/nipy.algorithms.fwhm.rst", "api/generated/nipy.algorithms.graph.bipartite_graph.rst", "api/generated/nipy.algorithms.graph.field.rst", "api/generated/nipy.algorithms.graph.forest.rst", "api/generated/nipy.algorithms.graph.graph.rst", "api/generated/nipy.algorithms.group.parcel_analysis.rst", "api/generated/nipy.algorithms.interpolation.rst", "api/generated/nipy.algorithms.kernel_smooth.rst", "api/generated/nipy.algorithms.optimize.rst", "api/generated/nipy.algorithms.registration.affine.rst", "api/generated/nipy.algorithms.registration.chain_transform.rst", "api/generated/nipy.algorithms.registration.groupwise_registration.rst", "api/generated/nipy.algorithms.registration.histogram_registration.rst", "api/generated/nipy.algorithms.registration.optimizer.rst", "api/generated/nipy.algorithms.registration.polyaffine.rst", "api/generated/nipy.algorithms.registration.resample.rst", "api/generated/nipy.algorithms.registration.scripting.rst", "api/generated/nipy.algorithms.registration.similarity_measures.rst", "api/generated/nipy.algorithms.registration.transform.rst", "api/generated/nipy.algorithms.registration.type_check.rst", "api/generated/nipy.algorithms.resample.rst", "api/generated/nipy.algorithms.segmentation.brain_segmentation.rst", "api/generated/nipy.algorithms.segmentation.segmentation.rst", "api/generated/nipy.algorithms.slicetiming.timefuncs.rst", "api/generated/nipy.algorithms.statistics.bayesian_mixed_effects.rst", "api/generated/nipy.algorithms.statistics.bench.bench_intvol.rst", "api/generated/nipy.algorithms.statistics.empirical_pvalue.rst", "api/generated/nipy.algorithms.statistics.formula.formulae.rst", "api/generated/nipy.algorithms.statistics.mixed_effects_stat.rst", "api/generated/nipy.algorithms.statistics.models.family.family.rst", "api/generated/nipy.algorithms.statistics.models.family.links.rst", "api/generated/nipy.algorithms.statistics.models.family.varfuncs.rst", "api/generated/nipy.algorithms.statistics.models.glm.rst", "api/generated/nipy.algorithms.statistics.models.model.rst", "api/generated/nipy.algorithms.statistics.models.nlsmodel.rst", "api/generated/nipy.algorithms.statistics.models.regression.rst", "api/generated/nipy.algorithms.statistics.models.utils.rst", "api/generated/nipy.algorithms.statistics.onesample.rst", "api/generated/nipy.algorithms.statistics.rft.rst", "api/generated/nipy.algorithms.statistics.utils.rst", "api/generated/nipy.algorithms.utils.fast_distance.rst", "api/generated/nipy.algorithms.utils.matrices.rst", "api/generated/nipy.algorithms.utils.pca.rst", "api/generated/nipy.cli.diagnose.rst", "api/generated/nipy.cli.img3dto4d.rst", "api/generated/nipy.cli.img4dto3d.rst", "api/generated/nipy.cli.realign4d.rst", "api/generated/nipy.cli.tsdiffana.rst", "api/generated/nipy.conftest.rst", "api/generated/nipy.core.image.image.rst", "api/generated/nipy.core.image.image_list.rst", "api/generated/nipy.core.image.image_spaces.rst", "api/generated/nipy.core.reference.array_coords.rst", "api/generated/nipy.core.reference.coordinate_map.rst", "api/generated/nipy.core.reference.coordinate_system.rst", "api/generated/nipy.core.reference.slices.rst", "api/generated/nipy.core.reference.spaces.rst", "api/generated/nipy.core.utils.generators.rst", "api/generated/nipy.interfaces.matlab.rst", "api/generated/nipy.interfaces.spm.rst", "api/generated/nipy.io.files.rst", "api/generated/nipy.io.nibcompat.rst", "api/generated/nipy.io.nifti_ref.rst", "api/generated/nipy.labs.datasets.converters.rst", "api/generated/nipy.labs.datasets.transforms.affine_transform.rst", "api/generated/nipy.labs.datasets.transforms.affine_utils.rst", "api/generated/nipy.labs.datasets.transforms.transform.rst", "api/generated/nipy.labs.datasets.volumes.volume_data.rst", "api/generated/nipy.labs.datasets.volumes.volume_field.rst", "api/generated/nipy.labs.datasets.volumes.volume_grid.rst", "api/generated/nipy.labs.datasets.volumes.volume_img.rst", "api/generated/nipy.labs.glm.glm.rst", "api/generated/nipy.labs.group.permutation_test.rst", "api/generated/nipy.labs.mask.rst", "api/generated/nipy.labs.spatial_models.bayesian_structural_analysis.rst", "api/generated/nipy.labs.spatial_models.bsa_io.rst", "api/generated/nipy.labs.spatial_models.discrete_domain.rst", "api/generated/nipy.labs.spatial_models.hierarchical_parcellation.rst", "api/generated/nipy.labs.spatial_models.hroi.rst", "api/generated/nipy.labs.spatial_models.mroi.rst", "api/generated/nipy.labs.spatial_models.parcel_io.rst", "api/generated/nipy.labs.spatial_models.parcellation.rst", "api/generated/nipy.labs.spatial_models.structural_bfls.rst", "api/generated/nipy.labs.statistical_mapping.rst", "api/generated/nipy.labs.utils.reproducibility_measures.rst", "api/generated/nipy.labs.utils.simul_multisubject_fmri_dataset.rst", "api/generated/nipy.labs.utils.zscore.rst", "api/generated/nipy.labs.viz_tools.activation_maps.rst", "api/generated/nipy.labs.viz_tools.anat_cache.rst", "api/generated/nipy.labs.viz_tools.cm.rst", "api/generated/nipy.labs.viz_tools.coord_tools.rst", "api/generated/nipy.labs.viz_tools.maps_3d.rst", "api/generated/nipy.labs.viz_tools.slicers.rst", "api/generated/nipy.labs.viz_tools.test.test_activation_maps.rst", "api/generated/nipy.labs.viz_tools.test.test_cm.rst", "api/generated/nipy.labs.viz_tools.test.test_coord_tools.rst", "api/generated/nipy.labs.viz_tools.test.test_edge_detect.rst", "api/generated/nipy.labs.viz_tools.test.test_slicers.rst", "api/generated/nipy.modalities.fmri.design.rst", "api/generated/nipy.modalities.fmri.design_matrix.rst", "api/generated/nipy.modalities.fmri.experimental_paradigm.rst", "api/generated/nipy.modalities.fmri.fmri.rst", "api/generated/nipy.modalities.fmri.fmristat.hrf.rst", "api/generated/nipy.modalities.fmri.fmristat.invert.rst", "api/generated/nipy.modalities.fmri.fmristat.model.rst", "api/generated/nipy.modalities.fmri.fmristat.outputters.rst", "api/generated/nipy.modalities.fmri.glm.rst", "api/generated/nipy.modalities.fmri.hemodynamic_models.rst", "api/generated/nipy.modalities.fmri.hrf.rst", "api/generated/nipy.modalities.fmri.realfuncs.rst", "api/generated/nipy.modalities.fmri.spm.correlation.rst", "api/generated/nipy.modalities.fmri.spm.model.rst", "api/generated/nipy.modalities.fmri.spm.reml.rst", "api/generated/nipy.modalities.fmri.spm.trace.rst", "api/generated/nipy.modalities.fmri.utils.rst", "api/generated/nipy.pkg_info.rst", "api/generated/nipy.testing.decorators.rst", "api/generated/nipy.utils.rst", "api/generated/nipy.utils.arrays.rst", "api/generated/nipy.utils.perlpie.rst", "api/generated/nipy.utils.utilities.rst", "api/index.rst", "devel/code_discussions/brainvisa_repositories.rst", "devel/code_discussions/comparisons/index.rst", "devel/code_discussions/comparisons/vtk_datasets.rst", "devel/code_discussions/coordmap_notes.rst", "devel/code_discussions/image_ordering.rst", "devel/code_discussions/index.rst", "devel/code_discussions/pipelining_api.rst", "devel/code_discussions/refactoring/imagelists.rst", "devel/code_discussions/refactoring/index.rst", "devel/code_discussions/registration_api.rst", "devel/code_discussions/repository_api.rst", "devel/code_discussions/repository_design.rst", "devel/code_discussions/simple_viewer.rst", "devel/code_discussions/understanding_affines.rst", "devel/code_discussions/usecases/batching.rst", "devel/code_discussions/usecases/images.rst", "devel/code_discussions/usecases/index.rst", "devel/code_discussions/usecases/resampling.rst", "devel/code_discussions/usecases/transformations.rst", "devel/development_quickstart.rst", "devel/guidelines/build_debug.rst", "devel/guidelines/changelog.rst", "devel/guidelines/commit_codes.rst", "devel/guidelines/compiling_windows.rst", "devel/guidelines/coverage_testing.rst", "devel/guidelines/debugging.rst", "devel/guidelines/gitwash/configure_git.rst", "devel/guidelines/gitwash/development_workflow.rst", "devel/guidelines/gitwash/following_latest.rst", "devel/guidelines/gitwash/forking_hell.rst", "devel/guidelines/gitwash/git_development.rst", "devel/guidelines/gitwash/git_install.rst", "devel/guidelines/gitwash/git_intro.rst", "devel/guidelines/gitwash/git_resources.rst", "devel/guidelines/gitwash/index.rst", "devel/guidelines/gitwash/maintainer_workflow.rst", "devel/guidelines/gitwash/patching.rst", "devel/guidelines/gitwash/set_up_fork.rst", "devel/guidelines/howto_document.rst", "devel/guidelines/index.rst", "devel/guidelines/make_release.rst", "devel/guidelines/open_source_devel.rst", "devel/guidelines/optimization.rst", "devel/guidelines/sphinx_helpers.rst", "devel/guidelines/testing.rst", "devel/images.rst", "devel/index.rst", "devel/install/debian.rst", "devel/install/fedora.rst", "devel/install/index.rst", "devel/install/windows.rst", "devel/install/windows_scipy_build.rst", "devel/planning/TODO.rst", "devel/planning/index.rst", "devel/planning/roadmap.rst", "devel/tools/index.rst", "devel/tools/tricked_out_emacs.rst", "devel/tools/virtualenv-tutor.rst", "documentation.rst", "faq/documentation_faq.rst", "faq/index.rst", "faq/johns_bsd_pitch.rst", "faq/licensing.rst", "faq/why.rst", "glossary.rst", "history.rst", "index.rst", "labs/datasets.rst", "labs/enn.rst", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.as_volume_img.rst", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.composed_with_transform.rst", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.resampled_to_img.rst", "labs/generated/nipy.labs.datasets.volumes.volume_field.VolumeField.values_in_world.rst", "labs/generated/nipy.labs.utils.mask.compute_mask.rst", "labs/generated/nipy.labs.utils.mask.compute_mask_files.rst", "labs/generated/nipy.labs.utils.mask.compute_mask_sessions.rst", "labs/generated/nipy.labs.viz_tools.activation_maps.plot_map.rst", "labs/generated/nipy.labs.viz_tools.maps_3d.affine_img_src.rst", "labs/generated/nipy.labs.viz_tools.maps_3d.plot_anat_3d.rst", "labs/generated/nipy.labs.viz_tools.maps_3d.plot_map_3d.rst", "labs/index.rst", "labs/mask.rst", "labs/simul_activation.rst", "labs/viz.rst", "license.rst", "mission.rst", "publications.rst", "references/brainpy_abstract.rst", "users/basic_io.rst", "users/coordinate_map.rst", "users/glm_spec.rst", "users/index.rst", "users/install_data.rst", "users/installation.rst", "users/introduction.rst", "users/math_coordmap.rst", "users/scipy_orientation.rst", "users/tutorial.rst"], "titles": ["&lt;no title&gt;", "algorithms.clustering.bgmm", "algorithms.clustering.ggmixture", "algorithms.clustering.gmm", "algorithms.clustering.hierarchical_clustering", "algorithms.clustering.imm", "algorithms.clustering.utils", "algorithms.clustering.von_mises_fisher_mixture", "algorithms.diagnostics.commands", "algorithms.diagnostics.screens", "algorithms.diagnostics.timediff", "algorithms.diagnostics.tsdiffplot", "algorithms.fwhm", "algorithms.graph.bipartite_graph", "algorithms.graph.field", "algorithms.graph.forest", "algorithms.graph.graph", "algorithms.group.parcel_analysis", "algorithms.interpolation", "algorithms.kernel_smooth", "algorithms.optimize", "algorithms.registration.affine", "algorithms.registration.chain_transform", "algorithms.registration.groupwise_registration", "algorithms.registration.histogram_registration", "algorithms.registration.optimizer", "algorithms.registration.polyaffine", "algorithms.registration.resample", "algorithms.registration.scripting", "algorithms.registration.similarity_measures", "algorithms.registration.transform", "algorithms.registration.type_check", "algorithms.resample", "algorithms.segmentation.brain_segmentation", "algorithms.segmentation.segmentation", "algorithms.slicetiming.timefuncs", "algorithms.statistics.bayesian_mixed_effects", "algorithms.statistics.bench.bench_intvol", "algorithms.statistics.empirical_pvalue", "algorithms.statistics.formula.formulae", "algorithms.statistics.mixed_effects_stat", "algorithms.statistics.models.family.family", "algorithms.statistics.models.family.links", "algorithms.statistics.models.family.varfuncs", "algorithms.statistics.models.glm", "algorithms.statistics.models.model", "algorithms.statistics.models.nlsmodel", "algorithms.statistics.models.regression", "algorithms.statistics.models.utils", "algorithms.statistics.onesample", "algorithms.statistics.rft", "algorithms.statistics.utils", "algorithms.utils.fast_distance", "algorithms.utils.matrices", "algorithms.utils.pca", "cli.diagnose", "cli.img3dto4d", "cli.img4dto3d", "cli.realign4d", "cli.tsdiffana", "conftest", "core.image.image", "core.image.image_list", "core.image.image_spaces", "core.reference.array_coords", "core.reference.coordinate_map", "core.reference.coordinate_system", "core.reference.slices", "core.reference.spaces", "core.utils.generators", "interfaces.matlab", "interfaces.spm", "io.files", "io.nibcompat", "io.nifti_ref", "labs.datasets.converters", "labs.datasets.transforms.affine_transform", "labs.datasets.transforms.affine_utils", "labs.datasets.transforms.transform", "labs.datasets.volumes.volume_data", "labs.datasets.volumes.volume_field", "labs.datasets.volumes.volume_grid", "labs.datasets.volumes.volume_img", "labs.glm.glm", "labs.group.permutation_test", "labs.mask", "labs.spatial_models.bayesian_structural_analysis", "labs.spatial_models.bsa_io", "labs.spatial_models.discrete_domain", "labs.spatial_models.hierarchical_parcellation", "labs.spatial_models.hroi", "labs.spatial_models.mroi", "labs.spatial_models.parcel_io", "labs.spatial_models.parcellation", "labs.spatial_models.structural_bfls", "labs.statistical_mapping", "labs.utils.reproducibility_measures", "labs.utils.simul_multisubject_fmri_dataset", "labs.utils.zscore", "labs.viz_tools.activation_maps", "labs.viz_tools.anat_cache", "labs.viz_tools.cm", "labs.viz_tools.coord_tools", "labs.viz_tools.maps_3d", "labs.viz_tools.slicers", "labs.viz_tools.test.test_activation_maps", "labs.viz_tools.test.test_cm", "labs.viz_tools.test.test_coord_tools", "labs.viz_tools.test.test_edge_detect", "labs.viz_tools.test.test_slicers", "modalities.fmri.design", "modalities.fmri.design_matrix", "modalities.fmri.experimental_paradigm", "modalities.fmri.fmri", "modalities.fmri.fmristat.hrf", "modalities.fmri.fmristat.invert", "modalities.fmri.fmristat.model", "modalities.fmri.fmristat.outputters", "modalities.fmri.glm", "modalities.fmri.hemodynamic_models", "modalities.fmri.hrf", "modalities.fmri.realfuncs", "modalities.fmri.spm.correlation", "modalities.fmri.spm.model", "modalities.fmri.spm.reml", "modalities.fmri.spm.trace", "modalities.fmri.utils", "pkg_info", "testing.decorators", "utils", "utils.arrays", "utils.perlpie", "utils.utilities", "API", "Can NIPY get something interesting from BrainVISA databases?", "Software Design", "VTK datasets", "Some discussion notes on coordinate maps", "Image index ordering", "Code discussions", "What would pipelining look like?", "Refactoring imagelists", "Defining use cases", "Registration API Design", "Repository API", "Repository design", "Simple image viewer", "Understanding voxel and real world mappings", "Batching use cases", "Image model use cases", "Defining use cases", "Resampling use cases", "Transformation use cases", "Development quickstart", "Debugging the build", "The ChangeLog", "Commit message codes", "Some notes on compiling on windows with Visual Studio", "Coverage Testing", "Debugging", "Configure git", "Development workflow", "Following the latest source", "Making your own copy (fork) of nipy", "Git for development", "Install git", "Introduction", "git resources", "Working with <em>nipy</em> source code", "Maintainer workflow", "Making a patch", "Set up your fork", "How to write documentation", "Development Guidelines", "A guide to making a nipy release", "Open Source Development", "Optimization", "Sphinx Cheat Sheet", "Testing", "Describing images", "Developer Guide", "Debian / Ubuntu developer install", "Fedora developer install", "Developer installs for different distributions", "Development install on windows", "Building Scipy/Numpy on Windows with Optimized Numerical Libraries", "TODO for nipy development", "Development Planning", "Nipy roadmap", "Developer Tools", "Tricked out emacs for python coding", "Setting up virtualenv", "NIPY documentation", "Documentation FAQ", "FAQ", "Why we should be using BSD", "Licensing", "Why \u2026", "Glossary", "A history of NIPY", "NIPY", "Volumetric data structures", "Empirical null", "nipy.labs.datasets.volumes.volume_field.VolumeField.as_volume_img", "nipy.labs.datasets.volumes.volume_field.VolumeField.composed_with_transform", "nipy.labs.datasets.volumes.volume_field.VolumeField.resampled_to_img", "nipy.labs.datasets.volumes.volume_field.VolumeField.values_in_world", "nipy.labs.utils.mask.compute_mask", "nipy.labs.utils.mask.compute_mask_files", "nipy.labs.utils.mask.compute_mask_sessions", "nipy.labs.viz_tools.activation_maps.plot_map", "nipy.labs.viz_tools.maps_3d.affine_img_src", "nipy.labs.viz_tools.maps_3d.plot_anat_3d", "nipy.labs.viz_tools.maps_3d.plot_map_3d", "NeuroSpin tools", "Mask-extraction utilities", "Generating simulated activation maps", "Plotting of activation maps", "NIPY License Information", "What is NIPY for?", "Publications", "BrainPy HBM abstract, 2005", "Basic Data IO", "Basics of the Coordinate Map", "Specifying a GLM in NiPy", "User Guide", "Optional data packages", "Download and Install", "Introduction", "Mathematical formulation of the Coordinate Map", "Geography of the Scipy world", "Tutorials"], "terms": {"inherit": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 61, 62, 64, 65, 66, 68, 71, 74, 76, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 94, 95, 104, 111, 112, 113, 116, 117, 118, 123, 126, 129, 173], "diagram": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 61, 62, 64, 65, 66, 68, 71, 74, 76, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 94, 95, 104, 111, 112, 113, 116, 117, 118, 123, 126, 129, 173], "nipi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 140, 141, 143, 144, 145, 148, 149, 153, 154, 158, 161, 162, 164, 166, 169, 170, 171, 172, 173, 176, 178, 180, 181, 183, 187, 193, 194, 198, 201, 202, 214, 215, 216, 221, 222, 223, 225, 226, 228, 229, 230, 231], "gmm": [1, 5, 38, 133, 192], "bayesian": [1, 5, 17, 45, 47, 86], "gaussian": [1, 2, 3, 4, 5, 7, 12, 14, 15, 16, 17, 19, 24, 26, 29, 38, 44, 47, 50, 86, 94, 133, 202], "mixtur": [1, 2, 3, 5, 7, 38, 86, 202], "model": [1, 2, 3, 5, 7, 17, 24, 29, 33, 36, 38, 39, 40, 51, 83, 86, 87, 90, 93, 94, 95, 110, 111, 115, 117, 118, 119, 120, 124, 133, 136, 139, 141, 145, 150, 170, 192, 198, 202, 221, 225, 231], "contain": [1, 3, 4, 10, 12, 13, 14, 15, 16, 21, 28, 39, 45, 47, 52, 62, 63, 65, 66, 67, 68, 73, 75, 79, 80, 81, 82, 83, 84, 90, 93, 96, 97, 110, 111, 112, 116, 117, 118, 126, 127, 134, 137, 138, 143, 147, 154, 160, 179, 186, 198, 202, 204, 215, 216, 222, 223, 227, 230], "basic": [1, 2, 3, 14, 16, 38, 39, 48, 50, 72, 92, 94, 110, 117, 126, 169, 184, 190, 195, 197, 225, 226, 230, 231], "field": [1, 3, 4, 12, 13, 15, 23, 34, 39, 50, 74, 80, 84, 90, 93, 95, 103, 110, 133, 145, 192, 197, 212], "method": [1, 3, 5, 12, 15, 16, 17, 20, 23, 24, 27, 38, 39, 40, 42, 44, 45, 47, 53, 61, 62, 63, 65, 67, 68, 69, 72, 73, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 113, 116, 117, 118, 134, 137, 143, 153, 155, 177, 178, 193, 197, 198, 202, 214, 216, 229], "high": [1, 23, 86, 94, 110, 118, 126, 147, 158, 177, 178, 195, 197, 198, 200, 221, 230], "level": [1, 2, 4, 14, 15, 17, 23, 36, 38, 39, 40, 45, 47, 68, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 110, 112, 118, 133, 134, 138, 147, 155, 158, 172, 177, 178, 197, 198, 202, 207, 208, 221, 229, 230], "ar": [1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 35, 38, 39, 40, 44, 45, 47, 48, 49, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 82, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 99, 102, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 122, 126, 127, 128, 129, 134, 136, 137, 138, 139, 145, 147, 149, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 184, 185, 186, 190, 191, 193, 195, 196, 197, 198, 201, 210, 211, 213, 217, 218, 221, 223, 224, 226, 227, 228, 229, 230], "should": [1, 2, 4, 7, 11, 14, 15, 16, 19, 22, 23, 24, 27, 30, 32, 36, 38, 39, 40, 44, 45, 46, 47, 49, 51, 53, 54, 61, 62, 63, 65, 66, 68, 69, 72, 73, 74, 78, 79, 80, 81, 82, 85, 90, 91, 93, 94, 96, 99, 102, 103, 110, 118, 126, 127, 134, 136, 137, 138, 143, 147, 152, 156, 160, 161, 163, 166, 169, 174, 176, 179, 184, 185, 186, 190, 191, 196, 205, 206, 210, 211, 212, 226, 227, 229], "bind": [1, 3, 145], "c": [1, 3, 4, 5, 14, 15, 16, 24, 39, 42, 47, 48, 50, 53, 61, 64, 65, 66, 68, 69, 83, 94, 114, 124, 130, 133, 139, 147, 155, 160, 161, 170, 176, 177, 178, 182, 184, 185, 190, 197, 198, 224, 226, 227, 229, 230], "The": [1, 2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 21, 23, 24, 26, 27, 28, 29, 32, 36, 38, 39, 41, 42, 44, 45, 47, 50, 51, 53, 54, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 90, 91, 94, 96, 97, 99, 102, 103, 104, 110, 111, 116, 117, 118, 119, 120, 126, 127, 131, 134, 136, 137, 139, 143, 145, 152, 153, 158, 160, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 183, 185, 186, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 227, 229], "base": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 58, 61, 62, 64, 65, 66, 68, 71, 72, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 104, 110, 111, 112, 113, 116, 117, 118, 120, 123, 126, 129, 134, 137, 138, 143, 145, 147, 161, 182, 186, 190, 191, 195, 197, 198, 199, 201, 207, 208, 229], "reli": [1, 90, 134, 137, 197, 201], "an": [1, 2, 3, 4, 5, 8, 9, 10, 12, 14, 15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 30, 32, 34, 35, 38, 39, 40, 44, 45, 46, 47, 48, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 88, 90, 91, 93, 94, 99, 100, 102, 103, 104, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 131, 134, 137, 139, 141, 143, 144, 145, 150, 152, 153, 154, 155, 158, 160, 161, 167, 170, 172, 175, 178, 185, 186, 190, 191, 193, 195, 197, 198, 201, 202, 203, 204, 206, 207, 208, 210, 211, 213, 214, 220, 223, 224, 227, 229, 230, 231], "implement": [1, 4, 5, 7, 8, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 26, 27, 30, 36, 38, 39, 47, 62, 65, 74, 90, 94, 111, 112, 113, 114, 117, 118, 119, 123, 126, 134, 138, 145, 147, 160, 161, 186, 188, 195, 197, 198, 214, 224], "perform": [1, 3, 4, 5, 6, 10, 14, 15, 16, 17, 23, 38, 39, 47, 49, 52, 54, 65, 82, 85, 86, 87, 89, 90, 92, 93, 95, 96, 99, 104, 110, 114, 118, 119, 131, 138, 143, 186, 201, 207, 208, 210, 221, 223], "gibb": [1, 5], "sampl": [1, 3, 4, 5, 7, 14, 15, 16, 17, 23, 38, 40, 49, 51, 79, 80, 81, 82, 84, 89, 92, 94, 96, 111, 116, 119, 120, 122, 126, 133, 134, 138, 147, 201, 203, 205], "A": [1, 3, 4, 5, 10, 12, 13, 15, 17, 19, 23, 24, 28, 30, 31, 32, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 54, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 90, 91, 94, 96, 101, 103, 104, 110, 111, 113, 114, 117, 126, 127, 128, 137, 139, 145, 147, 152, 161, 167, 173, 177, 179, 180, 185, 186, 196, 197, 198, 201, 209, 213, 216, 221, 222, 223, 224, 225, 227, 228, 229], "deriv": [1, 39, 42, 49, 50, 84, 96, 111, 114, 119, 120, 133, 198, 231], "us": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 27, 28, 29, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 52, 53, 54, 60, 61, 62, 63, 65, 66, 68, 70, 72, 73, 74, 75, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 123, 124, 126, 128, 131, 134, 136, 137, 138, 139, 141, 144, 145, 147, 153, 154, 155, 156, 158, 159, 160, 161, 165, 167, 171, 172, 173, 174, 178, 180, 183, 184, 185, 186, 190, 191, 193, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 221, 222, 224, 225, 226, 228, 229, 231], "variat": [1, 2, 20, 21, 23, 34, 36, 38], "bay": [1, 5, 36], "infer": [1, 17, 29, 36, 39, 86, 87, 92, 93, 94, 95, 96, 118, 137, 148], "instead": [1, 4, 8, 11, 15, 21, 23, 39, 45, 52, 53, 61, 70, 74, 90, 91, 136, 138, 147, 169, 170, 177, 184, 186, 197, 217, 226, 227, 229], "third": [1, 8, 66, 136, 137, 138, 147, 195], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 181, 184, 185, 186, 190, 191, 193, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230], "introduc": [1, 134, 136, 153], "take": [1, 3, 4, 5, 13, 14, 15, 16, 23, 24, 32, 38, 39, 41, 47, 50, 51, 62, 64, 65, 74, 78, 92, 99, 113, 116, 118, 126, 134, 136, 140, 150, 152, 153, 161, 170, 185, 201, 210, 223, 224, 229], "advnatg": 1, "old": [1, 4, 15, 39, 61, 65, 73, 186, 227], "limit": [1, 3, 4, 39, 67, 84, 133, 137, 177], "diagon": [1, 3, 21, 24, 39, 40, 47, 61, 63, 65, 74, 82, 102, 103, 124, 137, 152, 211], "covari": [1, 3, 19, 39, 40, 44, 45, 47, 51, 54, 122, 123, 124], "author": [1, 2, 3, 4, 7, 13, 14, 15, 16, 38, 40, 52, 86, 88, 89, 90, 93, 94, 97, 111, 112, 119, 120, 145, 174, 195], "bertrand": [1, 2, 3, 4, 7, 13, 14, 15, 16, 38, 40, 52, 86, 88, 89, 90, 93, 94, 96, 97, 111, 112, 119, 137, 199], "thirion": [1, 2, 3, 4, 7, 13, 14, 15, 16, 38, 40, 52, 86, 88, 89, 90, 93, 94, 96, 97, 111, 112, 119, 137, 199], "2008": [1, 2, 17, 38, 50, 52, 89, 93, 97, 157, 199], "2011": [1, 7, 13, 14, 15, 16, 23, 34, 52, 58, 90, 111, 112, 119], "k": [1, 3, 4, 5, 6, 7, 13, 14, 15, 16, 39, 47, 50, 61, 63, 65, 66, 68, 74, 84, 90, 91, 92, 94, 96, 99, 104, 114, 137, 147, 152, 178, 210, 220, 222, 223, 224, 229], "1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 28, 29, 34, 35, 38, 39, 41, 42, 43, 44, 45, 47, 48, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 77, 82, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 111, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 130, 132, 133, 135, 136, 139, 147, 149, 152, 159, 161, 173, 174, 176, 177, 178, 179, 180, 183, 185, 187, 189, 190, 191, 192, 194, 195, 196, 202, 208, 209, 210, 211, 212, 213, 216, 217, 221, 222, 223, 224, 225, 229], "dim": [1, 3, 4, 5, 14, 15, 16, 23, 45, 47, 50, 51, 83, 88, 89, 91, 93, 94, 99, 101], "mean": [1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 17, 23, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 47, 49, 54, 61, 63, 65, 68, 72, 74, 84, 85, 88, 90, 91, 92, 95, 117, 118, 124, 126, 131, 133, 137, 138, 147, 150, 154, 161, 171, 179, 193, 195, 198, 202, 207, 208, 209, 224, 230], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 38, 39, 44, 45, 46, 47, 49, 50, 52, 53, 54, 61, 62, 63, 65, 68, 69, 70, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 123, 124, 125, 126, 128, 131, 136, 147, 202, 203, 205, 206, 207, 208, 210, 212, 213, 216], "precis": [1, 3, 5, 7, 39, 45, 47, 137, 186, 195], "weight": [1, 2, 3, 4, 5, 7, 13, 14, 15, 16, 26, 38, 41, 44, 47, 49, 84, 89, 90, 91, 92, 111, 133, 198], "shrinkag": [1, 2, 38], "dof": [1, 2, 36, 118], "thi": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 35, 38, 39, 40, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 124, 126, 127, 131, 133, 134, 136, 137, 138, 143, 144, 145, 147, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 173, 174, 178, 182, 184, 185, 186, 188, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 208, 209, 210, 212, 213, 215, 217, 219, 221, 222, 223, 224, 226, 227, 229, 230], "follow": [1, 3, 4, 14, 15, 16, 17, 23, 38, 39, 72, 84, 112, 116, 118, 119, 134, 138, 145, 147, 153, 155, 156, 157, 160, 161, 168, 170, 171, 173, 174, 176, 178, 179, 181, 182, 184, 185, 202, 217, 221, 223, 224, 226, 227, 229], "int": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 45, 46, 47, 49, 50, 51, 53, 54, 61, 62, 64, 65, 66, 67, 68, 69, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 110, 111, 113, 114, 118, 119, 121, 137, 177, 207, 208, 209, 210, 216], "number": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 23, 24, 29, 35, 36, 38, 39, 40, 41, 43, 46, 47, 49, 53, 54, 61, 64, 65, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 104, 110, 114, 118, 120, 132, 137, 141, 147, 174, 177, 195, 206, 209, 210, 216, 229], "compon": [1, 2, 3, 4, 5, 7, 8, 9, 14, 15, 16, 21, 34, 38, 39, 45, 47, 54, 67, 69, 77, 84, 85, 88, 90, 91, 94, 102, 114, 115, 124, 136, 143, 181, 183, 198, 207, 208, 209, 230], "dimens": [1, 3, 5, 6, 9, 10, 12, 13, 14, 27, 30, 39, 45, 47, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 68, 74, 75, 77, 81, 82, 88, 89, 92, 97, 113, 136, 137, 138, 147, 152, 179, 216, 229], "data": [1, 2, 3, 4, 5, 6, 7, 14, 16, 17, 19, 23, 24, 32, 33, 34, 35, 38, 39, 40, 44, 45, 46, 47, 49, 53, 54, 61, 62, 63, 65, 69, 72, 73, 74, 75, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 111, 112, 113, 114, 116, 117, 118, 128, 134, 137, 138, 144, 145, 147, 150, 160, 174, 179, 180, 186, 192, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 209, 211, 214, 215, 216, 217, 220, 224, 225, 229, 231], "arrai": [1, 2, 3, 4, 5, 6, 7, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 32, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 67, 68, 69, 74, 75, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 133, 136, 137, 141, 145, 149, 152, 156, 160, 179, 186, 192, 201, 202, 208, 209, 210, 211, 213, 216, 217, 223, 230, 231], "shape": [1, 2, 3, 4, 5, 6, 7, 10, 13, 14, 15, 16, 17, 19, 21, 24, 27, 28, 29, 31, 32, 36, 38, 39, 40, 44, 45, 47, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 67, 69, 72, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 110, 111, 112, 113, 116, 118, 119, 120, 121, 123, 130, 133, 141, 149, 152, 179, 198, 202, 203, 206, 216, 222, 223, 229], "all": [1, 3, 4, 5, 9, 14, 15, 16, 17, 21, 23, 26, 39, 45, 47, 48, 50, 51, 52, 53, 54, 63, 65, 66, 68, 69, 85, 87, 89, 90, 91, 93, 95, 104, 110, 111, 112, 116, 118, 124, 127, 131, 133, 134, 137, 138, 145, 147, 152, 153, 155, 156, 160, 161, 170, 171, 172, 176, 177, 178, 181, 182, 185, 186, 191, 193, 198, 201, 208, 209, 218, 221, 223, 224, 226, 227, 228, 229], "scale": [1, 2, 3, 19, 21, 23, 41, 42, 44, 45, 47, 49, 50, 61, 63, 65, 73, 74, 94, 103, 118, 120, 133, 152, 186, 197, 202, 211, 212, 224], "factor": [1, 5, 23, 24, 45, 47, 50, 65, 101, 103, 110, 119, 120, 133, 211], "posterior": [1, 2, 5, 17, 34, 36, 38, 86, 94, 96, 133, 137, 147, 152], "degre": [1, 2, 4, 14, 15, 16, 36, 47, 50, 83, 118, 124, 133, 145, 147, 152], "freedom": [1, 2, 36, 47, 50, 83, 118, 124], "prior_mean": 1, "prior": [1, 2, 3, 5, 6, 7, 34, 38, 86, 94], "prior_scal": 1, "prior_dof": 1, "least": [1, 2, 3, 21, 38, 44, 46, 47, 63, 74, 84, 85, 110, 113, 126, 127, 134, 137, 155, 174, 195, 196, 201, 207, 208], "equal": [1, 2, 16, 17, 39, 50, 53, 65, 66, 69, 83, 96, 114, 118, 124, 133, 143, 160], "prior_shrinkag": 1, "prior_weight": 1, "__init__": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 29, 30, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 61, 62, 64, 65, 66, 68, 71, 74, 76, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 93, 94, 95, 104, 111, 112, 113, 116, 117, 118, 123, 126, 127, 129, 133, 137, 138, 147, 174, 202, 214], "initi": [1, 2, 3, 5, 6, 7, 12, 14, 23, 24, 34, 38, 39, 40, 42, 44, 45, 46, 47, 64, 65, 84, 88, 89, 91, 92, 93, 97, 117, 126, 132, 133, 136, 160, 162, 191, 195, 202, 216, 221, 223], "structur": [1, 3, 4, 14, 15, 39, 45, 47, 61, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 94, 110, 134, 140, 144, 145, 148, 192, 197, 198, 200, 205, 207, 214, 217], "problem": [1, 3, 29, 39, 40, 44, 45, 47, 49, 74, 137, 139, 145, 154, 161, 173, 178, 193, 196, 197, 229], "eventu": [1, 137, 186], "provid": [1, 2, 4, 12, 14, 15, 16, 17, 20, 23, 24, 38, 39, 40, 44, 47, 54, 61, 72, 74, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 95, 112, 119, 120, 134, 137, 143, 158, 177, 178, 181, 185, 186, 188, 195, 198, 202, 203, 208, 217, 221], "differ": [1, 2, 3, 4, 5, 9, 10, 11, 14, 15, 16, 17, 23, 24, 39, 41, 47, 51, 61, 65, 66, 68, 74, 79, 80, 81, 82, 90, 91, 93, 94, 97, 104, 110, 111, 119, 120, 121, 134, 136, 137, 138, 145, 147, 166, 180, 181, 191, 192, 195, 196, 198, 201, 202, 203, 204, 205, 206, 216, 224, 229], "term": [1, 10, 17, 23, 47, 61, 74, 90, 91, 110, 111, 114, 118, 126, 133, 134, 137, 138, 143, 147, 152, 196, 198, 201, 224, 229], "average_log_lik": [1, 3, 5, 133], "x": [1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 20, 21, 23, 24, 26, 28, 31, 32, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 61, 63, 64, 65, 66, 67, 68, 69, 74, 76, 77, 78, 79, 80, 81, 82, 83, 96, 97, 99, 102, 103, 104, 110, 118, 120, 124, 125, 126, 133, 136, 137, 138, 147, 152, 155, 165, 177, 178, 185, 190, 202, 206, 210, 211, 216, 217, 222, 223, 224, 229], "tini": [1, 3, 5, 30, 39, 83, 118], "1e": [1, 2, 3, 5, 23, 39, 41, 42, 43, 44, 65, 83, 118, 124], "15": [1, 3, 5, 39, 40, 47, 63, 97, 104, 114, 118, 149, 191, 216], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 132, 134, 136, 137, 138, 141, 147, 152, 170, 191, 193, 202, 203, 204, 205, 206, 207, 208, 209, 213, 216, 223, 224, 228, 229], "averag": [1, 2, 3, 4, 5, 7, 12, 23, 92, 93, 94, 145], "log": [1, 2, 3, 5, 7, 21, 24, 29, 34, 39, 40, 41, 44, 45, 47, 65, 118, 133, 161, 163, 167, 169, 174, 186, 230], "likelihood": [1, 2, 3, 5, 24, 29, 34, 40, 41, 44, 45, 47, 118, 133], "mode": [1, 3, 5, 6, 18, 27, 32, 38, 40, 84, 86, 89, 92, 96, 133, 155, 170, 172, 177, 178, 189, 202, 216], "dataset": [1, 3, 5, 86, 90, 92, 94, 96, 97, 118, 133, 135, 139, 144, 148, 192, 201, 202, 214, 216], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 130, 132, 133, 134, 137, 140, 149, 177, 178, 193, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 224], "n_sampl": [1, 3, 5, 16, 38, 40, 51, 88, 118, 202], "self": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 18, 21, 26, 29, 38, 39, 40, 42, 44, 45, 46, 47, 50, 61, 64, 65, 66, 68, 74, 78, 84, 88, 90, 91, 93, 94, 111, 129, 137, 186, 193, 202], "estim": [1, 2, 3, 5, 7, 12, 17, 23, 24, 29, 36, 38, 39, 40, 44, 45, 47, 49, 83, 85, 96, 111, 114, 115, 116, 118, 123, 124, 133, 147, 197, 198, 202, 208, 214, 224], "process": [1, 2, 3, 5, 14, 17, 39, 47, 50, 85, 86, 92, 117, 122, 134, 148, 153, 186, 188, 191, 198, 208, 221, 230], "e": [1, 2, 3, 4, 5, 7, 13, 14, 15, 16, 17, 23, 32, 38, 39, 40, 45, 47, 50, 51, 54, 61, 64, 65, 72, 87, 88, 90, 91, 93, 94, 96, 111, 118, 119, 125, 131, 134, 136, 137, 144, 145, 147, 152, 156, 157, 161, 167, 174, 181, 191, 195, 197, 221, 224, 229], "small": [1, 3, 4, 5, 14, 15, 16, 21, 35, 39, 104, 120, 131, 176, 222, 226, 229, 230], "constant": [1, 3, 5, 17, 18, 23, 27, 32, 34, 39, 83, 94, 110, 121, 136, 137, 195, 197], "avoid": [1, 2, 3, 5, 21, 30, 38, 39, 73, 91, 103, 111, 152, 156, 161, 197, 202, 213, 227], "numer": [1, 3, 5, 21, 23, 39, 45, 47, 53, 80, 83, 111, 118, 120, 122, 126, 147, 184, 198, 201, 221], "singular": [1, 3, 5, 39, 45, 47, 51, 53, 54, 124], "bayes_factor": [1, 5, 133], "z": [1, 2, 3, 5, 6, 7, 23, 26, 39, 42, 46, 51, 54, 61, 63, 65, 66, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 95, 98, 99, 102, 104, 118, 133, 136, 137, 138, 147, 152, 206, 210, 217, 222, 223, 229], "nperm": [1, 5, 84], "0": [1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 27, 28, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 110, 111, 112, 113, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 149, 152, 161, 172, 173, 174, 176, 177, 178, 179, 180, 183, 185, 187, 189, 192, 194, 202, 207, 208, 209, 210, 212, 213, 216, 217, 218, 222, 223, 224, 225, 226, 227, 229], "verbos": [1, 2, 3, 4, 5, 6, 7, 14, 38, 39, 40, 84, 89, 92, 96, 178, 202], "evalu": [1, 2, 5, 18, 23, 24, 39, 44, 47, 50, 51, 64, 65, 110, 126, 133, 143, 196, 202, 224], "current": [1, 3, 4, 5, 14, 15, 16, 23, 39, 72, 79, 80, 81, 82, 116, 118, 119, 131, 137, 138, 147, 160, 161, 169, 171, 177, 178, 186, 191, 204, 221], "chib": [1, 5], "": [1, 4, 5, 7, 10, 14, 15, 16, 19, 21, 22, 23, 24, 30, 31, 35, 39, 44, 45, 47, 50, 53, 54, 63, 65, 67, 68, 74, 77, 79, 80, 81, 82, 84, 85, 90, 91, 92, 96, 97, 99, 104, 112, 116, 118, 120, 123, 126, 127, 128, 131, 134, 137, 138, 143, 145, 147, 152, 156, 160, 161, 166, 167, 169, 170, 172, 174, 176, 177, 178, 185, 186, 190, 191, 196, 197, 198, 199, 203, 205, 206, 208, 210, 216, 221, 222, 223, 224, 226, 227, 229], "nb_sampl": [1, 5], "from": [1, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 23, 24, 27, 28, 32, 35, 38, 39, 40, 45, 47, 48, 50, 51, 53, 54, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 96, 99, 101, 102, 103, 104, 110, 111, 113, 116, 117, 118, 120, 122, 123, 124, 125, 126, 127, 130, 131, 132, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 152, 153, 154, 157, 158, 159, 160, 162, 165, 167, 168, 169, 171, 174, 176, 178, 179, 180, 185, 186, 190, 191, 195, 196, 197, 198, 199, 201, 202, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 226, 229, 231], "which": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 23, 24, 27, 32, 35, 38, 39, 44, 45, 46, 47, 49, 50, 51, 53, 54, 61, 62, 63, 65, 66, 67, 69, 70, 74, 79, 80, 81, 82, 84, 85, 88, 90, 91, 94, 95, 96, 97, 103, 104, 110, 111, 113, 116, 120, 126, 127, 131, 134, 136, 137, 138, 141, 145, 147, 149, 152, 156, 158, 159, 160, 161, 177, 178, 184, 190, 191, 195, 196, 197, 198, 201, 202, 205, 209, 211, 221, 223, 224, 226, 227, 229, 230], "bic": [1, 3, 5, 45, 47, 133], "comput": [1, 2, 3, 4, 5, 7, 12, 14, 15, 16, 17, 20, 21, 23, 24, 28, 29, 34, 36, 38, 39, 40, 44, 45, 47, 50, 51, 52, 54, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 102, 111, 114, 117, 118, 119, 124, 145, 160, 171, 185, 196, 197, 202, 207, 208, 209, 210, 220, 221, 229], "type": [1, 4, 5, 8, 9, 13, 14, 15, 16, 23, 31, 39, 51, 61, 63, 65, 66, 74, 75, 79, 80, 81, 82, 83, 88, 90, 91, 104, 110, 111, 112, 116, 118, 126, 134, 136, 137, 138, 147, 161, 170, 172, 201, 203, 205, 206, 222, 224], "np": [1, 2, 3, 4, 5, 14, 15, 16, 17, 21, 35, 38, 39, 40, 45, 47, 48, 49, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 88, 90, 91, 94, 99, 110, 111, 113, 114, 116, 118, 120, 123, 124, 125, 126, 130, 131, 137, 138, 141, 147, 149, 152, 177, 179, 186, 202, 210, 216, 217, 222, 223, 224, 229], "int_": [1, 4, 5, 14, 15, 16, 39, 65, 90, 91, 94, 224], "correspond": [1, 4, 5, 14, 15, 16, 17, 19, 21, 23, 24, 38, 39, 51, 61, 62, 63, 65, 68, 74, 81, 84, 85, 88, 90, 91, 93, 94, 96, 98, 99, 110, 112, 114, 116, 118, 119, 126, 134, 137, 152, 178, 201, 202, 209, 210, 217, 223, 227, 229], "classif": [1, 3, 5], "permut": [1, 5, 68, 82, 84, 95, 102, 137, 229], "label": [1, 3, 4, 5, 6, 13, 14, 15, 16, 17, 34, 69, 74, 84, 88, 89, 90, 91, 93, 94, 95, 118, 128, 147, 156, 160, 170, 174, 177, 191, 198, 224], "switch": [1, 5, 84, 161, 170, 189, 191, 227], "issu": [1, 5, 96, 126, 147, 161, 174, 191, 195], "By": [1, 2, 3, 4, 5, 14, 15, 16, 17, 19, 27, 39, 74, 88, 90, 91, 95, 121, 137, 193, 197], "default": [1, 2, 3, 4, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 23, 24, 27, 28, 30, 32, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 61, 62, 63, 65, 66, 68, 69, 72, 79, 80, 81, 82, 87, 88, 90, 91, 93, 95, 96, 99, 102, 103, 110, 112, 113, 114, 116, 118, 120, 121, 125, 126, 128, 129, 134, 136, 154, 158, 161, 163, 170, 177, 178, 184, 190, 202, 203, 210, 213, 216, 217, 226], "exhaust": [1, 5, 84], "bf": [1, 5, 156, 170], "float": [1, 2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 28, 29, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 50, 53, 54, 63, 65, 66, 67, 71, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 110, 111, 112, 113, 116, 118, 119, 120, 121, 124, 126, 137, 177, 202, 207, 208, 209, 210, 211, 212, 213, 216, 224, 229], "evid": [1, 3, 5, 133], "note": [1, 2, 3, 4, 5, 7, 13, 14, 15, 16, 17, 23, 35, 38, 39, 44, 45, 47, 51, 53, 54, 61, 62, 65, 68, 70, 72, 74, 75, 78, 79, 80, 81, 82, 85, 88, 90, 91, 92, 95, 96, 99, 102, 103, 104, 111, 113, 116, 118, 119, 120, 131, 133, 138, 143, 145, 147, 149, 152, 155, 160, 161, 169, 170, 171, 174, 177, 184, 185, 190, 191, 196, 202, 203, 205, 210, 211, 213, 218, 223, 229], "see": [1, 4, 5, 10, 11, 14, 17, 23, 24, 27, 29, 34, 35, 39, 40, 44, 45, 47, 50, 54, 61, 62, 63, 65, 66, 68, 72, 74, 84, 99, 110, 111, 113, 116, 117, 120, 121, 126, 131, 136, 137, 138, 144, 145, 147, 149, 151, 152, 153, 154, 156, 158, 159, 161, 163, 165, 166, 170, 171, 172, 174, 177, 178, 181, 182, 184, 185, 186, 190, 191, 193, 196, 197, 198, 200, 201, 210, 218, 220, 222, 223, 224, 226, 227, 228, 229], "margin": [1, 5, 123], "output": [1, 4, 5, 8, 9, 10, 12, 15, 17, 21, 24, 27, 28, 32, 39, 41, 42, 45, 47, 54, 61, 62, 64, 65, 66, 67, 68, 69, 76, 78, 85, 87, 88, 90, 92, 102, 111, 112, 113, 116, 117, 118, 123, 124, 126, 127, 133, 134, 137, 139, 143, 152, 154, 158, 161, 174, 186, 194, 208, 217, 222, 223, 226], "journal": [1, 3, 5, 120], "articl": [1, 5, 120, 161, 198], "siddhartha": [1, 5], "american": [1, 5, 196], "statist": [1, 3, 5, 17, 29, 83, 84, 86, 88, 96, 116, 117, 118, 123, 126, 133, 148, 192, 197, 198, 202, 214, 221, 224], "associ": [1, 4, 5, 13, 14, 15, 16, 17, 23, 28, 29, 34, 36, 38, 40, 79, 80, 81, 82, 83, 88, 90, 91, 94, 111, 118, 134, 137, 145, 152, 179, 202, 222, 223, 224, 229], "vol": [1, 5, 10, 50, 149, 220], "90": [1, 5, 39, 65, 147, 152], "1995": [1, 5, 50], "like": [1, 3, 4, 5, 7, 11, 14, 15, 16, 17, 19, 21, 22, 23, 24, 27, 30, 34, 35, 36, 39, 44, 45, 47, 51, 53, 54, 61, 63, 64, 65, 69, 70, 72, 79, 81, 90, 91, 99, 104, 110, 113, 116, 118, 119, 120, 121, 126, 130, 131, 132, 133, 134, 137, 138, 139, 143, 144, 147, 149, 152, 154, 156, 158, 160, 161, 169, 171, 174, 176, 177, 178, 180, 184, 186, 190, 191, 193, 195, 196, 197, 198, 201, 223, 224, 226, 227, 229, 230], "approxim": [1, 3, 4, 5, 20, 23, 24, 36, 47, 48, 50, 83, 114, 197, 229], "wise": [1, 3, 5, 17, 31, 53, 90, 91], "valu": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27, 32, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 110, 112, 114, 116, 117, 118, 120, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 147, 152, 185, 186, 198, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 216, 224, 229], "check": [1, 2, 3, 4, 5, 8, 13, 15, 30, 31, 38, 39, 40, 44, 47, 48, 50, 53, 62, 65, 66, 74, 93, 113, 120, 133, 137, 138, 143, 147, 161, 170, 174, 180, 185, 190, 226, 227], "siffer": [1, 5], "matric": [1, 3, 5, 13, 16, 39, 45, 47, 51, 77, 110, 111, 122, 133, 137, 152, 192, 198, 230], "involv": [1, 3, 5, 17, 29, 126, 185, 198, 224], "check_x": [1, 3, 5, 133], "essenti": [1, 3, 4, 5, 39, 64, 83, 181, 197, 230], "possibli": [1, 3, 5, 8, 14, 17, 23, 39, 44, 45, 46, 47, 50, 65, 69, 72, 110, 112, 161, 186, 229], "reshap": [1, 3, 5, 61, 63, 69, 116, 147], "conditional_posterior_proba": [1, 5, 133], "perm": [1, 5], "probabl": [1, 2, 5, 7, 17, 24, 38, 39, 42, 50, 94, 116, 129, 170, 175, 176, 185, 190, 224, 226], "given": [1, 2, 3, 4, 5, 10, 14, 15, 17, 18, 21, 23, 24, 26, 27, 29, 31, 32, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 54, 61, 63, 65, 66, 67, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 104, 110, 116, 118, 120, 126, 127, 128, 130, 137, 147, 150, 152, 201, 202, 203, 204, 206, 209, 210, 216, 217, 224, 229], "ok": [1, 5, 137, 174], "typ": [1, 5], "option": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 32, 38, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 54, 61, 62, 63, 65, 66, 68, 69, 72, 74, 75, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 102, 103, 104, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 126, 128, 130, 131, 132, 137, 138, 147, 158, 159, 161, 169, 170, 172, 176, 177, 182, 184, 185, 186, 195, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 229], "under": [1, 2, 3, 4, 5, 14, 36, 38, 40, 84, 96, 102, 103, 118, 131, 137, 145, 195, 198, 202, 213, 218], "thing": [1, 5, 39, 44, 45, 46, 47, 54, 63, 65, 113, 117, 134, 137, 138, 147, 149, 164, 167, 170, 177, 178, 185, 226, 229], "recomput": [1, 3, 5, 44, 45, 46, 47, 90, 91], "niter": [1, 2, 3, 5, 33, 34, 36, 44, 46, 47, 49, 83, 84, 86, 89, 95, 115, 124, 133], "100": [1, 2, 3, 5, 7, 14, 21, 38, 39, 67, 86, 89, 118, 125, 137, 138], "delta": [1, 2, 3, 5, 6, 114, 115, 126, 224], "0001": [1, 2, 3, 5, 6, 14, 20, 123, 170], "maxim": [1, 3, 4, 5, 14, 15, 45, 47, 50, 51, 54, 84, 99, 210], "iter": [1, 2, 3, 5, 6, 7, 14, 20, 23, 39, 40, 44, 46, 47, 49, 61, 62, 66, 69, 84, 86, 89, 113, 116, 117, 132, 134], "4": [1, 3, 5, 9, 11, 17, 19, 21, 23, 24, 27, 28, 35, 39, 47, 48, 50, 51, 53, 61, 63, 64, 65, 67, 68, 69, 72, 74, 97, 99, 102, 103, 110, 113, 114, 120, 125, 126, 130, 136, 137, 138, 147, 149, 152, 155, 176, 177, 185, 202, 210, 211, 213, 216, 221, 222, 223, 224, 229], "increment": [1, 2, 3, 5, 6], "converg": [1, 2, 3, 5, 6, 14, 20, 23, 34, 44, 89], "declar": [1, 2, 3, 5, 6, 14, 23, 137], "asymptot": [1, 3, 5, 39], "guess_prior": [1, 5, 133], "nocheck": [1, 5], "set": [1, 2, 3, 4, 5, 7, 13, 14, 15, 16, 17, 21, 22, 23, 26, 30, 39, 40, 45, 46, 47, 48, 50, 51, 53, 54, 63, 65, 66, 67, 68, 72, 74, 78, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 99, 102, 104, 110, 116, 119, 120, 121, 128, 129, 133, 134, 136, 145, 147, 149, 154, 155, 160, 161, 164, 168, 169, 170, 174, 177, 178, 179, 180, 184, 185, 189, 190, 201, 202, 210, 216, 224, 226, 229], "order": [1, 4, 5, 14, 15, 17, 18, 23, 27, 28, 32, 34, 35, 39, 44, 47, 50, 61, 65, 66, 68, 74, 82, 90, 94, 95, 99, 102, 103, 110, 111, 116, 117, 118, 121, 127, 130, 133, 134, 136, 137, 139, 143, 178, 180, 186, 191, 210, 213, 224, 229], "have": [1, 2, 3, 4, 5, 8, 11, 14, 15, 16, 27, 32, 35, 39, 44, 45, 47, 49, 50, 54, 61, 63, 64, 65, 66, 68, 73, 84, 85, 90, 91, 93, 102, 104, 110, 112, 116, 117, 118, 120, 123, 126, 127, 131, 133, 134, 136, 137, 138, 141, 143, 144, 145, 147, 149, 152, 153, 154, 155, 158, 161, 162, 163, 165, 167, 169, 170, 171, 172, 174, 177, 178, 179, 181, 184, 185, 186, 190, 191, 193, 195, 196, 197, 198, 207, 208, 209, 222, 223, 224, 226, 227, 228, 229], "them": [1, 3, 5, 39, 63, 65, 72, 85, 86, 90, 96, 117, 134, 137, 138, 143, 147, 152, 161, 170, 174, 185, 186, 191, 195, 197, 223, 224, 226, 227, 229], "weakli": [1, 3, 5], "uninform": [1, 5], "fralei": [1, 3, 5], "rafteri": [1, 3, 5], "24": [1, 3, 5, 21, 39, 48, 61, 63, 111, 119, 147, 191], "155": [1, 3, 5], "181": [1, 3, 5], "2007": [1, 3, 5, 15, 40, 86, 94, 96, 134, 185, 199, 220], "boolean": [1, 2, 4, 5, 13, 15, 17, 24, 27, 38, 39, 40, 69, 75, 82, 84, 85, 88, 91, 99, 102, 103, 104, 202, 207, 208, 209, 210, 211, 213], "true": [1, 2, 3, 4, 5, 8, 11, 13, 14, 15, 17, 19, 20, 23, 24, 27, 28, 30, 31, 33, 38, 39, 40, 47, 48, 50, 54, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 82, 85, 88, 90, 91, 96, 99, 101, 103, 104, 110, 111, 116, 118, 120, 121, 125, 126, 128, 132, 136, 137, 138, 160, 177, 190, 202, 203, 207, 208, 209, 210, 213, 223, 229], "skip": [1, 5, 31, 128], "guess_regular": [1, 3, 5, 133], "bcheck": [1, 3, 5], "regular": [1, 3, 5, 23, 34, 39, 79, 80, 81, 82, 94, 121, 131, 155, 186, 198, 201, 203], "inform": [1, 3, 4, 5, 14, 17, 24, 39, 44, 45, 47, 49, 63, 74, 79, 80, 81, 82, 88, 89, 92, 93, 94, 96, 111, 133, 134, 137, 138, 145, 147, 161, 165, 192, 201, 222, 223, 227, 229, 231], "accord": [1, 3, 4, 5, 14, 15, 16, 18, 23, 27, 32, 39, 47, 61, 91, 134, 137], "updat": [1, 2, 3, 5, 68, 90, 91, 133, 134, 160, 164, 168, 174, 190, 191], "initialize_and_estim": [1, 3, 5, 133], "ninit": [1, 3, 5, 6, 7], "reach": [1, 3, 5, 169, 198], "good": [1, 3, 5, 47, 92, 96, 134, 137, 147, 160, 161, 165, 167, 169, 174, 176, 185, 190, 195, 197, 198, 201, 219, 230], "solut": [1, 3, 5, 137], "best": [1, 3, 5, 7, 30, 65, 79, 80, 81, 82, 104, 118, 152, 153, 170, 178, 186, 190, 195, 197, 203], "map_label": [1, 3, 5, 94, 133], "map": [1, 3, 5, 8, 10, 17, 23, 27, 32, 34, 38, 39, 46, 54, 61, 63, 64, 66, 67, 68, 76, 78, 79, 80, 81, 82, 84, 85, 86, 88, 90, 91, 95, 96, 97, 99, 100, 102, 103, 104, 133, 138, 139, 143, 145, 149, 150, 180, 192, 198, 201, 203, 204, 210, 211, 213, 214, 220, 225, 231], "studi": [1, 3, 5, 84, 94, 96, 198], "result": [1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 21, 24, 29, 30, 38, 39, 44, 45, 47, 50, 53, 54, 61, 62, 65, 66, 67, 74, 84, 87, 88, 89, 90, 91, 92, 94, 96, 97, 111, 112, 113, 114, 116, 117, 118, 126, 128, 132, 152, 201, 216, 227, 229], "row": [1, 3, 4, 5, 14, 15, 16, 18, 39, 40, 44, 45, 47, 50, 52, 64, 65, 74, 96, 110, 111, 137, 138], "mixture_likelihood": [1, 3, 5, 133], "plugin": [1, 3, 5, 133, 158, 178], "manual": [1, 3, 5, 75, 159, 161, 168, 169, 174, 181, 191, 217], "pop": [1, 3, 4, 5, 54, 133], "popul": [1, 3, 5, 93, 94, 96, 133], "alloc": [1, 3, 5, 136], "variabl": [1, 5, 14, 16, 17, 23, 31, 39, 41, 43, 44, 47, 50, 54, 63, 88, 96, 116, 127, 133, 137, 178, 190, 227], "hist": [1, 5], "count": [1, 5, 39, 45, 90, 91, 93, 133, 198], "probability_under_prior": [1, 5, 133], "mem": 1, "indic": [1, 4, 5, 7, 14, 15, 35, 39, 40, 51, 61, 64, 65, 69, 74, 82, 85, 88, 90, 91, 94, 99, 103, 104, 126, 137, 138, 147, 210, 213], "best_weight": 1, "best_mean": 1, "best_precis": 1, "possiblez": 1, "give": [1, 3, 4, 8, 10, 13, 17, 23, 24, 32, 35, 39, 47, 50, 54, 61, 63, 65, 69, 74, 76, 79, 80, 81, 82, 85, 90, 91, 92, 104, 114, 118, 126, 130, 134, 136, 137, 138, 141, 147, 152, 155, 160, 161, 163, 167, 171, 184, 195, 201, 204, 207, 217, 222, 227, 229], "highest": [1, 14, 35, 94, 110, 147], "first": [1, 2, 4, 10, 14, 15, 17, 23, 24, 28, 34, 35, 36, 39, 40, 50, 53, 54, 61, 62, 63, 64, 65, 66, 68, 69, 74, 81, 82, 85, 86, 96, 112, 113, 114, 116, 127, 136, 137, 138, 141, 143, 145, 147, 152, 154, 157, 158, 161, 169, 171, 174, 176, 178, 179, 184, 191, 198, 199, 201, 216, 217, 224, 226, 227], "sample_and_averag": [1, 5, 133], "across": [1, 5, 7, 10, 23, 28, 38, 62, 85, 89, 92, 113, 118, 178, 197, 198, 209, 230], "make": [1, 3, 5, 17, 23, 39, 61, 63, 64, 65, 67, 68, 69, 71, 72, 74, 88, 96, 103, 110, 111, 126, 134, 136, 137, 138, 143, 147, 149, 152, 153, 154, 156, 158, 160, 164, 167, 168, 169, 171, 172, 173, 176, 178, 180, 185, 186, 190, 191, 193, 195, 196, 197, 201, 211, 219, 223, 226, 227, 229, 230], "sens": [1, 5, 23, 39, 45, 47, 63, 64, 68, 69, 96, 137, 143, 195, 229], "onli": [1, 2, 3, 4, 5, 13, 14, 15, 16, 18, 19, 23, 38, 39, 44, 47, 50, 51, 54, 61, 63, 65, 74, 82, 84, 85, 90, 91, 92, 95, 96, 99, 102, 103, 104, 111, 118, 126, 134, 136, 137, 138, 141, 147, 152, 155, 161, 163, 169, 171, 172, 177, 179, 185, 191, 195, 197, 201, 207, 208, 209, 213, 229], "occur": [1, 5, 39, 193, 195, 224], "so": [1, 4, 5, 14, 15, 16, 21, 23, 24, 30, 39, 44, 50, 54, 65, 68, 69, 72, 74, 90, 91, 112, 118, 121, 126, 131, 134, 136, 137, 138, 143, 144, 147, 152, 153, 154, 155, 156, 161, 169, 170, 171, 178, 185, 190, 191, 195, 196, 197, 223, 226, 227, 229], "wrong": [1, 5, 68, 131, 161, 226], "gener": [1, 5, 8, 21, 23, 24, 28, 30, 36, 38, 39, 40, 41, 42, 45, 47, 48, 53, 61, 63, 65, 68, 70, 79, 80, 81, 82, 84, 85, 88, 90, 91, 93, 96, 97, 110, 111, 116, 118, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 145, 147, 152, 154, 155, 161, 163, 166, 170, 172, 177, 186, 192, 193, 197, 198, 202, 214, 222, 224, 228, 229, 230], "fix": [1, 5, 7, 20, 23, 44, 47, 49, 63, 65, 67, 74, 92, 96, 118, 119, 147, 149, 153, 156, 160, 161, 170, 178, 186, 190, 197, 224], "procedur": [1, 2, 4, 5, 16, 23, 47, 84, 92, 96, 118, 226], "identif": [1, 4, 5, 15, 137], "sample_ind": [1, 5, 133], "draw": [1, 5, 96, 104, 111], "membership": [1, 2, 5, 40], "set_prior": [1, 5, 133], "show": [1, 2, 3, 4, 5, 7, 11, 14, 15, 16, 47, 94, 104, 111, 129, 133, 137, 149, 155, 161, 169, 171, 177, 224, 226], "gd": [1, 3, 5], "densiti": [1, 2, 3, 5, 7, 38, 50, 86, 87, 94, 120, 133, 224], "ax": [1, 2, 3, 4, 5, 8, 11, 14, 15, 16, 38, 54, 61, 63, 65, 66, 68, 69, 90, 91, 99, 103, 104, 111, 113, 133, 137, 147, 152, 160, 179, 198, 202, 210, 229], "plot": [1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 38, 99, 102, 103, 104, 111, 133, 173, 192, 202, 210, 213, 214, 221, 227, 230], "still": [1, 3, 5, 65, 84, 137, 138, 147, 161, 174, 177, 186, 191, 195, 221], "progress": [1, 3, 5, 156, 161, 170, 176], "work": [1, 2, 3, 5, 8, 15, 23, 39, 51, 53, 61, 63, 65, 72, 74, 77, 90, 95, 96, 103, 134, 137, 138, 147, 149, 154, 156, 161, 166, 167, 170, 173, 176, 179, 180, 182, 184, 185, 186, 190, 198, 199, 201, 213, 215, 223, 224, 226, 230], "1d": [1, 3, 5, 38, 45, 47, 74, 97, 102, 118, 121, 124, 202, 216], "2d": [1, 3, 4, 5, 13, 14, 15, 16, 39, 47, 51, 53, 69, 74, 97, 99, 102, 104, 110, 116, 118, 188, 198, 210, 216, 217, 230], "griddescriptor": [1, 5, 133], "instanc": [1, 3, 4, 5, 8, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 28, 30, 32, 39, 41, 44, 45, 46, 47, 50, 61, 62, 63, 64, 65, 68, 72, 73, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 103, 104, 111, 112, 113, 116, 117, 118, 134, 137, 138, 141, 147, 158, 161, 178, 201, 213, 216, 217, 224], "o": [1, 3, 4, 5, 14, 15, 16, 39, 50, 70, 72, 133, 137, 165, 178, 185, 195, 221, 224, 226, 229], "prod": [1, 3, 5, 69, 132], "n_bin": [1, 3, 5], "one": [1, 2, 3, 4, 5, 10, 14, 15, 16, 17, 23, 24, 26, 32, 35, 38, 39, 40, 41, 42, 49, 50, 51, 53, 54, 64, 65, 66, 74, 76, 78, 85, 86, 87, 88, 90, 91, 92, 102, 111, 112, 117, 118, 119, 126, 127, 128, 134, 137, 138, 140, 143, 147, 152, 156, 161, 163, 170, 179, 186, 190, 191, 193, 195, 198, 201, 202, 223, 224, 229], "discret": [1, 3, 5, 6, 29, 88, 91, 118, 126, 136, 195], "grid": [1, 3, 5, 16, 23, 24, 27, 79, 80, 81, 82, 88, 95, 119, 133, 136, 147, 186, 198, 201, 203, 205], "impli": [1, 3, 5, 16, 39, 49, 64, 67, 74, 110, 137, 152, 169], "show_compon": [1, 3, 5, 133], "mpax": [1, 2, 3, 5, 38, 202], "handl": [1, 2, 3, 4, 5, 14, 15, 16, 38, 39, 40, 47, 48, 87, 88, 90, 91, 111, 112, 118, 161, 197, 202, 229], "figur": [1, 3, 5, 11, 28, 38, 99, 103, 104, 202, 210, 216, 217, 224], "new": [1, 2, 3, 4, 5, 13, 15, 19, 24, 30, 38, 39, 54, 61, 62, 63, 65, 72, 76, 78, 79, 80, 81, 82, 90, 91, 99, 110, 116, 134, 137, 138, 143, 147, 153, 154, 155, 156, 162, 164, 169, 170, 171, 174, 186, 191, 197, 199, 202, 203, 204, 205, 210, 221, 226, 229], "creat": [1, 2, 3, 4, 5, 11, 14, 15, 16, 22, 24, 38, 39, 61, 62, 63, 64, 65, 66, 70, 74, 76, 78, 82, 87, 88, 90, 91, 94, 97, 99, 103, 104, 110, 113, 116, 117, 123, 126, 128, 134, 136, 137, 140, 148, 150, 153, 155, 160, 164, 177, 178, 185, 186, 189, 190, 198, 202, 210, 211, 216, 217, 223, 229, 230, 231], "test": [1, 3, 4, 5, 9, 15, 23, 31, 32, 38, 39, 40, 47, 49, 50, 54, 60, 61, 62, 63, 65, 66, 68, 72, 83, 84, 86, 87, 92, 95, 96, 113, 117, 118, 126, 131, 133, 143, 153, 156, 160, 170, 173, 174, 180, 185, 186, 190, 192, 197, 198, 202, 216, 222, 223, 226], "ll": [1, 2, 3, 5, 7, 9, 10, 29, 61, 137, 147, 154, 160, 161, 169, 171, 174, 185, 195, 197, 223], "train": [1, 3, 5, 133], "idem": [1, 3, 4, 5, 92, 96, 119], "unweighted_likelihood": [1, 3, 5, 133], "each": [1, 2, 3, 4, 5, 7, 8, 10, 14, 15, 16, 17, 18, 20, 21, 23, 24, 28, 35, 38, 39, 40, 45, 47, 49, 51, 52, 54, 62, 64, 65, 66, 69, 74, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 99, 104, 110, 113, 116, 118, 120, 121, 126, 134, 137, 141, 145, 152, 154, 155, 161, 178, 185, 191, 197, 198, 201, 209, 210, 216, 224, 226, 229], "unweight": [1, 3, 5], "hopefulli": [1, 3, 4, 5, 153], "faster": [1, 3, 5, 20, 39, 185, 197], "unweighted_likelihood_": [1, 3, 5, 133], "update_mean": [1, 5, 133], "vector": [1, 5, 6, 16, 17, 20, 21, 23, 28, 35, 40, 44, 45, 46, 47, 48, 51, 52, 54, 65, 68, 71, 74, 77, 83, 84, 95, 118, 120, 122, 126, 137, 176, 224, 229], "resampl": [1, 5, 18, 23, 61, 79, 80, 81, 82, 96, 111, 133, 137, 139, 143, 147, 149, 150, 152, 186, 192, 201, 203, 205, 223, 229], "update_precis": [1, 5, 133], "update_weight": [1, 5, 133], "subclass": [1, 39, 45, 47, 50, 61, 78, 137], "bound": [1, 2, 24, 38, 39, 67, 77, 79, 80, 81, 82, 102, 104, 126, 203], "aka": 1, "free": [1, 34, 39, 153, 155, 195, 198, 200, 227, 229], "energi": [1, 23, 34, 176], "If": [1, 2, 4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 30, 31, 38, 39, 44, 45, 46, 47, 49, 50, 51, 53, 54, 61, 62, 63, 64, 65, 68, 69, 70, 72, 74, 75, 79, 80, 81, 82, 85, 90, 91, 92, 94, 97, 99, 102, 103, 104, 110, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 136, 137, 143, 147, 152, 153, 155, 156, 161, 163, 169, 170, 178, 184, 186, 190, 193, 195, 196, 197, 202, 203, 205, 206, 207, 210, 213, 216, 223, 224, 226, 227, 229], "ev": [1, 126], "item": [1, 3, 6, 24, 38, 39, 50, 62, 68, 69, 90, 93, 96, 113, 134, 186], "being": [1, 3, 4, 5, 7, 12, 15, 21, 23, 39, 61, 65, 68, 81, 82, 95, 96, 97, 116, 120, 137, 184, 186, 196, 201, 224, 229], "detsh": [1, 133], "h": [1, 24, 29, 38, 39, 42, 47, 74, 96, 114, 120, 124, 160, 185, 224, 229], "routin": [1, 4, 11, 17, 20, 23, 30, 35, 38, 39, 47, 50, 61, 86, 94, 116, 138, 147, 176, 197, 214, 227], "determin": [1, 12, 21, 23, 39, 47, 51, 65, 66, 67, 72, 99, 120, 124, 136, 137, 152, 176, 198, 210, 224, 229], "symmetr": [1, 4, 14, 15, 16], "posit": [1, 2, 4, 14, 15, 16, 17, 23, 24, 35, 38, 39, 53, 61, 62, 74, 79, 80, 81, 82, 86, 88, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 113, 136, 137, 147, 152, 155, 179, 201, 202, 206, 210, 213, 216, 217], "n": [1, 2, 4, 5, 6, 7, 14, 15, 16, 17, 21, 22, 23, 26, 30, 35, 36, 38, 39, 40, 41, 43, 44, 47, 50, 62, 63, 65, 67, 74, 77, 81, 88, 91, 94, 95, 103, 113, 116, 118, 119, 122, 124, 126, 131, 133, 174, 190, 201, 202, 213, 224, 229, 230], "input": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 21, 23, 24, 27, 28, 29, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 46, 49, 51, 54, 61, 62, 63, 64, 65, 66, 68, 72, 75, 76, 78, 79, 80, 81, 82, 85, 87, 88, 90, 91, 92, 94, 96, 102, 111, 116, 118, 122, 124, 126, 133, 134, 137, 143, 149, 152, 186, 196, 201, 206, 222, 223, 229], "matrix": [1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 19, 21, 22, 24, 28, 36, 39, 40, 44, 45, 46, 47, 48, 52, 53, 54, 61, 65, 74, 76, 77, 82, 88, 95, 96, 97, 99, 103, 104, 110, 111, 116, 117, 118, 122, 123, 124, 137, 152, 197, 210, 211, 213, 216, 223, 225, 229, 230, 231], "assum": [1, 3, 4, 5, 9, 15, 16, 17, 22, 23, 29, 34, 38, 39, 44, 45, 47, 53, 64, 74, 89, 90, 91, 94, 96, 110, 112, 116, 118, 119, 126, 169, 181, 182, 184, 198, 201, 202, 226, 229], "symmmetr": 1, "dh": 1, "dirichlet_ev": [1, 133], "w": [1, 5, 13, 23, 39, 41, 65, 74, 177, 190, 197, 229], "alpha": [1, 5, 38, 45, 47, 101, 104, 177, 202], "certain": [1, 3, 4, 14, 15, 16, 23, 31, 38, 88, 90, 91, 92, 97, 137, 158, 178, 198, 202, 216, 229], "dirichlet": [1, 5, 86], "dkl_dirichlet": [1, 133], "w1": [1, 115], "w2": 1, "kl": [1, 66], "diverg": 1, "between": [1, 4, 9, 10, 13, 14, 15, 16, 23, 27, 39, 46, 49, 52, 61, 65, 67, 74, 75, 76, 79, 80, 81, 82, 84, 85, 90, 91, 102, 103, 118, 120, 121, 126, 134, 136, 137, 143, 152, 177, 189, 191, 193, 195, 196, 197, 201, 204, 207, 208, 213, 222, 223, 224, 229], "two": [1, 4, 7, 10, 12, 13, 15, 16, 17, 23, 24, 39, 40, 45, 47, 50, 63, 64, 65, 66, 74, 84, 110, 112, 116, 117, 118, 120, 126, 127, 134, 136, 137, 138, 143, 147, 152, 153, 177, 195, 199, 202, 216, 221, 222, 223, 224, 226, 229], "distribut": [1, 2, 7, 24, 29, 38, 39, 42, 50, 90, 91, 120, 145, 180, 181, 182, 192, 195, 198, 202, 222, 224], "second": [1, 2, 17, 23, 24, 35, 36, 54, 65, 66, 74, 110, 111, 116, 119, 120, 127, 136, 137, 143, 152, 169, 174, 178, 195, 199, 216, 224], "dkl_gaussian": [1, 133], "m1": [1, 152], "p1": 1, "m2": 1, "p2": 1, "gausian": 1, "dkl_wishart": [1, 133], "a1": [1, 65], "b1": 1, "a2": [1, 65, 120], "b2": 1, "bteween": 1, "wishart": 1, "dkl": 1, "kullback": 1, "leibler": 1, "generate_wishart": [1, 133], "v": [1, 4, 10, 13, 14, 15, 16, 18, 23, 39, 43, 47, 74, 84, 88, 89, 125, 137, 152, 160, 171, 178], "generate_norm": [1, 133], "m": [1, 10, 23, 39, 45, 47, 50, 51, 53, 54, 65, 85, 118, 120, 124, 137, 152, 161, 170, 185, 190, 207, 208, 209, 220, 229], "p": [1, 2, 4, 6, 13, 14, 15, 16, 17, 21, 24, 34, 36, 38, 39, 40, 42, 43, 47, 51, 52, 54, 63, 65, 67, 68, 69, 74, 83, 84, 87, 88, 90, 91, 95, 96, 98, 118, 122, 124, 131, 137, 146, 161, 169, 190, 191, 193, 197, 202, 222, 223, 224, 226, 229], "ng": [1, 2], "generate_perm": [1, 133], "nbperm": 1, "repres": [1, 3, 4, 13, 14, 15, 16, 17, 21, 23, 24, 27, 32, 38, 39, 46, 51, 61, 65, 66, 67, 77, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 111, 112, 124, 126, 134, 136, 137, 147, 152, 161, 177, 201, 209, 217, 223, 224, 229], "element": [1, 12, 21, 23, 24, 31, 39, 51, 53, 62, 65, 69, 74, 88, 99, 110, 113, 116, 117, 132, 134, 136, 137, 147, 210], "gamma": [1, 38, 39, 86, 120, 133, 224], "random": [1, 5, 6, 12, 24, 34, 39, 40, 43, 45, 47, 49, 50, 54, 61, 65, 84, 92, 96, 97, 118, 125, 137, 177, 202, 216, 221], "multinomi": [1, 39, 133], "form": [1, 17, 39, 40, 50, 67, 69, 74, 75, 95, 96, 110, 111, 126, 127, 137, 152, 169, 174, 195, 224], "miltivari": 1, "nelement": 1, "nclass": 1, "belongin": 1, "assumedt": 1, "sum": [1, 2, 4, 13, 14, 15, 16, 26, 38, 39, 44, 46, 47, 54, 61, 88, 94, 96, 118, 120, 126, 224, 229, 230], "One": [1, 2, 5, 17, 23, 24, 39, 84, 90, 91, 128, 131, 134, 137, 143, 178, 191, 221], "normal_ev": [1, 133], "mu": [1, 34, 38, 41, 43, 50, 89, 92, 202], "dp": [1, 156], "normal": [1, 2, 4, 12, 14, 15, 16, 17, 19, 24, 26, 29, 38, 39, 40, 47, 54, 120, 121, 133, 136, 137, 145, 150, 178, 202, 224, 229, 231], "inv": [1, 21, 36, 47, 51, 133, 217], "wishart_ev": [1, 133], "dv": 1, "dw": 1, "piv": 1, "invers": [1, 3, 21, 39, 41, 42, 44, 45, 47, 48, 51, 61, 65, 76, 78, 81, 115, 133, 137, 152, 223, 229], "dimension": [2, 4, 7, 14, 15, 16, 23, 24, 47, 50, 51, 54, 58, 64, 80, 81, 95, 118, 125, 137, 147, 198, 201], "point": [2, 3, 4, 5, 7, 8, 10, 14, 15, 16, 18, 20, 22, 23, 24, 27, 28, 29, 30, 32, 38, 39, 53, 54, 64, 65, 67, 79, 80, 81, 82, 84, 85, 88, 89, 99, 134, 137, 141, 147, 155, 159, 161, 170, 171, 190, 191, 201, 202, 203, 207, 208, 210, 223, 224, 226, 229], "algo": [2, 4, 14, 15, 16], "approcum": 2, "maximum": [2, 4, 6, 7, 12, 14, 17, 20, 23, 34, 39, 44, 47, 50, 53, 67, 84, 103, 118, 213], "em": [2, 34, 40, 49, 84], "merlin": [2, 17, 84], "keller": [2, 17, 84], "2005": [2, 50, 93, 118, 199, 220], "shape_n": 2, "scale_n": 2, "var": [2, 40, 50], "shape_p": 2, "scale_p": 2, "mixt": 2, "33333333": 2, "object": [2, 3, 4, 7, 8, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 27, 29, 30, 31, 33, 34, 38, 40, 41, 42, 43, 44, 45, 47, 48, 50, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 95, 99, 104, 111, 112, 113, 116, 117, 118, 123, 126, 132, 133, 134, 136, 137, 138, 141, 147, 149, 160, 161, 178, 186, 197, 201, 202, 203, 204, 209, 225, 226, 229, 230, 231], "where": [2, 3, 4, 5, 10, 13, 14, 15, 16, 17, 21, 23, 24, 26, 27, 29, 30, 34, 35, 36, 38, 39, 40, 44, 45, 46, 47, 49, 50, 53, 61, 65, 69, 74, 83, 84, 85, 88, 91, 95, 96, 99, 104, 114, 116, 117, 118, 120, 126, 127, 134, 137, 138, 145, 147, 152, 154, 155, 161, 167, 170, 174, 178, 186, 193, 198, 202, 210, 214, 218, 221, 224, 226, 229], "ha": [2, 3, 4, 8, 10, 12, 13, 14, 15, 16, 19, 21, 24, 32, 38, 39, 44, 45, 47, 49, 50, 51, 54, 61, 62, 63, 64, 65, 66, 68, 74, 79, 81, 86, 87, 88, 90, 91, 94, 95, 110, 113, 115, 116, 120, 126, 127, 131, 133, 137, 138, 143, 147, 152, 155, 159, 161, 167, 169, 172, 174, 177, 178, 179, 185, 186, 196, 197, 198, 201, 221, 223, 224, 226, 229, 230], "neg": [2, 4, 14, 15, 16, 21, 24, 38, 39, 44, 47, 50, 65, 137, 147, 152], "sign": [2, 15, 39, 40, 84, 89, 96, 137, 174], "while": [2, 17, 23, 39, 89, 111, 161, 172, 174, 177, 185, 197, 221, 222], "7": [2, 19, 21, 23, 39, 45, 47, 50, 51, 61, 63, 65, 74, 97, 99, 103, 120, 137, 161, 185, 210, 213, 216, 227], "varianc": [2, 7, 9, 10, 17, 23, 34, 36, 38, 40, 41, 43, 44, 45, 47, 49, 50, 54, 83, 84, 87, 95, 96, 111, 118, 124, 133, 202], "constructor": [2, 13, 15, 16, 47, 61, 66, 152, 229], "neh": 2, "must": [2, 4, 14, 15, 16, 39, 44, 45, 46, 47, 61, 63, 65, 66, 70, 74, 77, 83, 85, 90, 91, 103, 121, 137, 141, 143, 152, 178, 195, 196, 209, 213, 219, 224, 227, 229], "3": [2, 3, 4, 7, 8, 9, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 32, 35, 38, 39, 45, 47, 48, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 91, 94, 95, 96, 97, 99, 101, 103, 104, 110, 113, 118, 119, 123, 125, 126, 130, 136, 137, 138, 143, 147, 149, 152, 154, 160, 174, 176, 177, 179, 185, 189, 190, 199, 201, 210, 212, 213, 216, 217, 218, 220, 221, 222, 223, 224, 226], "mix": [2, 36, 38, 40, 96, 128, 137, 197], "proport": [2, 38, 47, 202], "thei": [2, 4, 14, 15, 16, 35, 39, 41, 50, 63, 65, 66, 68, 69, 74, 90, 91, 111, 112, 116, 122, 134, 137, 138, 143, 147, 161, 171, 174, 175, 178, 186, 195, 197, 198, 199, 201, 224, 229], "estep": [2, 133], "probabilist": 2, "three": [2, 4, 14, 15, 16, 32, 61, 63, 68, 69, 74, 95, 99, 110, 111, 147, 161, 177, 178, 179, 197, 198, 210, 216, 229], "nbitem": [2, 5, 38], "ndarrai": [2, 18, 20, 21, 24, 28, 31, 35, 38, 39, 44, 45, 46, 47, 49, 51, 54, 61, 62, 65, 69, 73, 76, 77, 79, 80, 81, 82, 83, 85, 90, 91, 97, 99, 102, 103, 104, 110, 113, 114, 116, 118, 179, 186, 202, 203, 206, 207, 208, 209, 210, 211, 213, 215, 216], "2": [2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 21, 23, 24, 28, 29, 34, 35, 38, 39, 40, 41, 44, 45, 47, 48, 50, 51, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 83, 85, 95, 97, 99, 103, 110, 112, 113, 114, 115, 118, 119, 120, 125, 126, 130, 136, 145, 147, 149, 152, 157, 159, 160, 161, 172, 174, 176, 177, 178, 185, 186, 191, 195, 196, 202, 207, 208, 209, 210, 213, 216, 221, 222, 223, 224], "mstep": [2, 133], "component_likelihood": [2, 133], "gaussina": 2, "y": [2, 13, 17, 21, 23, 24, 32, 34, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 54, 61, 63, 64, 65, 66, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 99, 102, 104, 118, 120, 126, 133, 136, 137, 138, 147, 152, 177, 206, 210, 216, 217, 220, 222, 223, 227, 229], "pg": 2, "bia": [2, 7, 38, 47, 116], "gaussian_mix": [2, 38], "whole": [2, 23, 104, 118, 134, 136, 137, 148, 158, 178, 215], "integ": [2, 4, 8, 10, 15, 21, 24, 39, 50, 51, 54, 61, 65, 79, 80, 81, 82, 90, 91, 94, 97, 99, 104, 133, 136, 137, 147, 203, 210, 216, 229], "max": [2, 9, 53, 54, 67, 88, 90, 91, 93, 102, 120, 124, 137, 224], "lower": [2, 38, 39, 45, 47, 85, 102, 103, 138, 147, 207, 208, 209, 213], "nonzero": [2, 4, 14, 15, 16, 17, 38, 39], "init": [2, 5, 133, 190], "init_fdr": [2, 133], "copi": [2, 4, 13, 14, 15, 16, 21, 24, 39, 51, 65, 75, 79, 80, 81, 82, 85, 88, 90, 91, 93, 118, 126, 133, 137, 160, 161, 164, 168, 170, 171, 185, 190, 203, 226], "fdr": [2, 38, 95, 133, 202, 214], "heurist": [2, 85, 102, 207, 208], "same": [2, 4, 10, 11, 12, 14, 15, 16, 17, 23, 27, 32, 36, 39, 47, 51, 53, 54, 61, 63, 64, 65, 66, 74, 78, 79, 80, 81, 82, 84, 90, 91, 94, 96, 99, 110, 117, 126, 134, 136, 137, 138, 145, 147, 149, 152, 155, 161, 167, 177, 178, 191, 195, 198, 201, 202, 203, 204, 205, 210, 217, 223, 224, 227, 229], "hold": [2, 23, 39, 174, 178, 182, 200], "part": [2, 4, 9, 14, 15, 16, 38, 39, 50, 65, 74, 79, 80, 81, 82, 85, 104, 111, 116, 134, 136, 137, 186, 196, 197, 202, 203, 207, 217], "noth": [2, 4, 14, 15, 16, 38, 45, 47, 86, 87, 134, 137, 195, 229], "more": [2, 4, 10, 15, 17, 19, 20, 23, 39, 45, 47, 54, 63, 65, 68, 74, 78, 95, 96, 116, 117, 128, 134, 137, 138, 145, 147, 149, 152, 154, 155, 156, 159, 163, 170, 172, 175, 176, 177, 184, 188, 191, 195, 196, 197, 198, 214, 217, 218, 221, 222, 223, 224, 229, 230], "tail": [2, 9, 39, 45, 47, 50], "consider": [2, 14, 102, 197], "thought": [2, 14, 39, 64, 138, 139, 147, 149, 161, 187, 224, 229], "student": [2, 84, 118], "print": [2, 4, 20, 39, 47, 61, 64, 66, 68, 69, 94, 113, 118, 125, 126, 128, 134, 149, 152, 172, 178, 190, 224, 226, 227], "posteriori": 2, "ones": [2, 3, 40, 51, 53, 63, 87, 124, 197, 224], "visual": [2, 7, 39, 99, 100, 103, 111, 136, 161, 184, 188, 198, 210, 217, 220, 227], "shown": [2, 193], "empir": [2, 38, 192, 197, 214], "histogram": [2, 24, 29, 38, 85, 96, 118, 202, 207, 208, 209, 230], "nditem": 2, "matplotlib": [2, 7, 8, 11, 38, 60, 99, 101, 103, 104, 111, 128, 132, 173, 181, 182, 184, 195, 210, 217, 221, 225, 227], "5": [2, 5, 7, 19, 21, 23, 33, 35, 39, 40, 45, 47, 48, 50, 51, 53, 61, 62, 63, 65, 67, 68, 84, 85, 86, 87, 89, 92, 96, 97, 99, 102, 103, 110, 114, 118, 120, 126, 130, 136, 137, 138, 147, 174, 176, 177, 185, 186, 209, 210, 212, 213, 216, 217, 221, 224, 227, 229], "can": [2, 4, 5, 8, 10, 12, 13, 14, 15, 16, 20, 23, 27, 28, 32, 39, 40, 45, 47, 50, 53, 54, 61, 63, 64, 65, 66, 68, 69, 72, 73, 74, 75, 78, 79, 81, 82, 83, 86, 88, 90, 91, 93, 103, 111, 113, 114, 116, 117, 118, 119, 126, 131, 136, 137, 138, 139, 143, 144, 145, 147, 152, 153, 154, 158, 159, 160, 161, 167, 169, 170, 171, 174, 177, 178, 179, 180, 181, 184, 185, 186, 190, 191, 193, 195, 196, 197, 198, 201, 202, 213, 216, 217, 222, 223, 224, 226, 227, 228, 229], "long": [2, 9, 47, 65, 134, 136, 137, 143, 215, 229], "nb": [2, 224], "defin": [2, 3, 4, 10, 12, 14, 15, 16, 17, 23, 24, 26, 27, 34, 39, 41, 44, 47, 50, 61, 64, 66, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 84, 86, 88, 90, 91, 92, 93, 94, 96, 97, 103, 116, 118, 120, 126, 133, 134, 137, 139, 143, 145, 147, 152, 178, 180, 198, 201, 203, 211, 216, 222, 223, 224, 229], "scalar": [2, 18, 20, 27, 32, 45, 47, 50, 63, 65, 66, 85, 118, 136, 137, 229], "member": [2, 3, 16, 118], "non": [2, 4, 7, 9, 10, 14, 15, 16, 21, 38, 39, 45, 46, 47, 50, 54, 65, 74, 78, 81, 85, 90, 91, 93, 104, 134, 137, 147, 149, 160, 185, 195, 196, 198, 201, 202, 217, 224], "step": [2, 4, 5, 12, 20, 21, 23, 24, 41, 48, 65, 85, 110, 118, 122, 126, 137, 138, 147, 154, 162, 176, 184, 185, 191, 207, 223], "ata": 2, "membsership": 2, "nbitrem": 2, "10": [2, 3, 5, 7, 9, 21, 23, 34, 35, 36, 38, 39, 42, 43, 44, 46, 47, 49, 50, 54, 61, 63, 65, 89, 92, 96, 97, 110, 118, 120, 137, 138, 147, 182, 216, 217, 223, 224], "fals": [2, 3, 4, 5, 7, 11, 12, 15, 17, 19, 21, 23, 24, 27, 28, 29, 31, 38, 39, 40, 47, 48, 50, 61, 62, 63, 65, 66, 68, 69, 82, 84, 85, 90, 91, 95, 96, 97, 99, 103, 104, 110, 116, 118, 120, 121, 122, 126, 161, 177, 202, 207, 208, 209, 210, 211, 213, 216], "complet": [2, 16, 20, 39, 72, 90, 99, 116, 134, 137, 169, 174, 198, 201, 210, 227], "criterion": [2, 4, 6, 45, 47, 90], "bool": [2, 3, 4, 5, 7, 8, 12, 13, 15, 17, 19, 20, 23, 24, 28, 31, 38, 39, 40, 47, 54, 61, 62, 63, 65, 66, 68, 69, 74, 85, 89, 90, 91, 96, 110, 111, 116, 118, 121, 202], "dure": [2, 4, 39, 103, 134, 160, 161, 178, 193, 198, 213], "final": [2, 6, 12, 14, 39, 65, 72, 121, 161, 170, 178, 197, 201], "observ": [2, 36, 38, 40, 44, 47, 54, 224], "mm": [2, 21, 24, 61, 63, 74, 95, 137, 152, 229], "ep": [2, 13, 14, 16, 53, 193], "07": [2, 124], "ml": 2, "_old": 3, "computation": 3, "memori": [3, 23, 118, 137, 138, 147, 178, 197, 215], "effici": [3, 4, 14, 15, 16, 39, 145, 176], "2006": [3, 4, 13, 14, 16, 47, 50, 86, 94, 134, 136, 199], "2009": [3, 4, 17, 38, 53, 90, 96, 111, 112, 188, 202], "prec_typ": 3, "full": [3, 12, 17, 22, 24, 28, 35, 39, 44, 45, 47, 50, 53, 63, 74, 121, 155, 188, 195, 198, 199], "standard": [3, 5, 9, 23, 24, 38, 39, 47, 49, 53, 54, 63, 74, 96, 116, 118, 119, 122, 137, 138, 143, 145, 147, 172, 176, 178, 179, 184, 198, 202, 221, 223, 224, 226, 229], "string": [3, 17, 24, 39, 45, 47, 54, 65, 66, 72, 75, 76, 78, 79, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 111, 112, 116, 117, 118, 119, 128, 131, 137, 208, 209, 210, 211, 216, 229], "parameter": [3, 38], "either": [3, 13, 23, 27, 39, 45, 47, 61, 65, 68, 69, 74, 78, 84, 90, 91, 110, 113, 116, 137, 138, 149, 153, 169, 195, 198], "coavrianc": 3, "diag": [3, 24, 61, 63, 64, 65, 68, 137], "zero": [3, 17, 39, 47, 53, 61, 65, 66, 69, 72, 74, 85, 101, 118, 124, 136, 138, 147, 152, 176, 207, 208, 209, 217, 222], "ey": [3, 47, 53, 61, 65, 72, 88, 91, 118, 149, 222], "correct": [3, 4, 13, 14, 15, 16, 23, 38, 39, 47, 58, 61, 75, 84, 116, 138, 143, 147, 148, 150, 185, 190, 195], "hyper": [3, 39], "l": [3, 29, 39, 54, 61, 63, 65, 66, 67, 68, 69, 74, 137, 185, 190, 191, 222, 223, 226], "ident": [3, 21, 27, 39, 40, 47, 54, 61, 64, 65, 124, 125, 133, 138, 147, 152, 177, 224], "_mstep": 3, "lim": 3, "cartesian": 3, "list": [3, 4, 7, 14, 15, 16, 23, 28, 39, 51, 54, 61, 62, 65, 66, 68, 69, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 110, 111, 113, 116, 117, 118, 119, 136, 137, 149, 153, 161, 170, 173, 174, 176, 181, 190, 201, 208, 209, 214, 216, 229], "len": [3, 16, 21, 39, 45, 47, 51, 61, 63, 65, 85, 110, 111, 113, 116, 120, 121, 130, 141, 149], "xmin": [3, 99, 210], "xmax": [3, 96], "ymin": [3, 99, 210], "ymax": 3, "bin": [3, 24, 38, 136, 174, 190, 191, 193, 227], "direct": [3, 15, 16, 23, 39, 61, 65, 74, 99, 104, 137, 177, 198, 201, 210, 221, 223, 229], "make_grid": [3, 23, 133], "nb_node": 3, "best_fitting_gmm": [3, 133], "krang": [3, 7], "find": [3, 4, 14, 15, 16, 38, 39, 65, 74, 85, 99, 100, 102, 131, 133, 134, 137, 138, 147, 153, 158, 161, 163, 166, 170, 178, 184, 185, 186, 190, 195, 197, 202, 207, 208, 209, 217, 224, 226, 227, 229], "fit": [3, 38, 40, 41, 44, 45, 46, 47, 74, 83, 86, 95, 96, 104, 115, 116, 117, 118, 133, 138, 147, 186, 202, 219, 224], "rang": [3, 4, 5, 8, 10, 14, 15, 24, 39, 42, 47, 50, 54, 61, 63, 65, 67, 69, 101, 113, 126, 136, 137, 149, 197, 222, 223, 229], "chosen": [3, 21, 38, 88, 90, 91, 92, 96, 111, 114, 118, 119, 196, 202, 224], "within": [3, 4, 7, 12, 13, 14, 15, 16, 17, 23, 24, 38, 39, 69, 85, 88, 89, 90, 91, 95, 118, 156, 177, 181, 190, 198, 224], "mg": 3, "plot2d": [3, 133], "my_gmm": 3, "with_dot": 3, "log_scal": 3, "plane": [3, 67, 137], "npoint": [3, 7, 24, 29, 133], "whose": [3, 4, 14, 15, 16, 39, 47, 53, 61, 62, 65, 113, 124, 137, 195], "taken": [3, 17, 75, 94, 229], "account": [3, 17, 23, 38, 134, 161, 164, 202], "whether": [3, 4, 7, 13, 14, 15, 16, 17, 23, 28, 31, 39, 47, 50, 61, 65, 68, 74, 90, 91, 116, 130, 137, 152, 174, 178, 226], "dot": [3, 17, 21, 32, 39, 45, 47, 125, 137, 152, 193, 223, 224, 229, 230], "nixture_likelihood": 3, "graph": [4, 38, 84, 89, 90, 133, 160, 161, 169, 192, 201], "forest": [4, 90, 133, 192], "weightedgraph": [4, 14, 15, 133], "These": [4, 10, 28, 35, 50, 51, 65, 74, 84, 116, 117, 120, 129, 134, 137, 139, 145, 162, 166, 177, 186, 195, 198, 216, 224, 226, 227, 229], "some": [4, 14, 15, 16, 19, 23, 32, 38, 39, 44, 45, 46, 47, 51, 53, 54, 64, 65, 69, 72, 74, 85, 87, 88, 89, 90, 91, 93, 94, 110, 124, 126, 132, 134, 136, 138, 139, 140, 147, 149, 152, 159, 160, 163, 164, 167, 169, 170, 175, 177, 179, 181, 186, 190, 195, 197, 198, 199, 201, 214, 216, 217, 223, 224, 226, 227, 229], "hierrach": 4, "agglom": 4, "altern": [4, 11, 35, 39, 45, 47, 50, 139, 152, 184, 190, 224, 229], "propos": [4, 85, 94, 96, 137, 139, 160, 186, 207, 208, 221], "distanc": [4, 14, 15, 16, 51, 52, 84, 96, 99, 210], "link": [4, 13, 14, 15, 16, 41, 104, 118, 133, 134, 137, 153, 161, 167, 169, 173, 175, 185, 186, 190, 192, 193, 195, 196, 198, 226, 230], "similar": [4, 23, 24, 39, 53, 65, 66, 89, 94, 116, 133, 134, 152, 154, 156, 159, 163, 175, 224, 226], "ward": [4, 14, 92, 133], "constraint": [4, 74, 84], "without": [4, 15, 39, 41, 72, 73, 134, 137, 147, 161, 186, 191, 196, 198, 230], "In": [4, 10, 17, 21, 23, 28, 39, 45, 47, 49, 53, 54, 63, 68, 74, 75, 84, 85, 112, 116, 120, 131, 134, 137, 138, 143, 147, 149, 152, 159, 164, 168, 174, 176, 177, 178, 185, 186, 191, 195, 197, 198, 199, 201, 207, 208, 217, 223, 224, 226, 229], "latest": [4, 168, 173, 178, 180, 185, 225, 226], "version": [4, 9, 14, 39, 51, 53, 61, 63, 65, 73, 74, 99, 103, 114, 126, 137, 140, 152, 161, 172, 174, 177, 180, 181, 182, 184, 185, 190, 191, 195, 196, 199, 213, 223, 227], "access": [4, 70, 79, 81, 82, 90, 91, 134, 138, 147, 153, 155, 163, 169, 170, 197, 221, 231], "hierarchi": [4, 14, 90, 134], "facilit": 4, "etc": [4, 14, 15, 23, 35, 47, 51, 61, 68, 74, 88, 126, 134, 138, 147, 156, 177, 178, 186, 190], "For": [4, 10, 13, 19, 23, 24, 34, 35, 39, 44, 45, 46, 47, 50, 53, 61, 62, 65, 66, 74, 75, 77, 79, 80, 81, 82, 83, 99, 113, 116, 134, 136, 137, 143, 145, 147, 152, 153, 155, 158, 159, 160, 161, 166, 169, 172, 174, 175, 177, 178, 181, 182, 184, 190, 193, 197, 198, 201, 210, 217, 223, 224, 226, 229], "back": [4, 116, 117, 147, 149, 161, 170, 174, 190, 191, 198, 223, 226], "compat": [4, 39, 50, 73, 88, 120, 133, 134, 156, 195, 196, 198], "_segment": 4, "been": [4, 12, 14, 15, 19, 39, 44, 45, 47, 54, 85, 86, 87, 88, 90, 91, 94, 116, 126, 127, 137, 138, 145, 147, 152, 161, 169, 185, 195, 198, 201, 207, 208, 209, 221], "append": [4, 39, 65, 88, 89, 90, 91, 149, 185, 190], "api": [4, 12, 23, 30, 32, 47, 61, 62, 63, 66, 67, 68, 72, 78, 88, 90, 91, 113, 137, 139, 140, 145, 149, 160, 180, 185, 186, 192, 193, 222, 223, 229], "except": [4, 23, 27, 35, 39, 53, 65, 66, 68, 74, 78, 110, 116, 129, 131, 137, 149, 160, 193, 218, 223], "qmax": 4, "now": [4, 39, 44, 45, 47, 61, 63, 65, 68, 74, 84, 137, 138, 147, 152, 160, 161, 162, 163, 169, 170, 171, 174, 177, 184, 191, 195, 197, 217, 223, 226, 227], "want": [4, 39, 63, 69, 90, 91, 118, 129, 131, 136, 137, 138, 143, 147, 149, 152, 156, 159, 160, 162, 164, 170, 171, 177, 178, 184, 185, 190, 191, 195, 197, 199, 223, 224, 226, 227, 229], "pamela": 4, "guevara": 4, "parent": [4, 14, 15, 90, 137, 226], "height": [4, 14, 84, 99, 104, 126, 210, 224], "tree": [4, 14, 15, 16, 39, 129, 153, 162, 177, 227], "node": [4, 13, 14, 15, 16, 39, 88, 90, 91, 94], "children": [4, 15, 90, 137, 201], "hierarch": [4, 15, 17, 39, 89, 90, 94, 145], "view": [4, 15, 23, 39, 75, 99, 103, 104, 137, 173, 210, 212, 213, 217, 229], "leav": [4, 8, 15, 23, 39, 62, 90, 155, 170, 185, 195, 229], "other": [4, 10, 15, 21, 23, 26, 30, 39, 45, 47, 48, 50, 53, 65, 66, 74, 75, 79, 80, 81, 82, 84, 90, 96, 103, 110, 116, 117, 126, 129, 134, 136, 137, 139, 143, 145, 152, 154, 156, 159, 164, 167, 169, 175, 176, 177, 178, 179, 180, 185, 188, 191, 193, 194, 195, 197, 198, 201, 206, 213, 225, 229, 230], "root": [4, 15, 47, 50, 133, 136, 153, 154, 176, 182], "edg": [4, 13, 14, 15, 16, 104], "child": [4, 15], "addition": 4, "call": [4, 10, 16, 19, 20, 38, 39, 42, 45, 47, 50, 63, 65, 66, 72, 74, 80, 90, 91, 110, 112, 116, 117, 118, 127, 134, 136, 137, 138, 147, 152, 154, 159, 160, 161, 178, 185, 186, 190, 195, 199, 221, 223, 226, 229], "especi": [4, 92, 195, 230], "dendrogram": 4, "its": [4, 14, 15, 16, 24, 39, 43, 44, 47, 48, 61, 63, 65, 78, 84, 90, 91, 99, 116, 119, 134, 137, 154, 195, 197, 198, 201, 202, 210, 221, 223, 229], "own": [4, 15, 39, 90, 91, 136, 161, 164, 166, 167, 168, 169, 170, 171, 195, 197, 223, 227], "adjac": [4, 14, 15, 16, 88, 133], "spars": [4, 5, 13, 14, 15, 16, 50, 88, 230], "coo": [4, 14, 15, 16, 88], "adj": [4, 14, 15, 16], "scipi": [4, 13, 14, 15, 16, 18, 20, 27, 32, 42, 51, 53, 116, 126, 153, 176, 181, 182, 184, 186, 192, 195, 196, 225, 229], "encod": [4, 5, 14, 15, 16, 74, 88, 96, 137], "all_dist": [4, 15, 133], "seed": [4, 14, 15, 16, 90, 97, 216], "nbseed": [4, 14, 15, 16], "valuesin": [4, 15], "vertic": [4, 13, 14, 15, 16, 51, 84, 88, 104, 147, 201], "tehe": [4, 15], "dg": [4, 14, 15, 16], "nseed": [4, 14, 15, 16], "convent": [4, 15, 23, 38, 39, 74, 99, 103, 136, 137, 138, 147, 155, 210, 211], "infinit": [4, 5, 15, 39, 137, 224], "inf": [4, 14, 15, 38, 41, 50, 85, 90, 120, 126], "anti_symmeter": [4, 14, 15, 16, 133], "anti": [4, 14, 15, 16], "symmeter": [4, 14, 15, 16, 133], "produc": [4, 14, 15, 16, 28, 39, 47, 87, 96, 97, 117, 126, 177, 196, 223, 229], "would": [4, 10, 14, 15, 16, 17, 19, 23, 39, 90, 110, 112, 119, 131, 137, 138, 139, 143, 144, 145, 147, 149, 152, 158, 161, 178, 180, 186, 191, 195, 196, 201, 224, 227, 229], "antisymmetr": [4, 14, 15, 16], "cc": [4, 14, 15, 16, 24, 85, 133, 207, 208, 209], "compt": [4, 14, 15, 16], "connect": [4, 14, 15, 16, 84, 85, 88, 90, 96, 102, 136, 171, 207, 208, 209], "inde": [4, 15], "loop": [4, 5, 15, 23, 176, 185], "b": [4, 14, 15, 16, 32, 39, 47, 50, 65, 69, 96, 101, 104, 114, 116, 124, 126, 137, 138, 161, 177, 185, 220, 224, 229], "iff": [4, 15], "otherwis": [4, 5, 8, 15, 17, 23, 27, 38, 39, 47, 53, 63, 65, 68, 72, 74, 90, 92, 96, 99, 112, 121, 126, 178, 181, 186, 190, 218], "slow": [4, 14, 15, 16, 39, 128, 131, 134, 186, 197], "might": [4, 15, 39, 74, 75, 79, 81, 82, 85, 88, 137, 138, 147, 152, 156, 160, 164, 178, 184, 190, 196, 201, 207, 223, 224, 226, 227, 229], "rewritten": [4, 15, 39], "cython": [4, 15, 154, 157, 176, 225, 227], "check_compatible_height": [4, 133], "cliqu": [4, 14, 15, 16, 133], "extract": [4, 13, 14, 15, 16, 24, 39, 84, 85, 86, 87, 88, 90, 91, 113, 145, 192, 209, 214, 226], "replic": [4, 14, 15, 16, 145], "dynam": [4, 14, 15, 16, 198], "equat": [4, 14, 15, 16, 47, 177], "belong": [4, 14, 15, 16, 38, 39, 90, 91, 197, 202], "compact_neighb": [4, 14, 15, 16, 133], "compact": [4, 5, 14, 15, 16, 169], "represent": [4, 14, 15, 16, 32, 39, 65, 78, 134, 137, 161, 169, 229], "idx": [4, 14, 15, 16, 88], "neighbor": [4, 13, 14, 15, 16, 88, 91, 92], "neighb": [4, 14, 15, 16], "concaten": [4, 14, 15, 16, 65], "compute_children": [4, 15, 133], "store": [4, 15, 23, 38, 44, 45, 47, 72, 74, 79, 81, 82, 88, 92, 116, 117, 134, 137, 145, 152, 201, 202, 215], "cut_redund": [4, 14, 15, 16, 133], "redund": [4, 14, 15, 16, 96, 229], "remov": [4, 5, 9, 14, 15, 16, 39, 54, 61, 74, 85, 90, 91, 124, 131, 137, 161, 178, 207], "ecah": [4, 14, 15, 16], "ab": [4, 14, 15, 16, 39, 48], "present": [4, 14, 15, 16, 39, 65, 94, 118, 121, 134, 174, 196, 197, 224], "onc": [4, 14, 15, 16, 35, 39, 91, 116, 137, 163, 174, 177, 195], "correspondng": [4, 14, 15, 16], "ad": [4, 14, 15, 16, 28, 39, 63, 74, 97, 99, 110, 137, 144, 156, 160, 161, 170, 186, 210, 216, 223, 224, 229], "define_graph_attribut": [4, 15, 133], "rdegre": [4, 14, 15, 16], "right": [4, 13, 14, 15, 16, 21, 23, 26, 38, 39, 48, 99, 104, 126, 137, 143, 147, 152, 160, 161, 169, 176, 177, 190, 195, 202, 210, 224, 226, 227, 229], "ldegre": [4, 14, 15, 16], "left": [4, 13, 14, 15, 16, 38, 39, 48, 99, 104, 137, 138, 143, 147, 152, 161, 177, 178, 190, 202, 210, 224, 229], "depth_from_leav": [4, 15, 133], "index": [4, 5, 8, 9, 10, 14, 15, 16, 40, 45, 47, 54, 62, 65, 66, 69, 79, 81, 84, 88, 90, 91, 94, 96, 112, 116, 118, 133, 134, 139, 141, 172, 178, 180, 192, 196, 198, 201, 225], "depth": [4, 14, 15, 95, 167], "dijkstra": [4, 14, 15, 16, 133], "geodes": [4, 14, 15, 16, 92], "start": [4, 10, 14, 15, 16, 20, 21, 23, 35, 61, 65, 67, 70, 110, 111, 113, 116, 119, 126, 136, 137, 138, 141, 143, 147, 158, 161, 165, 166, 174, 178, 185, 191, 195, 197, 199, 224, 228], "ant": [4, 14, 15, 16], "vertex": [4, 14, 15, 16, 84], "nearest": [4, 6, 13, 14, 15, 16, 18, 27, 32, 79, 80, 81, 82, 92, 203, 205, 206], "It": [4, 14, 15, 16, 21, 23, 24, 27, 38, 39, 47, 51, 53, 61, 63, 65, 76, 78, 87, 90, 91, 93, 94, 96, 112, 113, 116, 117, 118, 119, 120, 134, 137, 138, 147, 154, 155, 158, 160, 161, 166, 169, 170, 172, 176, 177, 178, 179, 182, 185, 186, 195, 198, 199, 201, 202, 223, 224, 226, 227, 229, 230], "mandatori": [4, 14, 15, 16, 17, 134], "floyd": [4, 14, 15, 16, 133], "everi": [4, 14, 15, 16, 26, 35, 39, 72, 90, 91, 137, 145, 174, 176, 178, 198], "ani": [4, 8, 14, 15, 16, 22, 23, 30, 38, 39, 45, 50, 51, 63, 65, 68, 69, 72, 74, 75, 79, 81, 82, 88, 90, 91, 99, 126, 129, 134, 137, 145, 147, 153, 154, 155, 158, 160, 161, 162, 169, 170, 174, 177, 178, 179, 191, 195, 196, 197, 198, 201, 202, 210, 226, 229], "proce": [4, 14, 15, 16], "repeat": [4, 14, 15, 16, 23, 119, 137, 152, 163, 176], "complex": [4, 14, 15, 16, 17, 39, 51, 66, 133, 137, 197, 221, 229], "from_3d_grid": [4, 14, 15, 16, 133], "xyz": [4, 14, 15, 16, 21, 23, 26, 27, 39, 61, 63, 64, 65, 66, 68, 74, 82, 84, 102, 137, 139, 152, 229], "18": [4, 14, 15, 16, 17, 39, 63, 84, 88, 91, 92, 95, 96, 216, 224], "topolog": [4, 14, 15, 16, 65, 95, 229], "neighbour": [4, 13, 14, 15, 16, 84, 95], "coordin": [4, 14, 15, 16, 23, 24, 26, 27, 32, 54, 61, 63, 64, 65, 66, 67, 68, 76, 77, 78, 79, 80, 81, 82, 84, 88, 90, 91, 94, 95, 96, 99, 102, 103, 104, 133, 136, 139, 149, 150, 201, 203, 206, 210, 211, 213, 217, 225, 231], "scheme": [4, 14, 15, 16, 17, 23, 147], "consid": [4, 5, 7, 13, 14, 15, 16, 23, 27, 39, 44, 47, 52, 53, 79, 80, 81, 82, 84, 85, 88, 91, 93, 94, 95, 110, 111, 119, 137, 138, 143, 147, 156, 164, 169, 170, 172, 177, 178, 184, 190, 195, 197, 198, 203, 207, 208, 209, 224, 229], "6": [4, 14, 15, 16, 19, 21, 23, 33, 35, 39, 47, 50, 51, 61, 63, 64, 65, 67, 84, 88, 91, 92, 96, 97, 110, 114, 120, 126, 133, 135, 137, 139, 147, 156, 172, 173, 174, 177, 180, 183, 187, 189, 192, 194, 216, 221, 224, 225], "26": [4, 14, 15, 16, 34, 39, 47, 50, 65, 84, 88, 91, 92], "get_": [4, 14, 15, 16, 133], "To": [4, 14, 15, 16, 21, 23, 24, 39, 45, 47, 90, 92, 126, 131, 136, 137, 138, 143, 147, 152, 153, 154, 155, 158, 160, 161, 172, 177, 178, 191, 197, 227], "get": [4, 9, 14, 15, 16, 17, 22, 23, 35, 38, 39, 45, 46, 47, 63, 64, 65, 67, 68, 70, 73, 74, 82, 90, 91, 93, 113, 116, 117, 126, 127, 136, 137, 138, 139, 144, 145, 147, 152, 154, 155, 156, 160, 161, 165, 166, 167, 168, 170, 171, 173, 174, 178, 180, 181, 182, 183, 186, 190, 193, 195, 222, 223, 227, 229], "get_v": [4, 14, 15, 16, 133], "get_children": [4, 15, 133], "get_descend": [4, 15, 133], "exclude_self": [4, 15], "desc": [4, 15], "descend": [4, 13, 15, 23, 28, 35, 95], "get_edg": [4, 14, 15, 16, 133], "get_height": [4, 133], "get_vertic": [4, 14, 15, 16, 133], "id": [4, 14, 15, 16, 21, 65, 84, 88, 90, 91, 92, 112, 157], "get_weight": [4, 14, 15, 16, 133], "is_connect": [4, 14, 15, 16, 133], "state": [4, 14, 15, 16, 74, 161, 224], "isleaf": [4, 15, 133], "isroot": [4, 15, 133], "kruskal": [4, 14, 15, 16, 133], "minimum": [4, 7, 14, 15, 16, 67, 84, 85, 118, 145, 174, 227], "span": [4, 14, 15, 16, 39, 53, 54, 124], "mst": [4, 14, 15, 16, 47, 133], "sever": [4, 14, 15, 16, 23, 85, 134, 152, 166, 170, 176, 185, 196, 197, 198, 209, 230], "leaves_of_a_subtre": [4, 15, 133], "custom": [4, 8, 14, 15, 47, 51, 191, 196, 198, 226], "subtre": [4, 15], "behavior": [4, 15, 35, 39, 126, 144], "specif": [4, 9, 15, 17, 34, 38, 45, 47, 49, 51, 54, 63, 74, 75, 90, 93, 110, 111, 119, 120, 136, 137, 158, 163, 174, 178, 186, 190, 195, 201, 202, 224, 229], "greater": [4, 15, 39, 53, 63, 88, 90, 91, 92, 96, 99, 172], "when": [4, 5, 12, 14, 15, 16, 21, 23, 38, 39, 45, 47, 49, 51, 53, 61, 62, 63, 64, 65, 74, 75, 78, 79, 80, 81, 82, 85, 88, 90, 92, 96, 99, 103, 116, 126, 129, 134, 136, 137, 138, 143, 147, 149, 153, 154, 155, 156, 160, 161, 170, 172, 176, 177, 178, 185, 186, 190, 191, 193, 195, 198, 201, 202, 203, 205, 206, 210, 213, 215, 223, 224, 226, 229, 230], "than": [4, 15, 20, 39, 47, 53, 54, 63, 64, 65, 68, 74, 79, 80, 81, 82, 85, 88, 90, 91, 92, 93, 95, 96, 102, 110, 117, 120, 124, 126, 134, 137, 138, 145, 147, 149, 152, 155, 169, 170, 171, 175, 195, 197, 198, 201, 205, 207, 215, 224, 227, 229], "subbranch": [4, 15], "subset": [4, 13, 15, 24, 45, 90, 91, 96, 145], "left_incid": [4, 14, 15, 16, 133], "incid": [4, 14, 15, 16], "j": [4, 5, 6, 14, 15, 16, 29, 34, 38, 47, 50, 61, 63, 65, 66, 68, 74, 84, 114, 118, 137, 147, 152, 178, 185, 197, 220, 222, 223, 224, 229], "list_of_neighbor": [4, 14, 15, 16, 133], "list_of_subtre": [4, 133], "trivial": [4, 14, 15, 16, 54, 71], "caveat": [4, 88, 89, 90], "sort": [4, 39, 48, 68, 84, 95, 174], "wai": [4, 14, 15, 16, 23, 32, 39, 45, 47, 48, 61, 68, 74, 79, 81, 82, 90, 91, 103, 116, 127, 131, 137, 138, 143, 145, 147, 149, 152, 155, 156, 160, 161, 166, 167, 169, 170, 172, 177, 178, 183, 186, 190, 191, 193, 197, 198, 201, 213, 217, 229, 230], "liste": 4, "themselv": [4, 39, 50, 69, 224], "main_cc": [4, 14, 15, 16, 133], "main": [4, 5, 14, 15, 16, 53, 55, 56, 57, 58, 59, 85, 86, 87, 94, 96, 104, 112, 118, 119, 131, 133, 164, 169, 170, 171, 172, 174, 178, 181, 197, 208, 209, 227], "sizeof": [4, 14, 15, 16], "merge_simple_branch": [4, 15, 133], "subforest": [4, 15, 133], "chain": [4, 15, 22, 152], "branch": [4, 15, 39, 153, 160, 164, 167, 169, 170, 171, 174, 178, 186], "collaps": [4, 15, 161], "sf": [4, 15, 39], "go": [4, 14, 15, 16, 47, 61, 74, 99, 101, 103, 116, 129, 134, 136, 137, 147, 160, 161, 163, 169, 170, 171, 174, 178, 184, 185, 191, 195, 210, 213, 226, 229], "out": [4, 14, 15, 16, 17, 20, 39, 45, 63, 65, 74, 84, 113, 114, 116, 117, 137, 138, 147, 149, 154, 170, 174, 178, 179, 180, 184, 185, 186, 189, 193, 195, 197, 198, 226, 229], "design": [4, 14, 15, 16, 17, 36, 39, 40, 44, 45, 46, 47, 54, 95, 97, 111, 116, 118, 120, 121, 124, 133, 134, 137, 139, 140, 144, 156, 177, 180, 187, 188, 192, 195, 197, 198, 216, 219, 225, 229, 231], "d": [4, 12, 14, 15, 16, 19, 28, 38, 39, 45, 47, 50, 51, 62, 65, 69, 74, 81, 84, 88, 90, 91, 96, 114, 126, 128, 134, 160, 161, 174, 177, 196, 199, 224, 229, 230], "l2": [4, 14, 15, 16], "sum_": [4, 14, 15, 16, 224], "partit": [4, 133], "threshold": [4, 9, 14, 21, 38, 53, 84, 85, 86, 87, 90, 92, 94, 95, 96, 99, 102, 103, 104, 118, 123, 133, 156, 202, 207, 208, 209, 210, 213, 214, 217], "cut": [4, 38, 39, 99, 102, 103, 104, 111, 121, 174, 202, 210, 213, 217], "rank": [4, 39, 44, 45, 47, 53, 54, 124, 133], "dendogram": 4, "axi": [4, 8, 9, 10, 14, 15, 16, 21, 23, 24, 28, 39, 48, 51, 54, 61, 62, 64, 65, 66, 68, 69, 81, 82, 83, 84, 90, 91, 99, 102, 103, 104, 111, 113, 116, 126, 133, 137, 141, 143, 147, 149, 152, 160, 179, 201, 210, 211], "plot_height": [4, 133], "propagate_upward": [4, 15, 133], "propag": [4, 15, 17], "whenev": [4, 15, 229], "coher": [4, 15, 74], "properti": [4, 15, 16, 18, 21, 22, 24, 26, 30, 39, 41, 50, 61, 64, 68, 71, 90, 91, 126, 134, 137, 198, 201, 223, 229], "unchang": [4, 15, 63, 229], "propagate_upward_and": [4, 15, 133], "prop": [4, 15], "binari": [4, 15, 17, 51, 69, 88, 90, 91, 95, 96, 118, 138, 147, 184, 195, 198, 227], "logical_and": [4, 15], "remove_edg": [4, 14, 15, 16, 133], "valid": [4, 5, 7, 13, 14, 15, 16, 30, 41, 63, 66, 67, 70, 72, 74, 86, 90, 94, 95, 96, 118, 133, 141], "remove_trivial_edg": [4, 14, 15, 16, 133], "vv": [4, 14, 15, 16], "accordingli": [4, 14, 15, 16, 74, 90, 110], "reorder_from_leaves_to_root": [4, 15, 133], "reorder": [4, 15, 61, 65, 74, 137, 229], "come": [4, 15, 47, 53, 74, 94, 120, 132, 152, 159, 161, 167, 170, 190, 219, 229, 230], "last": [4, 9, 10, 15, 21, 23, 28, 35, 39, 51, 63, 65, 66, 68, 72, 136, 137, 138, 147, 161, 174, 195, 221, 229], "right_incid": [4, 14, 15, 16, 133], "set_edg": [4, 13, 14, 15, 16, 133], "precondit": [4, 14, 15, 16, 65], "size": [4, 6, 10, 12, 13, 14, 15, 16, 20, 21, 23, 24, 28, 38, 54, 64, 65, 67, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 104, 134, 137, 152, 202, 208, 209, 222], "set_euclidian": [4, 14, 15, 16, 133], "embed": [4, 14, 15, 16, 63, 79, 80, 81, 82, 88, 91, 94, 159, 201, 204, 205], "edim": [4, 14, 15, 16], "set_gaussian": [4, 14, 15, 16, 133], "sigma": [4, 14, 15, 16, 19, 24, 26, 34, 38, 39, 44, 45, 47, 86, 87, 94, 96, 122, 123, 124, 202], "sqrt": [4, 14, 15, 16, 38, 39, 41, 44, 47, 202], "set_height": [4, 133], "set_weight": [4, 13, 14, 15, 16, 133], "emb": [4, 14, 15, 16, 173, 201, 229], "svd": [4, 14, 15, 16, 53, 54], "reduc": [4, 5, 14, 15, 16, 54, 88, 92, 111, 133, 149, 161, 178, 215], "displai": [4, 14, 15, 16, 38, 39, 99, 103, 104, 152, 177, 198, 210, 212], "circl": [4, 14, 15, 16], "split": [4, 39, 70, 77, 96, 133], "suppli": [4, 5, 39, 47, 49, 78, 111], "select": [4, 8, 15, 17, 39, 65, 90, 92, 116, 134, 145, 161, 191], "delet": [4, 15, 70, 164, 178], "becom": [4, 14, 15, 16, 39, 62, 68, 91, 134, 137, 185, 195, 198], "subgraph": [4, 13, 14, 15, 16, 84, 133], "retain": [4, 14, 15, 16, 39, 54, 89, 114, 195], "g": [4, 13, 14, 15, 16, 23, 24, 26, 39, 42, 47, 54, 61, 64, 72, 84, 88, 101, 104, 111, 114, 120, 126, 131, 134, 136, 137, 144, 147, 152, 156, 161, 167, 174, 181, 190, 197, 221, 224, 229], "desir": [4, 6, 14, 15, 16, 24, 27, 38, 39, 88, 90, 91, 92, 96, 111, 224], "renumb": [4, 13, 14, 15, 16], "modifi": [4, 14, 15, 16, 24, 72, 79, 80, 81, 82, 85, 90, 91, 116, 134, 140, 153, 161, 191, 195, 197, 198, 224], "to_coo_matrix": [4, 14, 15, 16, 133], "sp": [4, 14, 15, 16, 68], "tree_depth": [4, 15, 133], "voronoi_diagram": [4, 14, 15, 16, 133], "voronoi": [4, 6, 14, 15, 16, 133], "vd": [4, 14, 15, 16], "nsampl": [4, 14, 15, 16], "optim": [4, 14, 15, 16, 22, 23, 24, 89, 133, 143, 153, 156, 173, 180, 184, 192, 223, 227, 230], "voronoi_label": [4, 14, 15, 16, 133], "cell": [4, 14, 15, 16], "built": [4, 14, 15, 16, 66, 172, 174, 177, 197, 221, 229], "average_link_graph": [4, 133], "t": [4, 8, 9, 10, 17, 21, 23, 24, 26, 30, 31, 36, 39, 40, 45, 47, 49, 50, 54, 61, 62, 63, 65, 68, 70, 74, 83, 84, 85, 92, 95, 96, 110, 113, 114, 116, 117, 118, 120, 125, 126, 133, 136, 137, 138, 143, 145, 147, 152, 155, 161, 162, 163, 170, 171, 177, 178, 185, 190, 191, 195, 197, 198, 202, 207, 208, 216, 223, 224, 226, 227, 229], "weightforest": 4, "average_link_graph_seg": [4, 133], "stop": [4, 39, 161], "diagnost": [4, 133, 192], "u": [4, 21, 34, 39, 61, 65, 74, 94, 124, 125, 136, 144, 145, 147, 152, 155, 157, 161, 167, 169, 170, 172, 177, 186, 190, 196, 197, 199, 200, 219, 221, 226, 227, 229], "cost": [4, 23, 24, 197], "merg": [4, 87, 90, 153, 156, 164, 167, 169, 171, 199], "fusion": [4, 133, 221, 227], "yield": [4, 5, 14, 39, 40, 69, 84, 87, 88, 89, 90, 91, 94, 111, 112, 113, 119, 224, 229], "rel": [4, 6, 20, 35, 53, 89, 92, 97, 111, 116, 119, 147, 160, 161, 177, 179, 190, 196, 197, 198, 216, 230], "average_link_slow": 4, "deprec": [4, 11, 23, 39, 61, 129], "featur": [4, 13, 14, 39, 88, 89, 90, 91, 92, 93, 94, 103, 118, 134, 156, 160, 164, 169, 170, 184, 187, 195, 197, 198, 213, 230], "topologi": [4, 14, 88, 92, 133], "dim_featur": 4, "vectori": 4, "relat": [4, 5, 7, 14, 40, 43, 63, 65, 74, 103, 111, 112, 117, 118, 120, 134, 145, 152, 156, 161, 169, 186, 195, 198, 211], "longer": [4, 63, 169, 185], "case": [4, 10, 21, 23, 27, 29, 32, 39, 47, 50, 53, 54, 63, 64, 65, 68, 69, 70, 74, 75, 79, 80, 81, 82, 85, 111, 113, 116, 118, 119, 126, 134, 136, 137, 138, 139, 143, 145, 147, 159, 161, 169, 180, 196, 197, 201, 203, 207, 208, 223, 224, 226, 229], "cleanli": 4, "ward_field_seg": [4, 133], "f": [4, 14, 20, 24, 34, 39, 40, 45, 46, 47, 48, 50, 53, 65, 69, 70, 78, 83, 90, 91, 110, 116, 117, 118, 120, 123, 124, 126, 128, 130, 137, 138, 147, 161, 174, 178, 185, 190, 220, 224, 229], "crterion": 4, "ward_quick_seg": [4, 133], "ward_quick": [4, 133], "quicker": [4, 166], "euclidean": 4, "space": [4, 17, 18, 23, 24, 27, 32, 35, 39, 44, 47, 50, 61, 63, 65, 66, 67, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 96, 99, 102, 103, 104, 110, 114, 119, 133, 136, 137, 143, 145, 147, 152, 179, 192, 198, 201, 203, 204, 205, 206, 210, 213, 217, 223, 224, 229], "lab": [4, 38, 133, 134, 192, 197, 198, 214, 215, 216], "stop1": 4, "ward_seg": [4, 133], "nbcc": 4, "greter": 4, "bgmm": [5, 133, 192], "unspecifi": [5, 39], "simpli": [5, 14, 17, 36, 65, 136, 137, 149, 177, 191, 226], "unknown": [5, 17, 50, 67, 74], "creation": [5, 111, 149], "adapt": [5, 124], "cross_validated_upd": [5, 133], "plike": 5, "kfold": 5, "intern": [5, 23, 89, 90, 91, 138, 147, 195, 201], "corss_valid": 5, "fold": 5, "cross": [5, 7, 39, 87, 94, 99, 104, 193, 198, 210], "od": [5, 230], "likelihood_under_the_prior": [5, 133], "assign": [5, 6, 24, 39], "empti": [5, 23, 39, 61, 63, 110, 138], "chang": [5, 10, 14, 24, 30, 39, 44, 45, 46, 47, 50, 51, 63, 65, 69, 74, 79, 80, 81, 82, 91, 110, 118, 120, 126, 131, 134, 137, 138, 143, 147, 155, 156, 160, 162, 164, 170, 171, 185, 191, 198, 199, 201, 203, 217, 224, 229], "place": [5, 14, 24, 30, 39, 51, 63, 90, 110, 143, 153, 172, 177, 186, 191, 193, 195, 227], "remap": [5, 152], "sampling_point": 5, "nbpoint": 5, "control": [5, 89, 95, 131, 144, 145, 153, 161, 181, 182, 184, 227], "less": [5, 39, 47, 53, 54, 74, 102, 124, 147, 176, 196, 197, 198, 216, 229], "accur": [5, 39, 86], "total": [5, 47, 83, 84, 85, 96, 207, 208, 209, 224], "behaviour": [5, 38, 65, 118], "arbitrari": [5, 18, 23, 81, 88, 95, 116, 119, 126, 145, 152, 171, 177, 196, 224], "set_constant_dens": [5, 133], "prior_den": 5, "null": [5, 7, 38, 83, 86, 94, 95, 96, 118, 192, 214], "domain": [5, 8, 10, 39, 54, 61, 64, 65, 86, 88, 89, 90, 91, 92, 93, 94, 96, 126, 137, 145, 155, 222, 223, 229], "simple_upd": [5, 133], "resmapl": 5, "particular": [5, 23, 31, 39, 45, 47, 51, 66, 74, 75, 88, 120, 137, 138, 145, 147, 149, 161, 179, 197, 198, 199, 224, 229, 230], "addit": [5, 10, 39, 65, 88, 99, 103, 111, 118, 152, 172, 183, 186, 195, 210, 211, 217, 229], "togeth": [5, 39, 50, 112, 133, 152, 219, 230], "null_class_proba": 5, "reshuffl": 5, "co_clust": 5, "co": [5, 21, 39, 86, 87, 126, 160, 196, 230], "pproba": 5, "coclust": 5, "sparse_matrix": 5, "frequenc": [5, 74, 110, 111, 126], "pair": [5, 39, 41, 52, 65, 68, 72, 84, 101, 110, 137, 147, 178, 223, 224, 229], "here": [5, 8, 32, 39, 45, 47, 54, 112, 116, 117, 118, 119, 131, 134, 136, 137, 138, 147, 149, 152, 155, 157, 160, 161, 163, 165, 166, 167, 170, 171, 175, 179, 184, 185, 186, 190, 191, 195, 196, 201, 223, 224, 227, 229], "null_den": 5, "over": [5, 9, 10, 12, 14, 39, 47, 50, 54, 61, 62, 69, 88, 90, 91, 94, 96, 110, 113, 114, 116, 120, 121, 124, 126, 137, 141, 150, 174, 185, 198, 217, 221, 224, 230], "supposedli": [5, 88, 91], "sweep": 5, "h1": 5, "hypothesi": [5, 83, 96, 118, 202], "co_label": [5, 133], "kmax": 5, "kmin": 5, "colabel": 5, "coo_matrix": [5, 13, 14, 16, 88], "illustr": [5, 134], "exampl": [5, 9, 10, 19, 21, 23, 32, 35, 39, 45, 47, 48, 50, 53, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74, 77, 110, 113, 116, 126, 128, 130, 133, 134, 136, 137, 138, 143, 145, 147, 148, 149, 152, 159, 160, 161, 169, 170, 172, 174, 177, 178, 185, 186, 190, 191, 193, 196, 197, 198, 201, 214, 222, 223, 226, 229, 231], "kmean": [6, 133], "nbcluster": [6, 14], "maxit": [6, 7, 14, 20, 23], "300": [6, 99, 103, 210, 213], "inadequ": 6, "befor": [6, 19, 22, 61, 79, 81, 82, 111, 112, 119, 120, 131, 161, 178, 198, 229], "center": [6, 7, 26, 40, 51, 94, 102, 133, 196, 199, 217, 221], "centroid": 6, "inertia": [6, 14], "von": 7, "mise": 7, "fisher": [7, 45, 84, 118, 124], "equival": [7, 12, 16, 39, 50, 54, 65, 73, 120, 133, 137, 138, 145, 147, 229], "sphere": [7, 50, 91], "2010": [7, 86, 88, 96, 97], "null_class": 7, "inclus": 7, "density_per_compon": [7, 133], "per": [7, 10, 12, 36, 51, 64, 87, 88, 93, 118, 155, 197], "unit": [7, 23, 24, 36, 39, 47, 50, 54, 74, 86, 96, 121, 137, 147, 156, 158, 160, 178, 222, 224], "neagtiv": 7, "minit": 7, "estimate_mean": [7, 49, 133], "calcul": [7, 8, 10, 23, 39, 45, 47, 53, 54, 79, 80, 81, 82, 99, 130, 149, 203, 205, 206, 217], "estimate_weight": [7, 133], "log_density_per_compon": [7, 133], "log_weighted_dens": [7, 133], "log_lik": [7, 40, 133], "mixture_dens": [7, 133], "respons": [7, 41, 46, 47, 50, 70, 110, 111, 114, 119, 120, 133, 137, 224], "resp": 7, "util": [7, 16, 31, 32, 35, 39, 49, 63, 68, 85, 92, 118, 133, 192, 198, 214, 216, 224, 226], "weighted_dens": [7, 133], "estimate_robust_vmm": [7, 133], "von_mis": 7, "after": [7, 11, 14, 19, 20, 22, 39, 41, 44, 45, 47, 54, 65, 68, 74, 116, 118, 137, 147, 158, 161, 163, 176, 178, 184, 185, 226, 227, 229], "severla": 7, "priori": 7, "includ": [7, 9, 16, 39, 44, 47, 75, 82, 85, 90, 96, 110, 111, 136, 145, 158, 161, 169, 172, 176, 177, 178, 185, 186, 188, 195, 196, 198, 207, 214, 221, 224, 226, 227, 228, 229, 230], "example_cv_nonois": [7, 133], "example_noisi": [7, 133], "select_vmm": [7, 133], "select_vmm_cv": [7, 133], "cv_index": 7, "sphere_dens": [7, 133], "area": [7, 88, 104, 133, 198, 217], "line": [8, 20, 58, 131, 138, 160, 161, 162, 169, 170, 177, 178, 185, 190, 193, 197, 198, 226, 227], "tool": [8, 102, 131, 146, 153, 167, 172, 174, 180, 184, 191, 192, 197, 198, 221, 227, 230], "nipy_diagnos": 8, "nipy_tsdiffana": 8, "logic": [8, 35, 39, 68, 78, 79, 80, 81, 82, 203, 205, 206], "script": [8, 70, 133, 143, 145, 148, 174, 177, 185, 186, 191, 192, 197, 198, 221], "file": [8, 9, 17, 28, 61, 70, 74, 75, 83, 85, 92, 95, 97, 110, 111, 112, 116, 118, 127, 131, 133, 134, 136, 137, 140, 141, 152, 154, 155, 157, 160, 161, 170, 172, 173, 174, 180, 181, 184, 185, 186, 190, 191, 192, 193, 201, 207, 208, 215, 216, 221, 223, 225, 226, 231], "deal": [8, 14, 17, 88, 112, 145, 197, 201, 229], "argument": [8, 12, 17, 23, 24, 31, 39, 61, 65, 75, 79, 80, 81, 82, 85, 99, 104, 116, 121, 126, 136, 137, 158, 178, 196, 197, 203, 208, 210, 229], "pars": [8, 39], "import": [8, 9, 32, 35, 39, 45, 47, 50, 54, 61, 62, 63, 65, 67, 68, 72, 89, 99, 113, 118, 125, 126, 131, 134, 136, 137, 138, 143, 147, 149, 153, 154, 156, 158, 159, 177, 178, 179, 185, 186, 190, 195, 197, 202, 210, 216, 217, 221, 222, 223, 224, 226, 227, 229], "accept": [8, 23, 30, 35, 39, 46, 53, 65, 116, 126, 176, 186], "arg": [8, 24, 39, 42, 43, 61, 65, 66, 68, 74, 78, 79, 80, 84, 126, 129, 131, 133, 134], "argpars": 8, "doe": [8, 19, 23, 39, 45, 47, 50, 53, 61, 63, 65, 117, 118, 120, 129, 133, 134, 136, 137, 145, 147, 152, 153, 177, 184, 186, 190, 191, 194, 195, 197, 201, 202, 223, 227, 229], "diagnos": [8, 133, 159, 192], "write": [8, 9, 17, 39, 47, 69, 72, 85, 88, 90, 91, 92, 104, 111, 112, 116, 134, 137, 143, 153, 155, 158, 160, 161, 163, 169, 170, 171, 173, 180, 186, 190, 194, 195, 197, 199, 207, 208, 221, 227, 228, 229, 230], "screen": [8, 103, 133, 192, 213], "attribut": [8, 15, 21, 24, 28, 38, 45, 47, 61, 62, 63, 65, 66, 70, 73, 74, 75, 79, 80, 81, 82, 88, 104, 111, 113, 116, 123, 126, 128, 134, 137, 141, 143, 145, 201, 202, 218], "filenam": [8, 9, 11, 56, 72, 75, 85, 95, 116, 143, 178, 186, 208, 209, 222, 223], "str": [8, 9, 10, 11, 17, 18, 23, 24, 27, 28, 32, 39, 47, 54, 61, 62, 63, 65, 66, 67, 68, 70, 72, 87, 90, 91, 110, 116, 118, 126, 127, 128], "4d": [8, 9, 12, 23, 28, 63, 65, 85, 113, 116, 118, 123, 134, 141, 150, 186, 207, 208], "imag": [8, 9, 10, 11, 12, 17, 18, 19, 23, 24, 27, 28, 29, 32, 34, 54, 58, 65, 66, 69, 72, 73, 75, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 95, 96, 97, 99, 102, 103, 110, 113, 116, 117, 118, 133, 134, 136, 137, 139, 141, 143, 144, 145, 150, 151, 156, 178, 180, 186, 192, 196, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 223, 229, 230, 231], "time_axi": [8, 9, 10], "name": [8, 9, 10, 17, 23, 24, 28, 39, 47, 50, 54, 61, 63, 64, 65, 66, 67, 68, 70, 74, 76, 78, 82, 85, 90, 91, 92, 97, 101, 103, 110, 111, 112, 118, 119, 126, 127, 133, 134, 137, 143, 145, 155, 161, 163, 169, 170, 171, 174, 177, 178, 185, 186, 190, 193, 198, 199, 211, 216, 222, 223, 229], "time": [8, 9, 10, 11, 23, 26, 28, 34, 35, 39, 54, 58, 61, 63, 68, 70, 85, 89, 90, 91, 92, 110, 111, 112, 113, 114, 116, 119, 120, 121, 126, 133, 137, 141, 150, 161, 162, 176, 178, 179, 186, 197, 198, 199, 201, 215, 217, 224, 229], "slice_axi": [8, 9, 10, 11, 23, 137], "slice": [8, 9, 10, 12, 21, 23, 24, 28, 35, 58, 61, 62, 64, 65, 69, 74, 97, 99, 104, 113, 116, 117, 133, 137, 138, 147, 150, 179, 186, 192, 201, 210, 230], "out_path": [8, 9], "path": [8, 16, 17, 28, 70, 72, 79, 81, 82, 85, 87, 88, 91, 92, 96, 97, 110, 111, 112, 118, 127, 145, 174, 177, 185, 190, 191, 193, 208, 216, 226, 227], "out_fname_label": 8, "suffix": [8, 28, 71, 178], "ncompon": 8, "pca": [8, 9, 13, 92, 114, 133, 149, 186, 192, 198], "re": [8, 9, 29, 39, 44, 45, 46, 47, 48, 54, 70, 74, 90, 91, 126, 131, 137, 147, 153, 161, 163, 169, 170, 171, 190, 195, 227], "dict": [8, 9, 10, 11, 12, 24, 39, 44, 47, 49, 51, 54, 61, 65, 68, 84, 90, 91, 95, 110, 127], "run": [8, 14, 23, 34, 40, 70, 118, 131, 133, 136, 149, 154, 156, 158, 160, 173, 174, 182, 183, 185, 186, 190, 197, 226, 227, 228], "parse_fname_ax": [8, 133], "img_fnam": 8, "load": [8, 10, 23, 39, 61, 65, 72, 73, 74, 75, 79, 81, 82, 83, 118, 133, 149, 186, 190, 223, 227, 231], "do": [8, 9, 11, 23, 39, 47, 53, 54, 61, 63, 65, 68, 69, 70, 73, 94, 99, 116, 129, 133, 134, 137, 138, 140, 144, 147, 149, 152, 153, 155, 156, 159, 160, 162, 163, 164, 167, 169, 170, 172, 173, 176, 177, 178, 184, 185, 186, 190, 191, 193, 194, 195, 197, 198, 201, 219, 223, 224, 226, 227, 228, 229], "replac": [8, 39, 51, 61, 85, 96, 101, 126, 131, 133, 155, 160, 177, 185, 198, 229], "img": [8, 9, 10, 11, 54, 61, 63, 69, 72, 73, 74, 79, 81, 82, 103, 117, 136, 138, 144, 147, 149, 152, 179, 186], "mri": [8, 10, 35, 74, 134, 137, 146, 147, 198], "try": [8, 39, 65, 68, 74, 100, 116, 126, 134, 137, 143, 149, 155, 156, 171, 177, 178, 184, 190, 193, 197, 219, 229], "fail": [8, 31, 39, 61, 127, 143, 154, 156, 178, 185, 193, 198, 219], "fname": [8, 70, 71, 72, 149], "refer": [8, 10, 17, 23, 27, 28, 32, 35, 39, 44, 45, 47, 50, 53, 54, 61, 63, 74, 82, 85, 86, 91, 133, 136, 137, 138, 145, 147, 152, 155, 161, 166, 171, 172, 178, 179, 181, 192, 193, 195, 196, 198, 202, 207, 223, 229], "analyz": [8, 72, 134, 138, 147, 198, 221, 222], "nifti": [8, 23, 28, 61, 65, 72, 75, 79, 81, 82, 85, 90, 91, 97, 133, 134, 137, 138, 147, 179, 201, 208, 209, 215, 216, 221, 222], "rais": [8, 10, 14, 21, 23, 31, 39, 51, 61, 63, 65, 68, 70, 72, 74, 78, 82, 102, 110, 116, 121, 126, 137, 143, 195], "valueerror": [8, 10, 21, 23, 31, 39, 51, 65, 66, 72, 102, 116, 121, 126, 137, 143, 178], "fill": [8, 12, 18, 27, 32, 63, 116, 126, 127, 155], "tsdiffana": [8, 9, 10, 11, 133, 192], "param": [8, 21, 22, 24, 26, 30, 39, 65, 116, 133, 149], "out_fil": 8, "graphic": [8, 103, 136, 161, 198, 213, 224], "write_result": 8, "we": [8, 9, 10, 11, 19, 21, 22, 23, 26, 30, 32, 35, 39, 44, 45, 47, 53, 54, 61, 62, 63, 64, 65, 68, 72, 90, 91, 111, 116, 117, 118, 119, 120, 121, 126, 127, 129, 131, 133, 134, 136, 137, 138, 143, 144, 147, 149, 152, 153, 154, 155, 156, 158, 161, 163, 170, 171, 172, 176, 177, 178, 179, 184, 186, 188, 190, 191, 196, 197, 198, 199, 201, 202, 217, 219, 221, 223, 224, 225, 226, 228, 229, 230], "done": [8, 11, 18, 30, 38, 39, 48, 54, 61, 74, 90, 118, 128, 134, 152, 161, 166, 170, 184, 185, 191, 195], "img4d": 9, "ncomp": [9, 54, 114], "fmri": [9, 17, 23, 47, 50, 58, 85, 86, 94, 96, 133, 134, 137, 141, 144, 152, 178, 186, 188, 192, 197, 198, 201, 207, 208, 209, 215, 221, 224], "std": [9, 40, 54, 86, 96], "min": [9, 38, 67, 88, 90, 91, 137, 202, 224], "analysi": [9, 14, 17, 34, 36, 38, 39, 44, 47, 50, 54, 84, 86, 90, 94, 95, 96, 99, 112, 116, 145, 186, 188, 197, 198, 199, 200, 210, 219, 220, 224], "look": [9, 14, 39, 47, 74, 90, 91, 132, 136, 137, 138, 139, 147, 149, 152, 153, 156, 161, 165, 169, 172, 174, 178, 180, 186, 193, 198, 223, 224, 226, 227, 230], "At": [9, 126, 134, 137, 145, 159, 161, 191, 199], "moment": [9, 19, 34, 88, 90, 91, 136, 197], "guess": [9, 23, 34, 74, 137, 223], "futur": [9, 39, 61, 96, 118, 134, 155, 177, 187, 197], "you": [9, 17, 23, 35, 39, 53, 61, 63, 65, 69, 70, 74, 75, 78, 99, 103, 104, 118, 131, 134, 136, 137, 138, 147, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 166, 167, 169, 170, 171, 172, 174, 177, 178, 181, 184, 185, 190, 191, 193, 194, 195, 197, 198, 201, 210, 212, 213, 219, 223, 226, 227, 228, 229, 230], "error": [9, 17, 21, 23, 29, 31, 39, 45, 46, 47, 63, 65, 68, 72, 74, 116, 118, 121, 126, 143, 149, 152, 154, 159, 186, 190, 191, 194, 197], "kei": [9, 10, 25, 28, 39, 44, 47, 49, 51, 54, 61, 65, 68, 84, 110, 118, 134, 137, 163, 190], "summari": [9, 83, 84, 133, 134, 155, 156, 160, 164, 168, 174, 190, 217, 225], "deviat": [9, 24, 38, 47, 48, 49, 54, 116, 122, 202], "pca_r": 9, "ts_re": 9, "ni": [9, 149, 179], "funcfil": [9, 32, 54, 61, 62, 113, 178, 223], "load_imag": [9, 32, 54, 61, 62, 72, 113, 138, 143, 149, 152, 179, 222, 223], "screen_r": 9, "ndim": [9, 34, 39, 61, 64, 65, 66, 67, 68, 133, 222], "write_screen_r": [9, 133], "out_root": 9, "out_img_ext": 9, "nii": [9, 72, 116, 118, 144, 149, 178, 222], "pcnt_var_thresh": 9, "disk": [9, 17, 61, 72, 75, 100, 116, 138, 147, 222], "directori": [9, 28, 70, 72, 87, 92, 127, 131, 134, 153, 154, 160, 161, 162, 171, 172, 174, 177, 178, 185, 190, 191, 193, 226, 227], "prefix": [9, 39, 71, 156, 178, 181, 185, 191, 226], "extens": [9, 39, 72, 153, 176, 177, 195, 219, 227, 230], "identifi": [9, 39, 54, 61, 68, 87, 88, 90, 91, 92, 93, 112, 119, 134, 136, 137, 145, 158, 178, 193], "volum": [9, 10, 12, 23, 24, 35, 50, 75, 85, 88, 90, 91, 103, 104, 113, 120, 121, 133, 137, 141, 147, 149, 186, 192, 207, 213, 214, 217], "below": [9, 27, 39, 53, 54, 62, 68, 74, 87, 99, 103, 104, 110, 113, 131, 134, 136, 137, 138, 147, 149, 174, 177, 184, 190, 193, 210, 213, 214, 224, 227, 229], "percent": [9, 54, 118], "explain": [9, 54, 136, 161, 167, 170, 217, 219], "seri": [10, 11, 23, 28, 39, 47, 54, 85, 113, 114, 126, 133, 141, 145, 150, 152, 167, 174, 198, 201, 215], "life": 10, "http": [10, 17, 35, 38, 39, 47, 50, 53, 54, 70, 74, 120, 121, 126, 136, 137, 146, 157, 161, 163, 165, 174, 177, 184, 196, 198, 226, 227], "mrc": 10, "cbu": 10, "cam": [10, 96], "ac": 10, "uk": [10, 196], "datadiagnost": 10, "oliv": 10, "joseph": 10, "fil": 10, "gave": [10, 199], "me": [10, 137, 138, 144, 147, 152, 156, 191, 195], "mb": [10, 138, 147, 196], "idea": [10, 23, 39, 134, 136, 137, 143, 145, 147, 155, 186, 197, 217, 219, 229], "subtract": [10, 39, 120], "motion": [10, 23, 58, 111, 150], "sudden": 10, "time_slice_diff": [10, 11, 133], "arr": [10, 27, 39, 51, 54, 61, 63, 113, 116, 138, 149, 179], "think": [10, 134, 137, 138, 143, 144, 147, 156, 161, 170, 176, 179, 197, 224, 227], "pass": [10, 12, 23, 24, 39, 54, 61, 63, 66, 68, 72, 99, 104, 111, 116, 117, 118, 121, 126, 128, 143, 152, 174, 177, 184, 186, 191, 210, 229], "usual": [10, 27, 41, 45, 47, 61, 63, 74, 85, 117, 136, 137, 138, 147, 161, 190, 196, 197, 198, 207, 208, 223, 229], "singl": [10, 15, 23, 39, 45, 47, 65, 72, 90, 91, 110, 113, 116, 134, 145, 152, 154, 178, 185, 196, 197, 198, 221, 230], "entri": [10, 39, 45, 47, 49, 53, 65, 137, 155, 174, 191, 198, 229], "voxel": [10, 12, 17, 23, 24, 27, 28, 35, 38, 51, 61, 63, 65, 67, 68, 74, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 96, 99, 102, 103, 104, 116, 118, 137, 138, 139, 143, 145, 149, 152, 180, 198, 201, 203, 209, 210, 211, 213, 222, 223, 224, 229], "abov": [10, 14, 21, 23, 39, 41, 44, 45, 47, 54, 65, 69, 74, 75, 84, 95, 96, 134, 136, 137, 138, 145, 147, 152, 158, 160, 161, 169, 172, 174, 177, 178, 181, 185, 191, 223, 224, 226, 227, 229], "obvious": 10, "neuroimag": [10, 38, 40, 47, 50, 63, 68, 75, 82, 84, 88, 96, 101, 114, 118, 120, 137, 147, 179, 188, 197, 198, 199, 200, 201, 202, 217, 221, 224], "array_lik": [10, 51], "doc": [10, 74, 136, 137, 156, 157, 172, 174, 177, 178, 184, 186, 193], "vari": [10, 14, 39, 54, 178], "rollimg": [10, 61, 63, 133], "d2": 10, "squar": [10, 13, 16, 29, 44, 45, 46, 47, 50, 51, 118, 126], "volume_mean_diff2": 10, "next": [10, 39, 136, 138, 184, 223], "slice_mean_diff2": 10, "timepoint": 10, "volume_mean": 10, "slice_diff2_max_vol": 10, "largest": [10, 85, 102, 110, 207, 208, 209], "thu": [10, 16, 23, 39, 51, 53, 54, 68, 74, 81, 118, 141, 198, 202, 224, 229], "mai": [10, 20, 21, 23, 36, 39, 44, 45, 46, 47, 53, 65, 81, 82, 88, 110, 112, 118, 127, 134, 137, 138, 143, 145, 147, 149, 152, 154, 155, 156, 159, 160, 161, 162, 166, 178, 182, 184, 185, 190, 191, 193, 201, 220, 223, 224, 226, 229], "well": [10, 47, 61, 65, 78, 84, 96, 110, 134, 136, 137, 160, 161, 166, 190, 195, 197, 219, 221, 223, 224, 226, 227, 229, 230], "diff2_mean_vol": 10, "time_slice_diffs_imag": [10, 133], "plot_tsdiff": [11, 133], "metric": [11, 23, 143], "requir": [11, 14, 15, 40, 65, 74, 90, 91, 99, 118, 128, 133, 134, 138, 145, 147, 153, 174, 178, 181, 182, 184, 185, 190, 195, 198, 227], "format": [11, 64, 72, 127, 134, 136, 137, 138, 145, 147, 160, 170, 172, 173, 193, 221, 222], "plot_tsdiffs_imag": [11, 133], "pleas": [11, 23, 39, 61, 70, 153, 155, 156, 163, 170, 172, 177, 178, 200, 227], "docstr": [11, 39, 45, 47, 74, 84, 99, 128, 137, 172, 210], "code": [11, 14, 17, 40, 47, 54, 70, 74, 84, 86, 120, 129, 131, 134, 136, 137, 143, 145, 146, 158, 160, 161, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 184, 187, 189, 192, 195, 196, 197, 198, 199, 202, 216, 217, 218, 221, 223, 224, 225, 226, 228, 229, 230], "someth": [11, 39, 61, 116, 117, 123, 137, 138, 139, 144, 145, 147, 152, 156, 160, 161, 170, 171, 174, 177, 180, 185, 190, 193, 195, 223, 226, 227, 229], "time_slice_diff_imag": 11, "sequenc": [11, 17, 19, 21, 23, 24, 31, 32, 35, 39, 45, 47, 51, 61, 63, 64, 65, 66, 67, 68, 69, 99, 110, 113, 114, 116, 117, 118, 126, 128, 130, 132, 137, 193, 210, 229], "subplot": [11, 216], "length": [11, 16, 17, 23, 28, 39, 44, 47, 49, 65, 74, 90, 91, 92, 94, 102, 110, 114, 117, 119, 120, 121, 122, 124, 126, 130, 137, 179, 198], "Will": [11, 103, 136, 213], "wa": [11, 23, 35, 39, 61, 65, 72, 84, 112, 131, 137, 138, 147, 152, 155, 161, 174, 177, 186, 190, 193, 195, 196, 198, 199, 224, 226, 229], "definit": [12, 47, 53, 68, 86, 87, 90, 92, 93, 118, 120, 137, 147, 190, 201, 229, 231], "width": [12, 16, 17, 97, 99, 104, 120, 210, 216], "half": [12, 17, 23, 35, 39, 92], "conjunct": [12, 96, 118, 133], "theori": [12, 50], "resolut": [12, 17, 110, 177, 201], "block": [12, 24, 35, 50, 65, 110, 112, 126, 133, 134, 138, 147, 177, 179, 197, 228], "pixel": [12, 74, 97, 152, 198, 216], "smooth": [12, 17, 19, 24, 38, 39, 85, 97, 114, 133, 140, 148, 201, 216, 223], "There": [12, 45, 47, 54, 63, 74, 127, 136, 137, 138, 145, 153, 161, 165, 166, 167, 172, 177, 178, 191, 195, 196, 197, 198, 226, 227, 229, 230], "3d": [12, 16, 19, 23, 28, 63, 65, 67, 68, 74, 76, 78, 79, 81, 82, 85, 88, 95, 97, 99, 100, 102, 103, 104, 113, 116, 134, 136, 138, 141, 147, 150, 179, 186, 188, 201, 207, 208, 209, 210, 211, 212, 213, 214, 216], "volumewis": 12, "fastfhwm": 12, "entir": [12, 39], "avail": [12, 39, 50, 53, 61, 72, 92, 96, 111, 134, 145, 159, 165, 185, 196, 197, 198, 221], "iterfwhm": 12, "residu": [12, 41, 44, 46, 47, 116, 117], "keyword": [12, 23, 24, 39, 48, 50, 61, 75, 90, 91, 99, 104, 121, 126, 186, 210], "core": [12, 39, 72, 74, 76, 78, 113, 133, 137, 160, 178, 181, 182, 192, 197, 201, 217, 222, 223, 229, 230], "fwhm2resel": [12, 133], "convert": [12, 17, 19, 21, 29, 31, 33, 39, 62, 65, 90, 91, 102, 113, 133, 134, 137, 160, 192, 201], "reseel": 12, "coordmap": [12, 18, 19, 32, 54, 61, 62, 63, 64, 65, 67, 68, 74, 113, 116, 133, 141, 143, 149, 152, 222, 223, 229], "integr": [12, 39, 50, 88, 90, 91, 120, 133, 147, 164, 188, 195, 197, 198, 224, 230], "mask": [12, 17, 24, 33, 34, 54, 87, 88, 89, 91, 92, 95, 96, 97, 99, 102, 104, 118, 123, 133, 134, 161, 190, 192, 210, 214, 216, 217], "add": [12, 39, 63, 65, 74, 93, 104, 110, 126, 134, 136, 137, 159, 160, 161, 167, 169, 170, 171, 174, 177, 178, 184, 185, 186, 190, 216, 217, 223, 227], "total_resel": 12, "nvoxel": 12, "resel2fwhm": [12, 133], "isotrop": [12, 17, 21, 23, 24], "clobber": [12, 116], "coordinatemap": [12, 19, 32, 61, 64, 67, 68, 133, 137, 139, 152, 222, 229], "convers": [12, 75, 88, 134, 154, 221], "alreadi": [12, 19, 39, 53, 63, 70, 110, 137, 143, 161, 169, 170, 186, 195, 197, 199, 227, 229], "bipartit": 13, "sai": [13, 41, 96, 134, 137, 147, 152, 161, 169, 176, 185, 223, 224, 226, 227, 229], "exist": [13, 17, 23, 50, 65, 70, 74, 90, 96, 116, 134, 143, 145, 155, 191, 221], "simplic": [13, 51], "side": [13, 39, 50, 104, 118, 143], "respect": [13, 23, 24, 39, 45, 65, 78, 90, 91, 97, 111, 122, 134, 136, 147, 216, 223, 224, 229], "reprens": 13, "pairwis": [13, 15, 52], "scend": 13, "candid": [13, 185], "subgraph_left": [13, 133], "subgraph_right": [13, 133], "bipartite_graph_from_adjac": [13, 133], "instanti": [13, 14, 16, 88, 90, 92, 111], "wg": [13, 16], "bipartite_graph_from_coo_matrix": [13, 133], "bg": 13, "check_feature_matric": [13, 133], "consist": [13, 17, 23, 50, 79, 80, 81, 82, 88, 89, 93, 112, 126, 136, 145, 153, 221], "n1": [13, 39, 52, 120], "n2": [13, 39, 52, 120], "common": [13, 17, 23, 35, 39, 61, 63, 69, 84, 85, 86, 92, 96, 110, 133, 138, 147, 160, 167, 179, 197, 198, 209, 218, 224, 229], "cross_ep": [13, 133], "neighbourhood": 13, "sake": [13, 137], "speed": [13, 51, 53, 138, 197, 230], "advis": [13, 85, 161, 207, 208], "preprocess": 13, "cross_knn": [13, 133], "transform": [13, 21, 22, 23, 24, 26, 27, 28, 32, 39, 42, 54, 64, 65, 67, 74, 79, 80, 81, 82, 88, 91, 104, 118, 133, 137, 138, 139, 147, 149, 150, 179, 192, 201, 203, 204, 223, 229, 230], "py": [14, 39, 127, 136, 153, 159, 170, 174, 177, 178, 184, 185, 190, 191, 193, 202, 216, 226, 227], "plu": [14, 39, 110, 111, 112, 119, 121, 158, 178], "multi": [14, 17, 23, 86, 93, 96, 112, 201, 221, 224], "dimnesion": 14, "allow": [14, 21, 23, 38, 39, 40, 50, 51, 61, 63, 65, 66, 74, 88, 89, 90, 91, 96, 113, 126, 134, 137, 138, 143, 145, 147, 152, 155, 163, 172, 184, 186, 190, 191, 195, 196, 197, 198, 222, 224, 227, 230], "kind": [14, 16, 39, 63, 79, 81, 82, 88, 118, 126, 133, 134, 137, 147, 156, 190, 229], "those": [14, 39, 40, 50, 65, 91, 137, 161, 167, 169, 175, 176, 195], "mathemat": [14, 39, 137, 152, 221, 224, 230, 231], "morphologi": [14, 88], "diffus": [14, 133, 134, 198], "easili": [14, 131, 134, 156, 177, 186, 191, 197, 198, 201, 217, 224], "itself": [14, 32, 39, 44, 45, 47, 65, 88, 126, 134, 137, 177, 195, 227, 229], "close": [14, 70, 96, 119, 133, 156, 161, 169, 174, 178, 190, 197, 198], "nbiter": 14, "morpholog": [14, 85, 207, 208, 209], "inplac": [14, 85, 153, 184, 190], "constrained_voronoi": [14, 133], "parcel": [14, 17, 69, 89, 92, 116, 133, 192], "fixm": [14, 88, 93, 96, 112, 186, 201], "custom_watersh": [14, 133], "refdim": 14, "th": [14, 21, 39, 46, 50, 84, 90, 92, 96, 229], "watersh": [14, 90], "bassin": 14, "found": [14, 39, 54, 65, 85, 86, 87, 90, 91, 96, 127, 137, 175, 193, 199, 201, 223], "around": [14, 21, 24, 28, 39, 79, 80, 81, 82, 116, 122, 131, 137, 178, 193, 199, 202, 217], "convention": [14, 23], "nbassin": 14, "local": [14, 17, 20, 24, 50, 86, 95, 134, 136, 145, 161, 168, 171, 172, 174, 190, 191, 193, 227], "maxima": [14, 50, 95], "dilat": [14, 133], "fast": [14, 27, 39, 52, 138, 145, 147, 169, 176, 197, 227], "dtype": [14, 21, 27, 39, 51, 53, 61, 63, 65, 66, 67, 69, 72, 74, 85, 90, 91, 94, 126, 130, 133, 137, 138, 147, 186, 229], "float64": [14, 39, 53, 54, 61, 63, 64, 65, 66, 67, 68, 110, 111, 113, 116, 130, 137, 186, 222], "eros": [14, 133], "open": [14, 39, 85, 103, 118, 133, 134, 155, 159, 161, 172, 173, 174, 178, 180, 185, 186, 190, 195, 196, 197, 198, 207, 208, 209, 213, 220, 227], "geodesic_kmean": [14, 133], "obtent": 14, "cluster": [14, 38, 84, 85, 86, 89, 92, 95, 96, 133, 178, 192, 230], "minim": [14, 20, 23, 25, 86, 87, 96, 103, 111, 119, 213], "concern": [14, 53, 195], "expect": [14, 17, 39, 45, 50, 65, 86, 96, 110, 119, 126, 229], "lmax": 14, "ewxcept": 14, "increas": [14, 85, 126, 137, 195, 196, 198, 207, 208], "get_field": [14, 133], "get_local_maxima": [14, 133], "nmax": 14, "q": [14, 21, 29, 34, 38, 39, 47, 50, 83, 84, 118, 124, 133], "highest_neighbor": [14, 133], "along": [14, 23, 24, 51, 61, 65, 69, 99, 102, 104, 113, 154, 177, 199, 210, 229], "hneighb": 14, "local_maxima": [14, 133], "set_field": [14, 133], "subfield": [14, 133], "threshold_bifurc": [14, 133], "bifurc": 14, "mors": 14, "nlset": 14, "also": [14, 16, 27, 38, 39, 47, 50, 51, 61, 63, 65, 66, 68, 72, 74, 85, 96, 110, 131, 136, 137, 143, 144, 145, 147, 149, 151, 154, 158, 159, 160, 161, 171, 172, 177, 178, 179, 182, 185, 186, 188, 190, 191, 195, 196, 197, 198, 201, 208, 214, 222, 223, 224, 226, 227, 229, 230], "diamet": [14, 84], "basin": 14, "domin": [14, 195], "describ": [14, 15, 21, 23, 39, 41, 47, 65, 67, 74, 86, 87, 90, 91, 92, 94, 96, 112, 118, 127, 134, 136, 137, 138, 147, 153, 166, 198, 201, 221, 223, 224, 229, 230], "thevertic": 14, "field_from_coo_matrix_and_data": [14, 133], "ifield": 14, "field_from_graph_and_data": [14, 133], "fieldfrom": 14, "class": [15, 17, 18, 22, 26, 28, 30, 33, 44, 46, 54, 62, 73, 76, 79, 80, 81, 82, 85, 93, 94, 113, 129, 132, 133, 137, 138, 141, 143, 147, 158, 178, 186, 193, 195, 214, 229], "characterist": [15, 50, 91, 134], "fulli": [15, 198, 201, 217], "character": [15, 88, 96, 120], "uniqu": [15, 17, 39, 69, 90, 91, 134, 145, 169], "relationship": [15, 63, 74, 79, 81, 82, 179, 194, 229], "cannot": [15, 39, 65, 72, 81, 84, 90, 91, 93, 126, 134, 184, 185, 195, 201], "all_sidt": 15, "segment": [15, 85, 133, 192], "ascend": [15, 23, 35], "zach": 15, "function": [15, 17, 20, 41, 42, 43, 44, 45, 46, 52, 62, 64, 86, 87, 94, 113, 133, 134, 136, 137, 138, 143, 147, 148, 149, 152, 155, 156, 158, 176, 181, 186, 188, 190, 193, 197, 198, 200, 201, 214, 215, 220, 223, 224, 227, 229, 230], "importantli": [16, 137], "epsilon": [16, 20, 24, 53, 224], "tupl": [16, 23, 24, 27, 32, 34, 39, 40, 45, 47, 63, 65, 67, 68, 69, 79, 80, 81, 82, 88, 97, 99, 103, 104, 113, 116, 127, 130, 137, 147, 152, 203, 210, 213, 216, 229], "planar": 16, "complete_graph": [16, 133], "concatenate_graph": [16, 133], "g1": [16, 120], "g2": [16, 120], "disjoint": [16, 96], "eps_nn": [16, 133], "n_featur": [16, 47, 51], "neighborhood": 16, "graph_3d_grid": [16, 133], "six": [16, 184], "system": [16, 23, 39, 54, 61, 65, 66, 68, 79, 80, 81, 82, 88, 91, 133, 134, 136, 137, 139, 140, 145, 147, 152, 154, 158, 159, 177, 178, 184, 185, 186, 188, 190, 195, 197, 198, 203, 221, 222, 223, 226, 227], "knn": [16, 133], "ba": [16, 224], "lil_cc": [16, 133], "lil": 16, "dramat": 16, "wgraph_from_3d_grid": [16, 133], "wgraph_from_adjac": [16, 133], "wgraph_from_coo_matrix": [16, 133], "subject": [17, 39, 49, 84, 85, 86, 87, 89, 92, 93, 94, 96, 97, 134, 140, 144, 145, 147, 198, 209, 216, 221, 223, 224, 229], "effect": [17, 36, 39, 40, 45, 47, 49, 50, 51, 54, 83, 96, 110, 116, 117, 118, 124, 138, 152, 158, 178, 191, 195, 221, 224, 229], "brain": [17, 61, 85, 86, 102, 103, 134, 145, 152, 198, 199, 207, 208, 209, 212, 213, 215, 219, 220, 226], "both": [17, 29, 39, 65, 74, 79, 80, 81, 82, 112, 114, 116, 134, 136, 137, 153, 172, 197, 205, 216, 221, 226], "uncertainti": [17, 53, 87], "et": [17, 34, 38, 40, 86, 94, 115, 177, 184, 189, 202, 216], "al": [17, 34, 38, 40, 86, 94, 115, 202], "spatial": [17, 23, 63, 74, 81, 82, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 136, 137, 138, 147, 179, 188, 198, 201, 216, 229, 231], "statistica": [17, 50], "sinica": [17, 50], "anatom": [17, 89, 92, 99, 103, 134, 137, 149, 198, 210, 212, 213, 217, 223, 229], "miccai": [17, 86], "09": [17, 118], "lectur": 17, "scienc": [17, 220, 230], "5762": 17, "450": 17, "457": 17, "roch": [17, 23, 29, 34, 40, 58, 84, 96, 199], "alexi": [17, 23, 58, 84, 199], "2012": [17, 38, 40, 50, 84], "ohbm": 17, "12": [17, 18, 21, 39, 54, 63, 65, 99, 103, 104, 120, 137, 177, 191, 210, 213, 224, 227], "talk": [17, 138, 147, 229], "slide": 17, "site": [17, 88, 134, 153, 185, 186, 190, 227], "googl": [17, 146, 177], "com": [17, 53, 126, 136, 146, 153, 155, 157, 160, 161, 162, 163, 165, 169, 170, 171, 177, 196, 227], "alexisroch": 17, "talk_beijing12": 17, "pdf": [17, 42, 120, 136, 172, 177, 202, 216, 224], "con_img": 17, "parcel_img": 17, "parcel_info": 17, "msk_img": 17, "vcon_img": 17, "design_matrix": [17, 95, 133, 192], "cvect": 17, "fwhm": [17, 19, 120, 133, 192, 193], "8": [17, 19, 21, 23, 35, 38, 39, 47, 58, 63, 65, 110, 120, 130, 137, 140, 177, 185, 202, 224], "smooth_method": 17, "res_path": 17, "write_smoothed_imag": 17, "independ": [17, 36, 39, 96, 116, 134, 198], "regist": [17, 21, 143, 149, 152], "contrast": [17, 39, 45, 47, 87, 92, 95, 110, 111, 116, 117, 123, 133, 197, 198, 224], "throughout": [17, 23, 177, 229], "beta": [17, 33, 34, 36, 40, 41, 44, 45, 47, 92, 96, 118, 133, 177], "denot": [17, 28, 229], "distinct": [17, 66, 74, 84, 137, 198], "intens": [17, 23, 24, 29, 34, 186, 198, 201, 231], "get_fdata": [17, 23, 61, 62, 69, 79, 81, 82, 113, 116, 118, 133, 222], "restrict": [17, 24, 34, 137, 195, 229], "carri": [17, 79, 80, 81, 82, 195, 229], "noisi": [17, 36, 158, 178], "match": [17, 24, 34, 39, 53, 61, 65, 68, 69, 74, 78, 79, 80, 81, 82, 84, 114, 120, 131, 133, 137, 139, 149, 152, 174, 177, 190, 206], "scan": [17, 23, 28, 39, 97, 111, 119, 134, 144, 145, 198, 216], "regressor": [17, 36, 39, 83, 111, 118, 119, 121], "interest": [17, 39, 45, 47, 94, 110, 111, 127, 137, 139, 144, 145, 153, 156, 175, 180, 201, 217, 229], "product": [17, 39, 50, 64, 65, 66, 132, 133, 195, 197, 223, 229], "howev": [17, 39, 63, 65, 134, 161, 176, 178, 196, 197, 198, 201, 229], "kernel": [17, 19, 24, 94, 96, 119, 126], "spm": [17, 23, 72, 111, 112, 119, 120, 133, 134, 137, 138, 140, 141, 147, 186, 188, 192, 197, 198, 221], "written": [17, 39, 90, 91, 111, 127, 131, 134, 161, 196, 197, 198, 219, 224, 229], "specifi": [17, 23, 24, 28, 30, 32, 39, 45, 47, 51, 53, 54, 61, 62, 63, 65, 66, 72, 74, 81, 82, 83, 84, 88, 90, 97, 104, 110, 111, 113, 116, 118, 126, 130, 136, 137, 138, 145, 147, 178, 186, 216, 225, 229, 231], "dump_result": [17, 133], "save": [17, 61, 72, 74, 75, 83, 85, 97, 99, 104, 116, 133, 137, 149, 160, 161, 178, 186, 190, 208, 210, 216, 217, 227, 231], "npz": [17, 83, 95, 118], "parcel_map": [17, 133], "full_r": 17, "pmap_mu_img": 17, "pmap_prob_img": 17, "t_map": [17, 133], "what": [17, 23, 32, 39, 44, 47, 118, 126, 133, 135, 137, 139, 147, 149, 152, 155, 161, 171, 180, 194, 195, 197, 200, 221, 224, 225, 228, 229], "style": [17, 39, 153, 173, 186, 195, 221], "mass": [17, 95, 224], "univari": [17, 39, 95], "becaus": [17, 35, 39, 54, 65, 74, 120, 126, 134, 136, 137, 138, 147, 152, 156, 161, 169, 174, 178, 184, 193, 195, 197, 198, 201, 221, 223, 224, 229, 230], "tmap_img": 17, "helper": [17, 39, 95, 121, 173, 217], "ndimag": [18, 27, 32, 186, 229], "cval": [18, 27, 32, 118], "world": [18, 24, 27, 32, 61, 63, 64, 65, 66, 67, 68, 74, 75, 77, 79, 80, 81, 82, 84, 102, 103, 104, 137, 139, 143, 180, 192, 195, 201, 203, 204, 205, 206, 211, 217, 222, 225, 229], "spline": [18, 27, 32, 39, 110, 224], "outsid": [18, 27, 32, 90, 91, 103, 126, 198, 212], "boundari": [18, 27, 32], "reflect": [18, 27, 32, 39, 110], "wrap": [18, 27, 32, 131, 138, 147], "output_coord": [18, 152, 229], "read": [18, 23, 39, 85, 90, 91, 112, 134, 137, 161, 167, 169, 170, 171, 178, 195, 197, 221, 222, 224, 227, 229], "n_prepad_if_need": [18, 133], "linear": [19, 36, 39, 41, 42, 45, 46, 47, 54, 65, 110, 118, 126, 133, 140, 149, 161, 224, 229, 230], "filter": [19, 24, 39, 111, 121, 144, 198], "locat": [19, 23, 28, 38, 50, 61, 88, 120, 124, 134, 177, 185, 186, 191, 226, 227, 229], "cov": [19, 39, 45, 47, 133, 158, 178], "fft": [19, 230], "smoother": [19, 223], "choic": [19, 23, 53, 84, 160, 195, 196, 197, 217, 229, 230], "better": [19, 39, 69, 137, 138, 147, 155, 161, 166, 170, 175, 186, 188, 197, 199, 219, 221], "appli": [19, 21, 22, 23, 24, 26, 27, 28, 30, 39, 47, 50, 54, 69, 73, 77, 79, 81, 82, 85, 90, 102, 117, 118, 124, 128, 133, 137, 141, 143, 152, 153, 179, 186, 217, 221, 223, 224, 229], "offset": [19, 65, 74, 110, 113, 177, 202, 216], "l1sum": 19, "inimag": 19, "clean": [19, 42, 43, 133, 167, 174], "is_fft": 19, "nan_to_num": 19, "s_imag": 19, "fwhm2sigma": [19, 133], "sigma2fwhm": [19, 133], "fmin_steepest": [20, 133], "x0": [20, 39], "fprime": [20, 25], "xtol": [20, 23], "ftol": [20, 23], "4901161193847656e": 20, "08": 20, "callback": 20, "disp": 20, "steepest": [20, 23, 24], "gradient": [20, 23, 24, 44, 45, 46, 47, 114, 152], "descent": 20, "complement": 20, "collect": [20, 23, 35, 39, 74, 97, 117, 132, 133, 161, 178, 198], "cheaper": 20, "conjug": [20, 39, 133], "newton": 20, "henc": [20, 21, 23, 39, 64, 65, 74, 91, 137, 224, 229], "sometim": [20, 44, 47, 74, 129, 137, 144, 161, 178, 195, 196, 198, 199, 224], "turn": [20, 39, 154, 161, 185, 198, 224], "algthough": 20, "typic": [20, 21, 38, 45, 65, 103, 134, 143, 202, 212, 224], "need": [20, 23, 35, 38, 39, 44, 45, 47, 61, 63, 65, 68, 69, 74, 78, 79, 81, 82, 99, 104, 111, 116, 118, 120, 126, 128, 131, 134, 136, 137, 143, 144, 147, 149, 152, 153, 154, 160, 161, 162, 163, 169, 172, 174, 176, 178, 184, 185, 186, 190, 191, 195, 196, 197, 201, 210, 215, 223, 224, 226, 227, 229], "callabl": [20, 23, 24, 32, 46, 61, 65, 78, 103, 116, 117, 126, 152, 213, 229], "toler": [20, 23, 39, 53], "search": [20, 50, 61, 131, 178, 186, 190, 192, 195, 197, 225], "messag": [20, 143, 154, 155, 161, 170, 173, 180, 226], "radiu": [21, 50, 89], "as_affin": [21, 27, 28, 133, 223], "doubl": [21, 137, 185], "compos": [21, 23, 26, 30, 65, 76, 78, 133, 134, 137, 143, 149, 229], "onto": [21, 26, 30, 32, 39, 54, 79, 80, 81, 82, 111, 161, 174, 178, 205], "anoth": [21, 26, 30, 32, 39, 66, 68, 69, 74, 78, 81, 101, 102, 120, 126, 137, 138, 147, 152, 160, 177, 191, 197, 201, 223, 224, 227, 229], "composed_transform": [21, 26], "composit": [21, 26, 30, 65, 66, 78, 137, 152, 229], "from_matrix44": [21, 133], "aff": [21, 63, 64, 65, 223], "4x4": [21, 63, 76, 77, 79, 80, 81, 82, 99, 102, 103, 104, 137, 138, 147, 203, 210, 213], "natur": [21, 39, 110, 137, 195, 197, 219, 224], "translat": [21, 65, 77, 133, 172], "rotat": [21, 28, 54, 77, 79, 80, 81, 82, 133, 137, 203, 224], "pre": [21, 22, 23, 47, 155, 161, 221], "shear": 21, "combin": [21, 23, 39, 64, 66, 69, 74, 77, 134, 137, 161, 230], "unitari": 21, "_direct": 21, "is_direct": [21, 133], "param_ind": [21, 133], "9": [21, 23, 39, 47, 54, 61, 63, 64, 65, 69, 85, 99, 103, 118, 120, 126, 137, 147, 157, 186, 202, 207, 208, 209, 210, 213, 220], "11": [21, 39, 61, 63, 65, 134, 138, 147, 185], "pre_rot": [21, 133], "precond": [21, 133], "inverse_affin": [21, 133], "precondition": [21, 133], "pc": [21, 23], "r": [21, 23, 28, 39, 47, 50, 53, 54, 63, 67, 68, 69, 74, 84, 101, 104, 115, 125, 131, 133, 137, 161, 174, 185, 190, 197, 222, 223, 224, 226, 229, 230], "roughli": [21, 24, 229], "compar": [21, 38, 39, 47, 66, 68, 103, 114, 133, 137, 152, 169, 211, 224], "end": [21, 23, 39, 48, 67, 110, 126, 137, 138, 143, 147, 154, 161, 169, 195, 224, 227, 229], "reformat": 21, "rotation_mat2vec": [21, 133], "vec": 21, "norm": [21, 24, 53], "angl": [21, 28, 152], "theta": [21, 34, 38, 39, 44, 45, 46, 47, 96, 202], "rotation_vec2mat": [21, 133], "rodrigu": 21, "formula": [21, 40, 47, 83, 95, 116, 123, 126, 133, 192, 225, 231], "sin": [21, 39, 126, 224, 230], "sn": 21, "nz": 21, "ny": [21, 161], "nx": 21, "veri": [21, 53, 63, 84, 134, 137, 138, 145, 147, 152, 156, 159, 160, 163, 184, 186, 193, 195, 197, 198, 226, 227], "lead": [21, 39, 118, 198, 221], "instabl": 21, "taylor": [21, 38, 39, 50, 114, 137, 199, 220, 221, 229], "expans": [21, 39, 114], "tetha": 21, "sr": 21, "teta2": 21, "theta2": 21, "upper": [21, 39, 45, 47, 85, 207, 208, 209], "multipl": [21, 23, 36, 39, 40, 45, 50, 51, 91, 94, 110, 118, 137, 139, 154, 177, 181, 185, 191, 198, 202, 224, 230], "pi": [21, 39, 44, 47, 126, 131, 177, 224], "strategi": [21, 34, 143, 145], "warrant": 21, "continu": [21, 44, 79, 80, 81, 82, 121, 126, 130, 179, 188, 203, 205, 206], "slices2aff": [21, 133], "column": [21, 39, 40, 44, 45, 47, 51, 53, 54, 64, 65, 74, 110, 111, 112, 118, 121, 124, 224], "subgrid_affin": [21, 133], "prodoct": 21, "slice_affin": 21, "to_matrix44": [21, 133], "interpret": [21, 39, 44, 65, 88, 137, 197, 229], "optimiz": 22, "post": [22, 40, 85, 160, 167, 208], "affin": [22, 23, 24, 26, 27, 28, 32, 61, 63, 64, 65, 67, 68, 73, 74, 75, 76, 77, 79, 80, 81, 82, 88, 91, 95, 99, 102, 103, 104, 116, 133, 137, 143, 150, 152, 192, 201, 203, 210, 211, 213, 217, 222, 223], "pt": [22, 30, 65, 136], "transformed_pt": 22, "four": [23, 58, 74, 178, 216], "applic": [23, 39, 50, 54, 58, 92, 112, 134, 138, 147, 195, 196, 197, 224], "joint": [23, 24, 29, 58], "medic": [23, 29, 34], "ieee": [23, 58, 94, 197], "transact": 23, "30": [23, 39, 45, 47, 50, 58, 61, 67, 97, 110, 137, 216, 217, 223], "1546": [23, 58], "1554": [23, 58], "slice_ord": [23, 28], "tr": [23, 28, 35, 63, 65, 113, 116, 119, 149], "tr_slice": 23, "interleav": 23, "time_interp": 23, "slice_tim": [23, 35, 113], "affine_class": 23, "rigid": [23, 24, 28, 81, 133, 197], "slice_info": 23, "spatiotempor": 23, "realign": 23, "flexibl": [23, 137, 143, 145, 197, 230], "easier": [23, 64, 131, 156, 161, 181, 197, 219, 227], "acquisit": [23, 28, 35, 74, 110, 111, 112, 121, 134, 137, 198], "warn": [23, 39, 74, 102, 129, 154, 190], "were": [23, 28, 39, 50, 137, 143, 149, 195, 196, 198, 224], "contigu": 23, "revers": [23, 39, 61, 65, 68, 103, 137, 152, 211], "acquir": [23, 28, 35, 152, 201], "inter": [23, 85, 86, 89, 94, 145, 209], "repetit": [23, 28, 96, 119], "elaps": 23, "consecut": [23, 90, 91], "although": [23, 112, 198], "divid": [23, 39, 44, 96, 120, 134], "origin": [23, 24, 39, 51, 65, 79, 80, 81, 82, 84, 114, 116, 137, 160, 161, 170, 171, 177, 191, 195, 205, 214], "synchron": [23, 61, 134], "tell": [23, 137, 147, 152, 160, 170, 171, 226], "interpol": [23, 24, 27, 32, 48, 79, 80, 81, 82, 126, 133, 138, 143, 147, 152, 192, 201, 203, 205, 206, 223], "trigger": [23, 174], "unless": [23, 24, 39, 53, 65, 74, 116, 137], "depend": [23, 39, 44, 47, 53, 69, 79, 80, 81, 82, 92, 110, 137, 138, 147, 173, 174, 180, 183, 184, 185, 198, 201, 206, 230], "scanner": [23, 35, 65, 67, 74, 137, 143, 147, 152, 198, 201, 229], "manufactur": 23, "refrain": 23, "sure": [23, 110, 137, 138, 143, 147, 154, 158, 160, 161, 174, 178, 185, 190, 193, 229], "safer": 23, "explicitli": [23, 38, 39, 137, 224], "altogeth": 23, "simultan": [23, 39, 47], "speak": [23, 129, 224, 229], "necessari": [23, 38, 63, 103, 134, 145, 158, 178, 181, 201, 202, 213, 226, 229], "closest": [23, 61, 65, 91, 152], "axial": [23, 99, 152, 210], "bottom": [23, 35, 39, 50, 137, 177], "top": [23, 35, 39, 50, 103, 161, 169, 172, 177, 197, 213, 221], "head": [23, 39, 147, 160, 161, 169, 177, 190], "between_loop": 23, "align_run": 23, "speedup": 23, "refscan": 23, "border": 23, "ncg": 23, "05": [23, 34, 38, 41, 44, 45, 47, 65, 122, 126, 202], "gtol": 23, "stepsiz": [23, 24], "06": 23, "64": [23, 39, 61], "maxfun": 23, "subsampl": [23, 24, 61, 96, 133], "experi": [23, 138, 147, 195, 198, 224], "tmi": [23, 94], "ignor": [23, 24, 34, 39, 50, 65, 66, 74, 87, 137, 195], "sub": [23, 39, 89, 133, 134, 190], "alwai": [23, 39, 45, 47, 54, 63, 65, 121, 134, 147, 179, 196, 201, 229], "extrem": 23, "sagitt": [23, 152], "coron": [23, 137, 152], "affect": [23, 39, 50, 65, 156, 161, 194], "simplex": [23, 24], "powel": [23, 24, 143], "cg": [23, 24], "bfg": [23, 24], "comparison": [23, 197, 202, 221], "hessian": [23, 24, 44, 47], "basi": [23, 54, 65, 110, 119, 121, 124, 126, 137, 145, 152, 197, 229], "remain": [23, 74, 84, 136, 161], "until": [23, 39, 61, 176, 186], "actual": [23, 39, 74, 120, 134, 137, 145, 147, 152, 160, 161, 229], "nd": [23, 62, 88, 96], "proxi": [23, 73], "configur": [23, 154, 161, 164, 168, 185, 190, 227], "free_data": [23, 133], "get_shap": [23, 133], "scanner_tim": [23, 133], "zv": 23, "tv": 23, "z_to_slic": [23, 133], "fact": [23, 32, 65, 112, 138, 147, 156, 229], "wrt": [23, 24, 39], "session": [23, 85, 97, 112, 118, 144, 173, 190, 191, 209, 216], "im4d": 23, "optimize_templ": 23, "align_to_refscan": [23, 133], "motion_estim": 23, "align": [23, 54, 74, 137, 152, 222, 223, 224], "onlin": [23, 168], "templat": [23, 29, 34, 93, 94, 99, 100, 103, 149, 174, 177, 178, 201, 210, 213, 223, 226], "redefin": [23, 39, 90, 91], "head_averag": 23, "estimate_instant_mot": [23, 133], "estimate_mot": [23, 133], "frame": [23, 104, 113, 116, 137, 186], "further": [23, 68, 88, 128, 147, 154, 179], "sequenti": [23, 74, 112, 154], "init_instant_mot": [23, 133], "cach": 23, "decompos": 23, "tempor": [23, 118, 119, 198, 221], "via": [23, 39, 63, 116, 117, 126, 134, 138, 145, 147, 154, 157, 161, 181, 182, 184, 190, 201, 226, 227], "decomposit": [23, 53, 90, 114], "global": [23, 26, 34, 93, 131, 160, 170, 190], "up": [23, 26, 34, 35, 39, 45, 47, 51, 53, 72, 74, 110, 121, 137, 147, 153, 155, 156, 159, 160, 164, 167, 168, 170, 174, 178, 180, 189, 195, 197, 198], "v0": 23, "nv": 23, "nv0": 23, "m0": 23, "resample_full_data": [23, 133], "set_fmin": [23, 133], "kwarg": [23, 24, 25, 39, 42, 43, 61, 65, 66, 68, 74, 78, 79, 80, 84, 96, 99, 104, 126, 129, 131], "set_transform": [23, 133], "interfac": [23, 28, 39, 61, 78, 80, 87, 113, 118, 133, 144, 149, 174, 190, 192, 197, 201, 221, 230], "header": [23, 39, 61, 72, 73, 74, 85, 90, 91, 133, 137, 143], "attempt": [23, 39, 84, 103, 139, 156, 180, 193, 213, 229], "made": [23, 39, 53, 66, 82, 90, 91, 134, 145, 153, 155, 160, 161, 169, 170, 177, 196, 217], "thrown": 23, "signal": [23, 50, 84, 85, 90, 92, 97, 111, 161, 170, 198, 201, 216, 224, 230], "slicetime_funct": [23, 28], "dictionari": [23, 28, 39, 49, 51, 61, 65, 68, 79, 80, 81, 82, 83, 84, 95, 96, 104, 110, 112, 118, 196], "slicetim": [23, 28, 116, 133, 149, 192], "timefunc": [23, 28, 133, 192], "n_slice": [23, 35], "t_i": [23, 26, 35, 224], "often": [23, 28, 35, 39, 45, 47, 50, 61, 65, 74, 137, 144, 155, 159, 161, 178, 195, 197, 198, 201, 223, 224], "slice_direct": 23, "adjust_subsampl": [23, 133], "guess_slice_axis_and_direct": [23, 133], "interp_slice_tim": [23, 133], "nest": 23, "ideal": [23, 185, 200], "resample4d": [23, 133], "scanner_coord": [23, 133], "from_world": 23, "to_world": 23, "single_run_realign4d": [23, 133], "tr_from_head": [23, 133], "inconsist": [23, 145], "from_img": 24, "to_img": 24, "from_bin": 24, "256": [24, 38, 152], "to_bin": 24, "from_mask": 24, "to_mask": 24, "crl1": 24, "interp": [24, 126, 133, 138, 143, 147], "pv": 24, "renorm": [24, 29], "dist": [24, 29, 74, 174, 185], "assess": 24, "correl": [24, 29, 47, 133, 192, 224], "coeffici": [24, 39, 45, 47, 50, 85, 116, 120, 124, 133], "cr": [24, 94, 160], "ratio": [24, 39, 40, 49, 115, 120], "l1": 24, "mi": [24, 29], "mutual": 24, "nmi": [24, 29], "slr": 24, "supervis": 24, "measur": [24, 29, 36, 53, 87, 94, 96, 147, 152, 197, 224], "partial": [24, 50, 120, 174, 224], "tri": [24, 39, 64, 99, 126, 134, 143], "trilinear": 24, "rand": [24, 177], "joint_histogram": 24, "millimet": [24, 74, 79, 80, 81, 82, 152, 206, 223], "eval": [24, 133], "eval_gradi": [24, 133], "central": [24, 38, 186, 202], "finit": [24, 39, 85, 119], "eval_hessian": [24, 133], "explor": [24, 133, 197, 230], "success": [24, 39, 72, 121, 199], "set_fov": [24, 133], "corner": [24, 51], "automat": [24, 99, 155, 159, 169, 177, 178, 198, 210, 217], "adjust": [24, 47, 74, 104], "cubic": [24, 27, 39, 110], "box": [24, 67, 79, 80, 81, 82, 203], "approx_gradi": [24, 133], "differenti": [24, 39, 122, 224, 229], "approx_hessian": [24, 133], "approx_hessian_diag": [24, 133], "clamp": [24, 133], "fall": 24, "reset": [24, 161, 186], "anyth": [24, 39, 63, 66, 83, 161, 170, 178], "ideal_spac": [24, 133], "tune": [24, 145], "target": [24, 31, 32, 39, 61, 79, 80, 81, 82, 96, 137, 177, 205], "smallest_bounding_box": [24, 133], "msk": [24, 54], "smallest": [24, 110, 126], "smooth_imag": [24, 133], "sdata": 24, "configure_optim": [25, 133], "fhess": 25, "subdict": [25, 133], "dic": 25, "use_deriv": [25, 133], "glob_affin": 26, "x_i": 26, "homogen": [26, 32, 65, 74, 77, 223, 229], "sum_i": [26, 29, 41, 224], "w_i": 26, "left_compos": [26, 133], "cast_arrai": [27, 133], "move": [27, 39, 134, 144, 147, 149, 168, 174, 185, 186, 214, 226], "mov_voxel_coord": 27, "ref_voxel_coord": 27, "interp_ord": 27, "movimg": 27, "bring": [27, 137, 161], "goe": [27, 79, 80, 81, 82], "ref_vox_coord": 27, "aligned_img": 27, "reslic": [27, 85, 149, 207, 208, 209], "wrapper": [28, 39, 58, 84, 126, 131, 154, 230], "spacetimerealign": [28, 58, 133], "aff2eul": [28, 133], "euler": [28, 50], "aff2rot_zoom": [28, 133], "zoom": [28, 63], "space_time_realign": [28, 133], "slice_dim": 28, "slice_dir": 28, "make_figur": 28, "out_nam": [28, 65], "png": [28, 177, 193, 202, 216, 224], "_mc": 28, "n_times_point": 28, "bivari": 29, "loss": [29, 133], "nonlinear": [29, 46, 231], "regress": [29, 36, 39, 44, 45, 116, 117, 118, 133, 192, 224], "laplac": 29, "parzen": 29, "window": [29, 99, 103, 134, 156, 165, 174, 178, 180, 183, 190, 210, 213], "correlation2loglikelihood": [29, 133], "rho2": 29, "npt": 29, "proper": [29, 155], "overlap": 29, "through": [29, 39, 47, 61, 67, 69, 72, 79, 80, 81, 82, 86, 88, 90, 91, 116, 117, 137, 177, 178, 221, 227, 229], "2001": [29, 50], "dist2loss": [29, 133], "qi": 29, "qj": 29, "pointwis": 29, "sum_j": [29, 224], "ve": [30, 126, 137, 153, 161, 169, 170, 171, 175, 176, 184, 191, 229], "our": [30, 38, 63, 64, 65, 72, 74, 120, 134, 136, 137, 147, 153, 155, 166, 169, 171, 172, 176, 178, 179, 184, 185, 186, 188, 191, 194, 197, 200, 218, 223, 224, 227, 228, 229], "isn": [30, 178, 197], "bug": [30, 41, 129, 156, 157, 160, 161, 170, 180, 187, 195, 197], "func": [30, 39, 120, 126, 128, 133, 190], "That": [30, 39, 44, 47, 61, 90, 91, 134, 137, 145, 149, 156, 197, 229], "obj": [30, 39, 61, 63, 66, 68, 73, 75, 116, 132, 141, 161], "expos": [30, 201, 217], "xform": [30, 65, 77, 179], "check_typ": [31, 133], "accept_non": 31, "check_type_and_shap": [31, 133], "numpi": [31, 35, 45, 47, 50, 53, 61, 66, 69, 72, 79, 81, 82, 83, 85, 99, 102, 118, 125, 128, 131, 137, 149, 153, 158, 172, 176, 177, 178, 179, 181, 182, 184, 191, 202, 210, 215, 216, 217, 222, 223, 224, 225, 229], "simpl": [32, 35, 39, 46, 47, 50, 64, 112, 115, 116, 118, 126, 134, 139, 143, 150, 170, 177, 180, 186, 191, 201, 217, 223, 224, 229, 230], "physic": [32, 67, 80, 88, 96, 147, 152, 229], "function_rang": [32, 54, 61, 63, 64, 65, 67, 68, 133, 137, 222, 223, 229], "function_domain": [32, 61, 63, 64, 65, 67, 68, 133, 137, 222, 223, 229], "resample_img2img": [32, 133], "sourc": [32, 74, 103, 131, 156, 158, 172, 173, 174, 177, 178, 180, 181, 184, 185, 191, 195, 196, 197, 198, 202, 211, 216, 217, 220, 224, 225, 226], "anatfil": [32, 61, 72, 178, 222, 223], "io": [32, 61, 62, 75, 92, 96, 111, 113, 133, 161, 186, 192, 201, 225, 227, 231], "aimg_sourc": 32, "aimg_target": 32, "aimg": [32, 61], "resimg": 32, "3k": 33, "25": [33, 35, 39, 40, 45, 47, 65, 72, 118, 137, 222], "ngb_size": [33, 34], "ref_param": 33, "init_param": 33, "ppm": [34, 74], "multichannel": 34, "markov": 34, "detail": [34, 39, 44, 47, 65, 126, 155, 157, 159, 163, 164, 167, 168, 172, 177, 184, 190, 197, 198, 201, 218, 222, 225, 229], "regard": [34, 128, 145, 176, 195], "underli": [34, 38, 39, 64, 70, 131, 198, 201, 219], "On": [34, 90, 91, 161, 190, 227], "doi": [34, 38], "1016": [34, 38], "media": 34, "002": 34, "free_energi": [34, 133], "dx": [34, 50], "log_external_field": [34, 133], "logarithm": 34, "extern": [34, 74, 129], "normalized_external_field": [34, 133], "freez": 34, "set_markov_prior": [34, 133], "ve_step": [34, 133], "vm_step": [34, 133], "binarize_ppm": [34, 133], "map_from_ppm": [34, 133], "moment_match": [34, 133], "dat": 34, "glob_mu": 34, "glob_sigma": 34, "feed": 34, "dat_mu": 34, "dat_sigma": 34, "begin": [35, 137, 191, 224, 229], "unambigu": [35, 61, 65], "But": [35, 39, 63, 68, 118, 134, 136, 137, 138, 147, 149, 161, 185, 229], "mani": [35, 39, 54, 69, 88, 134, 136, 137, 145, 153, 167, 176, 177, 186, 190, 195, 197, 227], "regim": 35, "easi": [35, 39, 88, 116, 131, 134, 137, 145, 153, 167, 177, 183, 197, 201, 230], "know": [35, 39, 41, 63, 74, 79, 81, 116, 134, 136, 137, 138, 147, 152, 156, 161, 185, 195, 201, 219, 223, 229], "arang": [35, 48, 61, 63, 113, 114, 116, 126, 147], "conveni": [35, 39, 70, 110, 117, 126, 137, 145, 167, 178, 215], "st_01234": [35, 133], "st_02413": [35, 133], "Then": [35, 39, 138, 140, 147, 153, 154, 157, 159, 161, 170, 171, 172, 174, 176, 177, 178, 181, 182, 191, 226, 227], "st_03142": [35, 133], "ceil": 35, "nslice": [35, 149], "st_13024": [35, 133], "rare": [35, 128], "siemen": 35, "even": [35, 137, 145, 147, 152, 161, 170, 195, 224], "st_odd0_even1": [35, 133], "st_41302": [35, 133], "floor": 35, "st_42031": [35, 133], "down": [35, 113, 161, 162, 185, 230], "lowest": [35, 96], "st_43210": [35, 133], "odd": [35, 224], "seem": [35, 72, 84, 137, 145, 147, 224, 229], "radiologi": 35, "uiowa": 35, "edu": [35, 39, 146], "fmri_imag": [35, 116, 123], "html": [35, 53, 136, 137, 157, 172, 174, 177, 196, 198], "75": [35, 39, 137], "two_level_glm": [36, 133], "vy": 36, "s2": 36, "minu": [36, 110, 120], "bench_lips1d": [37, 133], "bench_lips2d": [37, 133], "bench_lips3d": [37, 133], "approach": [38, 39, 86, 89, 136, 198, 224], "benjamini": 38, "hochberg": [38, 176], "en": [38, 39, 47, 54, 121, 137, 157, 165], "wikipedia": [38, 39, 47, 54, 121, 137, 198], "org": [38, 39, 47, 54, 70, 121, 136, 137, 157, 174, 177, 184, 196, 198, 226, 227], "wiki": [38, 39, 47, 54, 121, 136, 137, 157, 196], "false_discovery_r": 38, "schwartzman": [38, 202], "dougherti": 38, "rf": [38, 156], "lee": 38, "ghahremani": 38, "je": [38, 220], "discoveri": [38, 202], "rate": [38, 111, 202], "jan": 38, "44": [38, 39, 202], "71": [38, 39, 137, 202], "82": [38, 39, 202], "pubm": 38, "pmid": 38, "18547821": 38, "04": [38, 50], "182": [38, 217], "behav": [38, 177, 202], "h_0": [38, 202], "la": 38, "oxford": 38, "yaroslav": 38, "halchenko": 38, "schwartzmann": [38, 202], "afp": [38, 202], "fdrcurv": [38, 133, 202, 214], "learn": [38, 133, 166, 197, 202, 214], "fraction": [38, 39, 85, 103, 104, 202, 207, 208, 209, 212], "prevent": [38, 160, 186, 202], "p0": [38, 202], "exp": [38, 39, 42, 65, 120, 202, 224, 230], "lp0": [38, 202], "sqsigma": [38, 202], "efp": [38, 202], "bar": [38, 131, 202, 217], "drawn": [38, 96, 99, 104, 202, 210], "fig": [38, 193, 202], "unnecessarili": [38, 202], "critic": [38, 153, 155, 176, 202], "uncorrected_threshold": [38, 133, 202, 214], "001": [38, 118, 202], "check_p_valu": [38, 133], "p_valu": [38, 84, 118, 133], "assur": 38, "fdr_threshold": [38, 133], "signific": [38, 86, 87, 94, 96, 147, 155], "critical_p_valu": 38, "gamma_gaussian_fit": [38, 133], "return_estim": 38, "disactiv": 38, "activ": [38, 50, 86, 87, 92, 95, 96, 97, 99, 100, 102, 103, 167, 174, 189, 192, 198, 210, 213, 214, 224], "nvox": [38, 96], "analys": [38, 39, 79, 81, 82, 92, 96, 118, 197, 198, 228], "quiet": 38, "bfp": 38, "ggmixtur": [38, 133, 192], "gggm": [38, 133], "gaussian_fdr": [38, 133], "gaussian_fdr_threshold": [38, 133], "smoothed_histogram_from_sampl": [38, 133], "nbin": 38, "three_classes_gmm_fit": [38, 133], "01": [38, 50, 54, 95, 104, 185], "prior_strength": 38, "fixed_scal": 38, "confid": [38, 45, 47, 94], "lock": 38, "rescal": [38, 111], "Not": [38, 39, 63, 72, 190], "rigor": [38, 153], "sympi": [39, 114, 126, 137, 181, 182, 184, 224], "symbol": [39, 110, 114, 126, 131, 137, 153, 224], "expr": [39, 126], "atomicexpr": 39, "atom": [39, 133, 136], "printabl": 39, "evalf": [39, 133], "evalfmixin": 39, "boolalg": 39, "dummi": 39, "express": [39, 61, 65, 79, 80, 81, 82, 114, 120, 126, 131, 137, 197, 204, 224, 229], "Or": [39, 65, 137, 143, 149, 160, 161, 177, 191, 224, 226], "multipli": [39, 44, 45, 47, 50, 132, 137, 152], "everyth": [39, 48, 96, 137, 145, 161, 174], "recarrai": [39, 66, 110], "familiar": [39, 137, 138, 147], "syntax": [39, 152, 153, 173, 177, 197, 227, 229, 230], "tabl": [39, 145, 173, 190], "www": [39, 50, 53, 120, 136, 157, 172, 177, 196, 198], "stat": [39, 40, 42, 83, 84, 86, 116, 118, 133, 160], "stanford": [39, 221], "jtaylo": [39, 137], "cours": [39, 50, 85, 110, 136, 137, 160, 167, 195, 224, 229], "stats191": 39, "supervisor": 39, "lm": 39, "x1": 39, "x3": 39, "intercept": [39, 47, 110], "51": [39, 137], "39": 39, "1989": 39, "54": [39, 191, 197], "3456": 39, "70": [39, 67, 99, 103, 137, 177, 210, 213], "69": [39, 137, 177], "4830": 39, "63": 39, "47": 39, "2961": 39, "78": [39, 103, 212], "66": [39, 161], "5148": 39, "55": [39, 220], "2420": 39, "67": 39, "56": 39, "3752": 39, "4125": 39, "5494": 39, "61": [39, 161], "2867": 39, "53": 39, "58": 39, "3074": 39, "60": [39, 118], "2340": 39, "13": [39, 50, 63, 65, 118], "62": 39, "42": [39, 50, 161, 177], "2604": 39, "14": [39, 54, 63, 124, 137, 161, 216, 224, 227], "83": 39, "45": [39, 160], "3735": 39, "77": 39, "72": [39, 65], "5544": 39, "16": [39, 54, 63, 69, 114, 119, 120, 130, 185, 195, 197, 222, 223, 224], "6480": 39, "17": [39, 54, 62, 63, 113, 185], "85": [39, 67], "5865": 39, "4500": 39, "19": [39, 47, 48, 54, 63, 185], "57": 39, "3990": 39, "20": [39, 48, 50, 54, 62, 63, 67, 96, 97, 110, 113, 115, 130, 133, 135, 137, 138, 139, 147, 172, 173, 180, 183, 187, 189, 191, 192, 194, 216, 225], "3132": 39, "21": [39, 54, 61, 62, 63, 64, 113, 134, 138, 147], "40": [39, 61, 67, 110, 137, 152, 177, 222, 223], "34": [39, 65], "1360": 39, "22": [39, 63, 217], "3782": 39, "23": [39, 50, 63, 147, 191, 197, 216], "50": [39, 61, 83, 110, 114, 118, 137, 138, 185, 191, 224], "3300": 39, "37": 39, "2146": 39, "48": [39, 130, 137, 160, 191], "2592": 39, "4851": 39, "27": [39, 50], "74": [39, 47], "5550": 39, "28": [39, 126], "2565": 39, "29": [39, 50, 191, 197], "6035": 39, "59": 39, "4838": 39, "attr": 39, "With": [39, 58, 73, 99, 138, 147, 152, 153, 197, 210], "rec": [39, 47], "43": [39, 222], "92": [39, 67, 137], "73": [39, 137, 197], "68": [39, 47], "76": 39, "86": [39, 67, 137], "84": [39, 137], "35": [39, 96, 120, 160], "81": [39, 185], "49": 39, "41": [39, 72, 177, 191, 222], "31": [39, 64, 67, 191], "80": [39, 118], "79": [39, 103, 161, 212], "46": [39, 160], "36": [39, 50, 137, 223], "65": 39, "52": [39, 217, 220], "33": [39, 72, 197, 222], "88": [39, 65], "38": [39, 47, 99, 103, 210, 213], "i8": 39, "x2": 39, "x4": 39, "x5": 39, "x6": 39, "_b0": [39, 126], "_b1": [39, 126], "_b2": [39, 126], "_b3": [39, 126], "f8": [39, 66, 190], "ti": [39, 137], "adjoint": [39, 133], "apart": [39, 133], "poli": 39, "never": [39, 158, 176, 178], "_arg": 39, "__new__": 39, "overrid": [39, 61, 75, 88, 90, 91, 97, 216], "cot": 39, "abc": 39, "args_cnc": [39, 133], "cset": 39, "split_1": 39, "commut": 39, "oo": 39, "treat": [39, 110, 122, 145], "mul": 39, "singleton": 39, "as_base_exp": [39, 133], "as_coeff_add": [39, 133], "ration": 39, "summat": 39, "as_coeff_mul": [39, 133], "dep": [39, 181], "individu": [39, 40, 65, 66, 74, 85, 86, 87, 92, 93, 94, 110], "as_two_term": 39, "as_independ": [39, 133], "as_coeff_expon": [39, 133], "as_coeffici": [39, 133], "word": [39, 78, 79, 80, 81, 82, 160, 161, 177, 203, 204, 205, 206, 224], "separ": [39, 65, 99, 102, 133, 134, 137, 152, 161, 177, 196, 210], "possibl": [39, 48, 61, 63, 65, 74, 75, 79, 80, 81, 82, 84, 90, 102, 118, 136, 137, 138, 139, 147, 159, 161, 167, 174, 186, 196, 198, 203, 221, 224], "coeff": [39, 50, 133], "polytool": 39, "coeff_monomi": 39, "monomi": 39, "nth": 39, "power": [39, 41, 50, 133, 230], "exactli": [39, 99, 136, 152, 179, 185, 193, 210], "could": [39, 61, 68, 118, 134, 137, 138, 145, 147, 149, 152, 178, 186, 201, 224, 226, 229], "_": [39, 53, 136, 137, 161, 164, 166, 170, 171, 174, 177, 224], "just": [39, 47, 61, 63, 65, 68, 74, 111, 116, 134, 137, 138, 147, 149, 161, 162, 163, 166, 169, 170, 171, 178, 185, 190, 191, 193, 223, 224, 229], "exact": [39, 131], "zz": 39, "sinc": [39, 134, 137, 152, 161, 170, 181, 229], "as_coefficients_dict": [39, 133], "sym": 39, "defaultdict": 39, "inquiri": 39, "about": [39, 49, 63, 65, 68, 79, 80, 81, 82, 92, 133, 137, 138, 139, 144, 147, 155, 156, 161, 170, 175, 176, 178, 185, 193, 194, 195, 197, 229], "as_content_primit": [39, 133], "radic": 39, "clear": [39, 72, 137, 176, 195], "recurs": [39, 131], "content": [39, 61, 71, 110, 134, 136, 160, 164, 168, 185, 190, 192, 217, 226], "primit": [39, 133, 145], "foo": [39, 66, 131, 161], "canon": [39, 111, 114, 119, 120, 145, 193, 224, 229], "preserv": [39, 61, 65], "expand_mul": 39, "eq": 39, "join": [39, 51, 72, 153], "121": [39, 67], "as_dummi": [39, 133], "appear": [39, 50, 53, 65, 68, 74, 137, 169, 177, 190], "assumpt": [39, 134, 201], "bound_symbol": 39, "real": [39, 61, 64, 65, 79, 81, 84, 102, 137, 139, 161, 180, 195, 229], "_0": 39, "is_real": [39, 133], "_r": 39, "as_expr": [39, 133], "gen": [39, 69, 193], "polynomi": [39, 50, 111, 224], "as_poli": [39, 133], "hint": [39, 157], "mostli": [39, 74, 138, 147], "naiv": 39, "obtain": [39, 40, 44, 76, 78, 89, 217], "separatevar": 39, "pow": 39, "expand": [39, 114, 133, 167, 198], "noncommut": 39, "regardless": [39, 121], "forc": [39, 60, 65, 102, 137, 169], "as_add": 39, "expand_log": 39, "n3": 39, "els": [39, 65, 137, 161, 170, 185, 190, 191], "how": [39, 45, 47, 54, 68, 79, 81, 96, 116, 134, 137, 138, 144, 147, 149, 152, 153, 158, 167, 169, 170, 173, 177, 178, 179, 180, 185, 194, 195, 197, 201, 223, 224, 228, 229], "former": 39, "latter": [39, 62, 113], "free_symbol": [39, 133], "keep": [39, 63, 85, 90, 91, 156, 161, 170, 177, 178, 196, 197, 207, 209], "track": [39, 131, 160, 169, 177, 185, 186, 197, 198], "send": [39, 134, 137, 170], "as_leading_term": [39, 133], "logx": 39, "cdir": 39, "_eval_as_leading_term": 39, "as_numer_denom": [39, 133], "denomin": [39, 41, 47], "stub": 39, "as_ordered_factor": [39, 133], "as_ordered_term": [39, 133], "as_powers_dict": [39, 133], "expon": [39, 43, 50], "caution": 39, "lost": [39, 137, 161], "guarante": 39, "as_real_imag": [39, 133], "deep": [39, 82], "imaginari": 39, "confus": [39, 68, 137, 138, 147, 161], "im": [39, 61, 137, 170], "as_set": [39, 133], "rewrit": [39, 133, 224], "And": [39, 68, 143, 177, 181, 185, 193, 195, 217, 223], "interv": [39, 45, 47, 50, 86, 96, 110, 114, 126, 198, 224], "union": [39, 51, 69, 85, 118, 209], "as_term": [39, 133], "aseri": [39, 133], "hir": 39, "earli": [39, 176], "nicer": 39, "normalis": 39, "directli": [39, 126, 152, 154, 159, 160, 161, 169, 177, 201, 224, 229], "induc": [39, 47], "gruntz": 39, "majorli": 39, "mrv": 39, "overal": [39, 47], "most": [39, 53, 61, 63, 65, 66, 72, 118, 119, 134, 136, 137, 138, 145, 147, 158, 161, 165, 178, 179, 185, 195, 196, 198, 201, 224, 229], "rapidli": 39, "subexpress": 39, "till": 39, "dominik": 39, "proc": 39, "1993": 39, "symp": 39, "algebra": [39, 197, 230], "pp": [39, 220], "239": 39, "244": 39, "thesi": [39, 195], "p90": 39, "asymptotic_expans": 39, "assumptions0": [39, 133], "besid": [39, 88], "python": [39, 66, 129, 131, 134, 136, 137, 145, 147, 153, 154, 157, 158, 177, 178, 180, 181, 182, 184, 185, 186, 189, 191, 193, 194, 195, 198, 199, 200, 202, 216, 220, 221, 226, 229, 230], "typeinfo": 39, "extended_neg": 39, "extended_nonneg": 39, "extended_nonposit": 39, "extended_nonzero": 39, "extended_posit": 39, "extended_r": 39, "hermitian": 39, "nonneg": 39, "nonposit": 39, "truli": 39, "smaller": [39, 85, 87, 93, 103, 134, 212], "piec": [39, 84, 137, 196], "request": [39, 134, 160, 161, 169, 173, 180, 186], "demonstr": [39, 84, 149], "numbersymbol": 39, "zoo": 39, "infin": [39, 50], "special": [39, 90, 91, 131, 134, 197, 221, 230], "implicitli": [39, 229], "too": [39, 92, 137, 197], "Be": [39, 47], "care": [39, 47, 138, 147, 152, 178, 184], "your": [39, 44, 47, 53, 131, 137, 153, 155, 156, 158, 160, 164, 167, 168, 169, 170, 172, 176, 177, 178, 181, 184, 185, 190, 191, 193, 195, 197, 201, 226, 227, 230], "implicit": 39, "is_integ": [39, 133], "appliedundef": 39, "binary_symbol": [39, 133], "eg": [39, 221], "indexedbas": 39, "cancel": [39, 133], "canonical_vari": [39, 133], "clash": 39, "lambda": [39, 40, 65, 69, 116, 137, 229], "classmethod": [39, 61, 62, 104, 113], "class_kei": [39, 133], "nice": [39, 145, 160, 167, 170, 190], "_first": 39, "explicit": [39, 65, 74, 88, 91, 99, 103, 137, 210, 213], "front": [39, 45, 47, 50, 137, 147, 227], "factor_term": 39, "distribute_order_term": 39, "simplifi": [39, 133, 191, 224, 230], "combsimp": [39, 133], "sorted_class": 39, "compute_leading_term": [39, 133], "could_extract_minus_sign": [39, 133], "liter": [39, 177], "though": [39, 47, 145, 147, 155, 178, 195, 224], "put": [39, 62, 63, 70, 74, 88, 104, 112, 113, 117, 137, 149, 152, 174, 177, 178, 186, 190, 197, 227], "signsimp": 39, "queri": [39, 145, 201], "count_op": [39, 133], "oper": [39, 51, 53, 61, 64, 88, 133, 143, 145, 147, 152, 191, 195, 229], "default_assumpt": [39, 133], "diff": [39, 133, 155, 160, 161, 167, 169, 224], "dir": [39, 70, 92, 133, 226], "doit": [39, 133], "speci": 39, "exclud": [39, 69, 169], "dummy_eq": [39, 133], "dummy_index": [39, 133], "failing_express": 39, "did": [39, 88, 137, 161, 184, 191, 194, 195], "maxn": 39, "chop": 39, "strict": [39, 74], "quad": 39, "accuraci": 39, "digit": 39, "substitut": [39, 126, 127, 137], "temporari": [39, 70, 72, 88, 134, 176], "subresult": 39, "magnitud": [39, 111], "purpos": [39, 66, 90, 104, 161, 195, 198, 219], "000100000000000000": 39, "precisionexhaust": 39, "maxprec": 39, "choos": [39, 53, 99, 137, 152, 161, 185, 191, 194, 195, 210], "quadratur": 39, "tanh": 39, "sinh": 39, "oscillatori": 39, "osc": 39, "debug": [39, 173, 176, 180], "advers": 39, "1e16": 39, "truncat": 39, "happen": [39, 65, 155, 186], "00000000000000": [39, 137], "modulu": 39, "power_bas": 39, "power_exp": 39, "expr_free_symbol": [39, 133], "extract_addit": [39, 133], "toward": [39, 88, 91, 147], "extract_multipl": [39, 133], "extract_branch_factor": [39, 133], "allow_half": 39, "exp_polar": 39, "group": [39, 40, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 133, 134, 137, 144, 145, 176, 188, 190, 192, 198, 216, 221, 224, 229], "fourier_seri": [39, 133], "fourier": [39, 110, 126, 230], "sine": [39, 126], "cosin": [39, 111, 126], "fp": [39, 133, 186], "formal": [39, 223, 224, 229], "fromit": [39, 133], "gammasimp": [39, 133], "geto": [39, 133], "getn": [39, 133], "pattern": [39, 86, 96, 127, 198], "knowledg": [39, 134, 147], "lopen": 39, "has_fre": [39, 133], "has_xfre": [39, 133], "report": [39, 158, 178, 180], "invert": [39, 45, 47, 51, 65, 133, 192, 229], "mod": [39, 177], "mod_invers": 39, "is_add": [39, 133], "is_algebraicnumb": [39, 133], "is_atom": [39, 133], "is_boolean": [39, 133], "is_deriv": [39, 133], "is_dummi": [39, 133], "is_equ": [39, 133], "is_float": [39, 133], "is_funct": [39, 133], "is_index": [39, 133], "is_matadd": [39, 133], "is_matmul": [39, 133], "is_matrix": [39, 133], "is_mul": [39, 133], "is_not": [39, 133], "is_numb": [39, 133], "is_numbersymbol": [39, 133], "is_ord": [39, 133], "is_piecewis": [39, 133], "is_point": [39, 133], "is_poli": [39, 133], "is_pow": [39, 133], "is_rat": [39, 133], "is_rel": [39, 133], "is_symbol": [39, 133], "is_vector": [39, 133], "is_wild": [39, 133], "is_algebra": [39, 133], "is_algebraic_expr": [39, 133], "is_rational_funct": [39, 133], "exponenti": [39, 41, 42, 195, 224], "algebraic_express": 39, "nontrivi": 39, "simplif": 39, "is_antihermitian": [39, 133], "is_commut": [39, 133], "is_compar": [39, 133], "is_complex": [39, 133], "is_composit": [39, 133], "is_const": [39, 133], "flag": [39, 65, 161, 170, 184, 226], "constanc": 39, "conclus": 39, "is_even": [39, 133], "is_extended_neg": [39, 133], "is_extended_nonneg": [39, 133], "is_extended_nonposit": [39, 133], "is_extended_nonzero": [39, 133], "is_extended_posit": [39, 133], "is_extended_r": [39, 133], "is_finit": [39, 133], "is_hermitian": [39, 133], "is_hypergeometr": [39, 133], "is_imaginari": [39, 133], "is_infinit": [39, 133], "is_irr": [39, 133], "is_meromorph": [39, 133], "meromorph": 39, "intend": [39, 53, 94, 152, 221], "quick": [39, 92, 170, 172, 190, 197], "decis": [39, 83, 118, 195], "multivalu": 39, "everywher": 39, "endpoint": 39, "is_neg": [39, 133], "is_noninteg": [39, 133], "is_nonneg": [39, 133], "is_nonposit": [39, 133], "is_nonzero": [39, 133], "is_odd": [39, 133], "is_polar": [39, 133], "is_polynomi": [39, 133], "abl": [39, 134, 160, 169, 184, 186, 190, 197, 229], "is_posit": [39, 133], "is_prim": [39, 133], "rational_funct": 39, "is_scalar": [39, 133], "is_transcendent": [39, 133], "is_zero": [39, 133], "undefinedkind": 39, "leadterm": [39, 133], "xlim": 39, "lseri": [39, 133], "exaxmpl": 39, "termin": [39, 184, 191, 227], "advantag": [39, 137, 153, 197], "nseri": [39, 133], "ask": [39, 137, 153, 155, 156, 164, 174, 176, 194, 195, 196], "wild": [39, 195], "xreplac": [39, 133], "p_": 39, "q_": 39, "r_": 39, "solv": [39, 40, 197, 229], "repl_dict": 39, "x_": [39, 224, 229], "_eval_nseri": 39, "innermost": 39, "build": [39, 50, 90, 94, 134, 152, 153, 173, 174, 177, 180, 181, 183, 186, 190, 193, 197, 199, 219, 224, 225, 228, 230], "advanc": [39, 50, 168], "disadvantag": [39, 178, 197], "perhap": [39, 161, 185, 195, 224], "shorter": [39, 155], "met": 39, "harder": 39, "120": 39, "traceback": [39, 63, 65, 66, 72, 136, 137], "recent": [39, 63, 65, 66, 72, 136, 137, 145, 165, 182, 190, 195], "poleerror": 39, "nsimplifi": [39, 133], "powsimp": [39, 133], "radsimp": [39, 133], "ratsimp": [39, 133], "rcall": [39, 133], "simul": [39, 96, 97, 192, 214], "abus": [39, 229], "notat": [39, 64, 229], "refin": [39, 133], "removeo": [39, 133], "travers": 39, "fashion": 39, "caus": [39, 147, 154, 193], "succe": [39, 195], "receiv": [39, 88, 90, 134], "capabl": 39, "rule": [39, 131, 134, 167, 196], "setup": [39, 153, 154, 157, 184, 185, 186, 189, 190, 226], "tan": 39, "newtyp": 39, "intuit": [39, 138, 147], "rather": [39, 47, 53, 65, 90, 92, 120, 126, 137, 138, 147, 169, 171, 190, 197, 198, 201, 215, 224, 229], "twice": 39, "tricki": [39, 185], "trigonometr": 39, "combinatori": 39, "_eval_rewrit": 39, "mysin": 39, "def": [39, 128, 137, 178, 229], "_eval_rewrite_as_": 39, "support": [39, 50, 72, 81, 84, 110, 116, 117, 118, 126, 129, 152, 177, 186, 195, 196, 197, 198, 221], "backward": [39, 61, 156], "reason": [39, 53, 161, 178, 197, 201, 224, 227], "discourag": 39, "_eval_rewrite_as_co": 39, "round": [39, 68, 133, 227], "decim": 39, "isinst": [39, 62, 65, 136, 179], "123": 39, "lazi": 39, "bi": 39, "stand": [39, 137, 147], "typeerror": [39, 66, 72, 126, 136], "alter": 39, "sort_kei": [39, 133], "sympifi": 39, "op": 39, "tie": 39, "default_sort_kei": 39, "previou": [39, 88, 116, 152, 161, 174, 191], "wildcard": 39, "condit": [39, 51, 92, 94, 110, 112, 119, 158, 178], "rep": 39, "delai": [39, 111, 114, 119, 120, 174, 224], "nan": [39, 85, 90, 91, 126], "subsequ": [39, 92, 178], "unord": 39, "break": [39, 156], "unsort": 39, "333333333333333333333": 39, "333333333333333314830": 39, "ensur": [39, 53, 65, 120, 161, 224], "taylor_term": [39, 133], "previous_term": 39, "to_nnf": [39, 133], "transpos": [39, 61, 75, 133, 137, 138, 223], "trigsimp": [39, 133], "hack2": 39, "occurr": [39, 86, 87, 111, 112, 131], "invalid": [39, 66], "char": [39, 84], "qualit": 39, "charact": [39, 131], "coef": [39, 50, 118, 120, 133], "return_float": [39, 47], "construct": [39, 63, 64, 65, 74, 110, 116, 121, 126, 134, 137, 152, 229], "getparam": [39, 133], "design_expr": [39, 133], "de": [39, 65, 118, 224], "cmatric": 39, "static": [39, 64, 65, 104, 198], "fromcol": [39, 133], "col": [39, 45, 47], "s1": [39, 126], "f1": [39, 126], "f2": 39, "descr": 39, "y_a": [39, 229], "y_b": 39, "x_3": 39, "x_4": 39, "x_5": 39, "fromrec": [39, 133], "drop": [39, 54, 62, 63, 65, 68, 154, 159, 190, 230], "qualtiatitv": 39, "get_term": [39, 133], "retriev": [39, 134, 145], "main_effect": [39, 133], "stratifi": [39, 133], "letter": [39, 137], "_theta0": 39, "a_x": 39, "_theta1": 39, "a_i": [39, 224], "newf": 39, "st": [39, 50, 152, 160, 177, 202, 216], "fg": [39, 126], "newform": 39, "Its": [39, 137, 198, 229], "seq": [39, 132], "subj": 39, "make_recarrai": [39, 133], "subj_factor": 39, "littl": [39, 71, 137, 161, 167, 197, 229], "don": [39, 61, 63, 65, 74, 136, 137, 138, 143, 147, 155, 161, 162, 163, 170, 178, 195, 197, 226, 227], "doctest": [39, 158, 174, 178, 189], "_s2_0": 39, "_s2_1": 39, "meant": [39, 62, 64, 65, 88, 113, 118, 137], "emul": 39, "hand": [39, 47, 143], "xval": 39, "contrast_from_cols_or_row": [39, 133], "pseudo": [39, 47, 84], "pinv": [39, 83], "satisfi": [39, 61, 90, 195], "known": [39, 40, 45, 47, 53, 68, 137, 179, 195, 224], "meaning": [39, 61, 74, 143, 156, 177], "project": [39, 54, 134, 136, 145, 161, 163, 166, 167, 175, 186, 190, 194, 195, 197, 198, 199, 200, 221, 227, 230], "getterm": [39, 133], "is_factor": [39, 133], "is_factor_term": [39, 133], "is_formula": [39, 133], "is_term": [39, 133], "make_dummi": [39, 133], "dum": 39, "obsolet": 39, "drop_name_dim": 39, "_novalu": 39, "cast": [39, 65, 66, 83, 177, 201], "machin": [39, 153, 167, 174, 178, 185, 186], "byte": [39, 134, 137], "wv": 39, "natural_splin": [39, 110, 133], "knot": [39, 110], "125": 39, "343": 39, "216": 39, "ns_1": 39, "ns_2": 39, "ns_3": 39, "ns_4": 39, "ns_5": 39, "ns_6": 39, "enforc": [39, 126, 137, 160], "rthan": 39, "e1": 40, "e2": 40, "v1": [40, 84, 145], "v2": [40, 84, 165], "500": 40, "randn": [40, 118], "generate_data": [40, 133], "t1": [40, 99, 103, 120, 134, 201, 210, 213], "one_sample_ttest": [40, 133], "n_iter": [40, 86], "t2": [40, 120], "t_stat": [40, 133], "assert": [40, 62, 113, 147, 149, 160, 179], "quantiti": 40, "n_effect": 40, "launch": [40, 191], "n_test": 40, "logl": [40, 44, 45, 47, 118, 133], "predict": [40, 41, 44, 45, 46, 47, 133], "log_likelihood": 40, "score": [40, 44, 45, 47, 51, 83, 84, 95, 96, 98, 118, 133], "check_arrai": [40, 133], "n_reg": [40, 119], "mfx_stat": [40, 133], "return_t": 40, "return_f": 40, "return_effect": 40, "return_var": 40, "n_regressor": [40, 111, 118], "tstat": [40, 133], "fstat": [40, 133], "one_sample_ftest": [40, 133], "ssociat": 40, "hoc": 40, "t_variat": 40, "two_sample_ftest": [40, 133], "two_sample_ttest": [40, 133], "logit": [41, 133], "trial": [41, 43], "devianc": [41, 44, 133], "dev": [41, 181, 185, 193, 227], "y_i": 41, "mu_i": 41, "devresid": [41, 133], "resid": [41, 47, 49, 66, 116, 123, 133], "eta": 41, "predictor": [41, 42, 47], "cdflink": [41, 133], "cloglog": [41, 133], "tol": [41, 42, 43, 44, 53, 65, 124, 133, 149], "varfunc": [41, 133, 192], "irl": 41, "wl": [41, 44, 47], "glm": [41, 42, 95, 110, 116, 117, 133, 192, 225, 231], "gam": 41, "pearson": [41, 44, 47], "resid_p": 41, "variancefunct": [41, 133], "dbn": 42, "_continuous_distn": 42, "norm_gen": 42, "cdf": [42, 145], "ppf": 42, "clip": 42, "logist": 42, "pclip": 42, "complementari": 42, "derivatv": 42, "fab": 43, "wlsmodel": [44, 133], "olsmodel": [44, 45, 116, 133], "likelihoodmodel": [44, 47, 133], "famili": [44, 133, 192], "cont": [44, 133], "unnorm": 44, "old_model": 44, "estimate_scal": [44, 133], "whiten": [44, 47, 133], "regressionresult": [44, 118, 133], "has_intercept": [44, 47, 133], "nuisanc": [44, 45, 47], "df_model": [44, 45, 47], "info": [44, 47, 93, 175], "loglikelihood": [44, 47], "loglf": [44, 47], "ell": [44, 47], "frac": [44, 47, 177, 224], "hat": [44, 47], "text": [44, 47, 97, 104, 136, 160, 161, 169, 173, 174, 216, 224, 226, 227], "sse": [44, 46, 47, 133], "plug": [44, 47], "technic": [44, 47, 167], "profil": [44, 47, 176, 191], "green": [44, 47], "econometr": [44, 47], "5th": [44, 47, 74], "ed": [44, 47, 52], "2003": [44, 47], "graient": [44, 47], "df_num": [45, 47], "df_den": [45, 47], "parametr": [45, 83, 118, 120, 198, 224], "asarrai": [45, 61, 62, 63, 69, 83, 113, 116, 123, 141, 152, 186], "dtheta": 45, "dispers": [45, 47, 119, 120], "aic": [45, 47, 133], "akaik": [45, 47], "schwarz": [45, 47], "fcontrast": [45, 47, 117, 133], "invcov": [45, 47], "px": [45, 47], "ol": [45, 47, 83, 118, 133, 226], "nois": [45, 47, 97, 122, 178, 216, 224], "f_re": [45, 47], "tcontrast": [45, 47, 116, 117, 133], "sd": [45, 47, 49, 116, 117], "conf_int": [45, 47, 133], "ie": [45, 47, 97, 201, 216], "95": [45, 47, 94, 126], "vcov": [45, 47, 133], "ci": [45, 47, 160, 174, 178], "todo": [45, 47, 90, 93, 114, 120, 180, 187], "standard_norm": [45, 47, 61, 65, 125], "stan": [45, 47], "hstack": [45, 47, 110, 118, 137], "confidence_interv": [45, 47], "wald": [45, 47], "complic": [45, 47, 68, 116, 126, 161], "n_voxel": [45, 47, 118], "lai": [45, 149], "grad": 46, "nl": 46, "nxp": 46, "qx1": 46, "nxq": 46, "df_i": 46, "dtheta_j": 46, "f_i": [46, 224], "getz": [46, 133], "getomega": [46, 133], "omega": 46, "y_predict": 46, "likelihoodmodelresult": [47, 116, 117, 133], "prewhiten": 47, "introduct": [47, 139, 167, 168, 173, 188, 192, 225], "dougla": 47, "montgomeri": 47, "elizabeth": 47, "peck": 47, "geoffrei": 47, "vine": 47, "wilei": 47, "oslmodel": 47, "rho": [47, 116, 122], "autoregress": 47, "fromarrai": [47, 61, 133], "dmtx": [47, 97, 111, 216], "iterative_fit": [47, 133], "yule_walk": [47, 133], "df": [47, 49], "df_resid": 47, "61530877": 47, "01542645": 47, "72660832": 47, "06201457": 47, "7220361": 47, "05365352": 47, "72229201": 47, "05408193": 47, "722278": 47, "05405838": 47, "59564228": 47, "58562172": 47, "0890515": 47, "45429252": 47, "58562172384377043": 47, "16953449108110835": 47, "4542925165805847": 47, "4216": 47, "810299725842": 47, "reiniti": 47, "autom": [47, 134, 137, 158, 172, 173, 190, 198], "stage": [47, 161, 176, 221], "wx": [47, 195], "pseudoinvers": 47, "ultim": [47, 185, 197, 224], "ordinari": 47, "14285714": 47, "98019606": 47, "87867287": 47, "14285714286": 47, "14062281591": 47, "87867287326": 47, "4607843137": 47, "wdesign": 47, "calc_beta": 47, "moor": 47, "penros": 47, "normalized_cov_beta": 47, "__init___": 47, "wy": 47, "wresid": 47, "summar": [47, 195], "f_overal": [47, 133], "fcontrastresult": [47, 133], "mse": [47, 118, 133], "msr": [47, 133], "r2": [47, 133], "textbook": 47, "davidson": 47, "mackinnon": 47, "r2_adj": [47, 133], "ssr": [47, 133], "sst": [47, 133], "tcontrastresult": [47, 133], "norm_resid": [47, 133], "suppos": [47, 65, 138, 144, 147, 161, 223, 224], "d_i": 47, "e_i": [47, 229], "ms_e": 47, "662": 47, "presum": [47, 53, 114], "0952381": 47, "91666667": 47, "35684428": 47, "0652652": 47, "91666666667": 47, "41224801095": 47, "06526519708": 47, "9986072423": 47, "ar_bias_correct": [47, 133], "invm": 47, "slight": 47, "due": 47, "worsley2002": 47, "appendix": 47, "potenti": [47, 65, 74, 145, 195], "worslei": [47, 50, 54, 114, 199, 220, 221], "liao": [47, 114, 115], "aston": [47, 114], "petr": 47, "duncan": [47, 114], "moral": 47, "evan": [47, 114], "2002": [47, 114, 115, 199], "ar_bias_corrector": [47, 133], "mayb": [47, 61, 73, 137, 161, 184, 190], "isestim": [47, 133], "vstack": 47, "verifi": [47, 48, 65, 186, 191], "tf": [47, 63, 65, 66, 68], "unbias": [47, 118], "yule": 47, "walker": 47, "mle": 47, "autoregressive_moving_average_model": 47, "autocorrel": 47, "acf": 47, "lag": 47, "r_inv": 47, "ar_model": 47, "calculation_of_the_ar_paramet": 47, "ival": 48, "simplest": [48, 160, 170, 198, 201], "ecdf": [48, 133], "mad": [48, 133], "6745": 48, "median": [48, 88, 90, 91], "absolut": [48, 53], "monotone_fn_invert": [48, 133], "fn": [48, 117], "monoton": 48, "linearli": [48, 126], "estimate_varatio": [49, 133], "poly1d": 50, "theoret": [50, 185], "ec": 50, "nsf": 50, "grant": [50, 195, 196, 199], "dm": 50, "0405970": 50, "detect": [50, 143, 169, 198, 217, 224], "cone": 50, "arxiv": 50, "1207": 50, "3840": 50, "math": [50, 120, 173], "2013": [50, 86, 94, 119], "1629": 50, "1656": 50, "multivari": [50, 198], "0803": 50, "1708": 50, "annal": 50, "dfn": 50, "pvalu": [50, 51, 83, 84, 98, 123, 133], "quasi": [50, 133], "2pi": 50, "dfd": 50, "chi": 50, "supremum": 50, "intrins": 50, "prepend": [50, 65, 191], "region": [50, 84, 86, 88, 90, 91, 92, 94, 95, 96, 190, 198, 224], "c_or_r": 50, "premultipli": 50, "aris": [50, 176], "linspac": [50, 110, 114, 224], "101": [50, 67, 110], "000000": 50, "allclos": [50, 61, 65, 120, 125, 126], "change_expon": [50, 133], "_pow": 50, "denom_poli": [50, 133], "11111111e": 50, "48148148e": 50, "07407407e": 50, "02": [50, 110, 114, 120], "33333333e": 50, "66666667e": 50, "00000000e": 50, "00": 50, "03333333": 50, "antideriv": 50, "indefinit": 50, "polyint": 50, "document": [50, 72, 134, 136, 137, 153, 156, 173, 174, 175, 178, 180, 187, 188, 190, 194, 195, 196, 198, 200, 201, 214, 226, 227, 229], "f_": 50, "t_dfd": 50, "kuri": 50, "takemura": 50, "multilinear": 50, "ann": 50, "328": 50, "371": 50, "latenc": 50, "hemodynam": [50, 111, 119, 120, 231], "649": 50, "654": 50, "hermit": 50, "h_j": 50, "worsley1994": 50, "q_poli": 50, "1994": 50, "excurs": 50, "ball_search": [50, 133], "ball": [50, 91], "binomi": [50, 133], "pascal": 50, "triangl": [50, 88, 136], "mu_bal": [50, 133], "curvatur": 50, "mu_j": 50, "b_n": 50, "lipschitz": 50, "kill": 50, "mu_spher": [50, 133], "s_r": 50, "chapter": 50, "adler": 50, "geometri": 50, "scale_spac": [50, 133], "kappa": [50, 96], "siegmund": 50, "stationari": 50, "608": 50, "639": 50, "mcgill": [50, 120, 221], "ca": [50, 120], "keith": [50, 54, 120, 199, 221], "spherical_search": [50, 133], "spheric": [50, 83, 95], "volume2bal": [50, 133], "check_cast_bin8": [51, 133], "uint8": [51, 72, 186], "bin8_arr": 51, "face": [51, 224], "triangul": 51, "cube": [51, 137, 152], "tetrahedra": 51, "cube_with_strides_cent": [51, 133], "stride": [51, 130, 147], "agre": [51, 65, 137, 138, 147, 196], "bool_": [51, 54, 130], "simplici": 51, "flatten": 51, "decompose2d": [51, 133], "decompose3d": [51, 133], "join_complex": [51, 133], "multiple_fast_inv": [51, 133], "overwritten": 51, "linalgerror": 51, "linalg": [51, 53, 217, 230], "multiple_mahalanobi": [51, 133], "mahalanobi": 51, "stack": [51, 104, 110], "sqd": 51, "test_ec2": [51, 133], "test_ec3": [51, 133], "z_score": [51, 118, 133], "euclidean_dist": [52, 133], "full_rank": [53, 133], "realli": [53, 137, 190, 229], "fx": 53, "matrix_rank": [53, 133], "matlab": [53, 133, 138, 147, 159, 192, 197, 198, 221, 230], "decemb": 53, "datatyp": 53, "defici": [53, 197], "roundoff": 53, "prefer": [53, 61, 73, 127, 137, 153, 154, 161, 178, 194, 197, 224, 227], "uncertain": 53, "golub": 53, "van": 53, "loan": 53, "_matrix": 53, "computations_": 53, "baltimor": 53, "john": [53, 137, 177, 195, 196, 198, 199, 221], "hopkin": 53, "univers": [53, 181, 221], "press": [53, 120], "1996": 53, "mathwork": 53, "help": [53, 134, 143, 144, 156, 161, 163, 165, 167, 172, 176, 185, 190, 197, 199, 226, 229], "techdoc": 53, "ref": [53, 149, 161, 177, 224], "pos_recipr": [53, 133], "reciproc": 53, "therefor": [53, 65, 90, 121, 126, 136, 143, 179, 197, 223, 227, 229], "rx": 53, "recipr0": [53, 133], "princip": [54, 114, 198], "orthonorm": [54, 124], "li": [54, 61], "greatest": 54, "decorrel": 54, "techniqu": [54, 158, 178, 198], "eigenvector": 54, "design_keep": 54, "design_resid": 54, "tol_ratio": 54, "msk_shape": 54, "basis_project": 54, "perpendicular": 54, "xz": 54, "basis_vector": 54, "pcnt_var": 54, "pca_imag": [54, 133], "fmristat": [54, 120, 133, 141, 192, 199], "principal_component_analysi": 54, "inspir": 54, "particularli": [54, 197, 230], "variou": [54, 65, 97, 120, 134, 143, 149, 176, 178, 179, 190, 197, 198, 201, 216, 230], "func_img": [54, 143, 149], "fourth": [54, 74], "coordinatesystem": [54, 61, 63, 64, 65, 67, 68, 133, 137, 143, 178, 193, 222, 229], "coord_nam": [54, 61, 63, 64, 65, 66, 67, 68, 133, 137, 222, 223], "coord_dtyp": [54, 61, 63, 64, 65, 66, 67, 68, 133, 137, 222, 229], "do_3d_to_4d": [56, 133], "check_affin": 56, "command": [58, 131, 133, 137, 154, 159, 160, 161, 162, 167, 170, 178, 182, 185, 190, 191, 192, 197, 198, 226, 227], "registr": [58, 133, 139, 152, 180, 186, 188, 192, 197, 223], "algorithm": [58, 65, 84, 85, 86, 87, 89, 92, 116, 117, 118, 123, 124, 126, 133, 149, 176, 178, 186, 188, 192, 193, 195, 197, 198, 201, 202, 209, 214, 221, 223, 224, 230], "tran": 58, "med": 58, "add_np": [60, 133], "doctest_namespac": 60, "in_tmp_path": [60, 133, 178], "mpl_import": [60, 133], "agg": [60, 128], "backend": [60, 128, 154, 195], "favor": [61, 137], "roll": [61, 63, 74], "synchronized_ord": [61, 133], "iter_axi": [61, 62, 113, 133], "is_imag": [61, 133], "obei": 61, "metadata": [61, 63, 75, 79, 80, 81, 82, 113, 133, 144, 145, 186], "volumetr": [61, 75, 79, 80, 81, 82, 192, 198, 205, 214, 217], "manipul": [61, 90, 91, 230], "int16": 61, "cmap": [61, 64, 65, 68, 72, 99, 101, 103, 111, 149, 193, 213], "affinetransform": [61, 63, 64, 67, 68, 72, 133, 137, 222, 223], "kji": [61, 72, 137], "zxy": [61, 72], "namespac": 61, "freeform": 61, "save_imag": [61, 72, 178, 222], "from_imag": [61, 62, 113, 133], "klass": 61, "semant": [61, 145], "soon": [61, 199], "awai": [61, 195], "renamed_ax": [61, 133], "names_dict": 61, "renam": [61, 65, 170, 185], "newimg": [61, 62, 222], "from_param": [61, 64, 65, 133, 137], "ijk": [61, 64, 65, 66, 88, 95, 137, 178, 229], "im_renam": 61, "renamed_refer": [61, 133], "im_renamed_refer": 61, "newx": 61, "newi": 61, "reordered_ax": [61, 133], "r_img": 61, "from_start_step": [61, 65, 133], "im_reord": 61, "reordered_refer": [61, 133], "__getitem__": [61, 116], "xxx": 61, "wouldn": [61, 137], "innam": [61, 65], "outnam": [61, 65], "duck": [61, 137], "is_img": 61, "rollaxi": [61, 133], "affine_transform": [61, 65, 67, 133, 137, 192], "ijkl": [61, 65], "xyzt": [61, 63, 65, 138, 147], "im_t_first": 61, "fix0": [61, 65, 74], "axiserror": [61, 133], "again": [61, 116, 120, 137, 138, 160, 161, 174, 190, 229], "slice_object": 61, "frame3": 61, "slice_mak": 61, "img_subsampl": 61, "appropri": [61, 65, 90, 91, 111, 134, 137, 229], "target_img": 61, "im_scrambl": 61, "iljk": 61, "txyz": 61, "im_unscrambl": 61, "data2": [61, 84], "im2": 61, "im_scrambled2": 61, "xtyz": 61, "im_unscrambled2": 61, "data3": 61, "im3": 61, "im_scrambled3": 61, "im_unscrambled3": 61, "im_unscrambled4": 61, "funcim": [62, 113], "iterable_img": [62, 113], "ilist": [62, 113], "sublist": 62, "dropout": 62, "get_list_data": [62, 113, 133], "role": [62, 113], "conceten": [62, 113], "vox2mni": [63, 67, 68, 222], "xyz_affin": [63, 68, 133], "as_xyz_imag": [63, 133], "mni": [63, 65, 67, 68, 74, 99, 100, 103, 137, 210, 213, 217], "float32": [63, 66, 72, 74, 85, 138, 147, 229], "astyp": [63, 113, 116], "5x5": 63, "img_t0": 63, "axeserror": [63, 133], "img_t0_aff": 63, "nibabel": [63, 73, 74, 79, 81, 82, 88, 90, 91, 118, 226], "nib": 63, "nimg": 63, "nifti1imag": [63, 74, 88, 92, 96, 97, 216], "name2xyz": [63, 68], "get_affin": [63, 73, 82, 133], "ax_nam": [63, 68], "keyerror": [63, 68], "reo_img": 63, "affabl": 63, "spacetypeerror": [63, 133], "recogn": [63, 68, 74, 134, 174, 193], "affineerror": [63, 133], "contribut": [63, 68, 155, 175, 177, 195, 224], "is_xyz_aff": [63, 68, 133], "spatialimag": [63, 73], "time0_img": 63, "make_xyz_imag": [63, 133], "xyzspac": [63, 67, 133], "coordsysmak": [63, 65, 67, 68, 133], "get_world_c": [63, 68, 133], "didn": [63, 137], "extra": [63, 65, 68, 74, 79, 80, 81, 82, 99, 104, 126, 195, 210], "data4": 63, "data5": 63, "xyz_aff": [63, 68], "transposed_valu": [64, 133], "mgrid": 64, "input_shap": 64, "acmap": 64, "arrang": [64, 138, 147], "rest": [64, 65, 134, 161, 169, 172, 177, 186, 189, 194, 198], "from_shap": [64, 133], "coord": [64, 86, 88, 90, 91, 94, 96, 104], "ogrid": 64, "xy": [64, 137], "21j": 64, "31j": 64, "i0": 64, "i1": 64, "651": 64, "necessarili": [65, 145, 229], "encapsul": 65, "neither": [65, 72, 137], "share": [65, 137, 186, 195, 197, 226], "renamed_domain": [65, 133, 137], "renamed_rang": [65, 133], "reordered_domain": [65, 68, 133, 137], "reordered_rang": [65, 133, 137], "concat": 65, "inp_c": 65, "out_c": [65, 229], "cm": [65, 106, 133, 152, 192], "icm": 65, "safe": [65, 66, 90, 91, 170, 229], "typecast": 65, "domain_nam": 65, "range_nam": 65, "somewher": [65, 137, 170, 190], "preserve_dtyp": 65, "aff_cm_inv": 65, "input_c": 65, "output_c": 65, "affine_transform_inv": 65, "at_inv_preserv": 65, "affine2": 65, "aff_t": 65, "newnam": 65, "newmap": 65, "affine_domain": 65, "affine_rang": 65, "affine_matrix": 65, "affine_map": 65, "new_affine_map": 65, "phase": [65, 74, 137, 193], "freq": [65, 74, 110, 126, 137], "ikj": [65, 66], "xzy": 65, "newcm": 65, "yzx": [65, 137], "similar_to": [65, 66, 133], "incorrect": 65, "with_traceback": [65, 66, 68, 74, 78, 129, 133], "tb": [65, 66, 68, 74, 78, 129, 224], "__traceback__": [65, 66, 68, 74, 78, 129], "domain_mak": 65, "range_mak": 65, "maker": [65, 66, 68], "coordinate_system": [65, 133, 178, 192, 223, 229], "dmaker": 65, "rmaker": 65, "cm_maker": 65, "affine_mak": [65, 133], "alia": [65, 66, 160, 161], "generic_mak": [65, 133], "make_affin": [65, 133], "append_zoom": 65, "append_offset": 65, "affmap": 65, "orthogon": [65, 74, 81, 99, 104, 121, 147, 198, 201, 210], "make_cmap": [65, 133], "domain_n": 65, "inv_xform": 65, "inverse_funct": [65, 133], "mni_orig": 65, "126": 65, "inv_funct": 65, "89": [65, 137], "ufunc": [65, 160], "same_kind": 65, "subok": 65, "signatur": [65, 229], "extobj": 65, "intent": [65, 74], "new_cm": 65, "nnew": 65, "append_io_dim": [65, 133], "in_nam": 65, "cm_plu": 65, "cm3d": 65, "cm4d": 65, "axmap": [65, 133], "in2out": 65, "out2in": 65, "cmapi": 65, "id1": 65, "id2": 65, "drop_io_dim": [65, 133], "axis_id": 65, "similarli": [65, 80, 141, 205, 229], "section": [65, 102, 127, 160, 161, 169, 176, 185, 186, 190, 193], "cm_redux": 65, "mapping1": 65, "mapping2": 65, "are_they_equ": 65, "kij": [65, 137], "ever": 65, "input_axis_index": [65, 133], "inax": 65, "had": [65, 68, 137, 161, 176, 199], "io_axis_indic": [65, 133], "in_index": 65, "out_index": 65, "orth_ax": [65, 133], "in_ax": 65, "out_ax": 65, "allow_zero": 65, "vice": [65, 186], "versa": [65, 186], "nor": [65, 68, 72, 137], "inc1": 65, "inc2": 65, "inc3": 65, "ij": [65, 66, 137, 224], "129": [65, 137], "93": [65, 67, 137], "shifted_domain_origin": [65, 133], "difference_vector": 65, "new_origin": 65, "shift": [65, 114, 190, 221], "shifted_origin": 65, "current_origin": 65, "ijklm": 65, "oldorigin": 65, "shifted_affine_transform": 65, "neworigin": 65, "let": [65, 68, 126, 134, 136, 137, 138, 147, 152, 161, 169, 190, 217, 219, 226, 229], "point_in_old_basi": 65, "ship": [65, 129], "shifted_range_origin": [65, 133], "point_in_domain": 65, "coordsi": [66, 68], "cmkr": 66, "coord_sys_klass": [66, 133], "dtype_templ": 66, "dtype_should_b": 66, "another_c": 66, "irrelev": 66, "descript": [66, 69, 79, 80, 81, 82, 86, 90, 91, 92, 94, 110, 111, 127, 137, 161, 201, 223, 224, 229], "lpi": [66, 137], "is_coordsi": [66, 133], "is_coordsys_mak": [66, 133], "coord_system": [66, 193], "safe_dtyp": [66, 133], "product_coord_system": [66, 193], "c1": [66, 120], "c2": [66, 120], "complex_": 66, "c3": 66, "ik": [66, 137], "in3": 66, "complex128": 66, "sctype": 66, "uint": 66, "myarr": 66, "isbuiltin": 66, "mydtyp": 66, "s32": 66, "ag": [66, 177], "i4": [66, 72, 130], "bounding_box": [67, 104, 133, 137], "xslice": [67, 133], "y_spec": 67, "z_spec": [67, 137], "lp": [67, 137], "As": [67, 147, 159, 176, 177, 185, 191, 196, 201, 224, 228, 229, 230], "114": [67, 137], "115": 67, "x30": 67, "i_i": 67, "i_z": [67, 137], "yslice": [67, 133, 137], "x_spec": [67, 137], "y70": [67, 137], "i_x": [67, 137], "zslice": [67, 133], "z40": 67, "hijo": 68, "csm": 68, "to_coordsys_mak": [68, 133], "as_map": [68, 133], "as_tupl": [68, 133], "register_to": [68, 133], "opposit": 68, "coordinatesystemmak": 68, "x_suffix": [68, 133], "y_suffix": [68, 133], "z_suffix": [68, 133], "world_id": 68, "tuvw": 68, "known_spac": [68, 133], "world_c": 68, "mni_spac": 68, "coordap": 68, "time0_cmap": 68, "is_xyz_spac": [68, 133], "against": [68, 147], "sp0": 68, "sp1": 68, "hija": 68, "ye": [68, 137], "tm": 68, "recogniz": [68, 74], "AND": [68, 74], "xyz_ord": [68, 82, 133, 137], "xyzt_c": 68, "mni_csm": 68, "tzyx_c": 68, "few": [69, 138, 139, 147, 161, 172, 191, 227], "data_gener": [69, 133], "slice_gener": [69, 133], "f_gener": [69, 133], "write_data": [69, 133], "matrix_gener": [69, 133], "rp": 69, "shape_gener": [69, 133], "fastest": [69, 138, 147], "slice_parcel": [69, 133], "hmmm": 69, "heavi": 70, "nipyp": 70, "mlab_tempfil": [70, 133], "caller": 70, "filesystem": [70, 145], "NOT": 70, "doesn": [70, 137, 155, 161, 178, 191, 226], "oserror": 70, "pth": 70, "run_matlab": [70, 133], "cmd": [70, 184, 185, 227], "run_matlab_script": [70, 133], "script_lin": 70, "script_nam": 70, "pyscript": 70, "multilin": 70, "spm_path": [71, 133], "spm_ver": [71, 133], "fltcol": [71, 133], "val": [71, 95], "1xn": [71, 77], "fname_presuffix": [71, 133], "use_ext": 71, "fnames_presuffix": [71, 133], "make_job": [71, 133], "jobtyp": 71, "jobnam": 71, "run_jobdef": [71, 133], "jobdef": 71, "scans_for_fnam": [71, 133], "as_imag": [72, 133], "image_input": 72, "modif": [72, 90, 153, 184, 198], "img2": [72, 152], "resolv": [72, 161], "dtype_from": 72, "filetyp": 72, "gz": [72, 118, 174, 178, 185, 191, 226], "hdr": 72, "tempfil": [72, 178], "mkdtemp": 72, "tmpdir": 72, "91": [72, 137], "109": 72, "fname1": 72, "img1": [72, 152], "saved_img1": 72, "fname2": 72, "saved_img2": 72, "mnc": [72, 137], "saved_image3": 72, "sorri": [72, 137], "yet": [72, 90, 91, 94, 134, 136, 156, 228], "minc": [72, 137, 145, 221, 222], "shutil": 72, "rmtree": 72, "older": [73, 190], "dataobj": 73, "get_head": [73, 133], "_data": [73, 79, 81, 82, 136, 186], "unscal": 73, "read_img_data": 73, "newer": 73, "get_unsc": 73, "get_dataobj": [73, 133], "arrayproxi": 73, "get_unscaled_data": [73, 133], "nimh": [74, 137, 198], "nih": [74, 137, 194, 199], "gov": [74, 137], "pub": 74, "src": [74, 181, 193], "niftilib": 74, "nifti1": [74, 96, 143], "repisitori": 74, "nipysta": 74, "constrain": [74, 137], "seven": [74, 197], "4th": [74, 179], "suggest": [74, 137, 163, 195, 196], "correctli": [74, 75, 137, 161, 193, 229], "wrinkl": 74, "stori": 74, "xyxt_unit": 74, "hz": 74, "concentr": [74, 147, 197, 198], "radian": 74, "dim_info": [74, 137], "aros": 74, "ra": [74, 137], "talairach": [74, 102, 137], "152": 74, "atla": [74, 182, 223, 229], "implic": [74, 229], "xyzt_unit": 74, "angular": 74, "veloc": [74, 198], "pixdim": 74, "sform": 74, "later": [74, 99, 103, 136, 199, 210, 211, 227], "omit": [74, 155], "ijktuvw": 74, "ijkuvw": 74, "rememb": [74, 137, 143, 147, 158, 161, 169, 178, 229], "rad": 74, "nipy2nifti": [74, 133], "nifti2nipi": [74, 133], "ni_img": 74, "ni_imag": 74, "lack": [74, 197], "qform": 74, "presenc": [74, 117], "ambigu": [74, 134, 137], "resist": 74, "temptat": 74, "squeez": [74, 75, 186], "toffset": 74, "micron": 74, "meter": 74, "mistak": [74, 143, 161], "msec": 74, "usec": 74, "data_dtyp": 74, "hard": [74, 86, 128, 137, 161, 183, 197, 229], "lose": [74, 195, 230], "mechan": [75, 145, 177], "interact": [75, 99, 110, 136, 161, 197, 210, 217, 221, 227, 230], "as_volume_img": [75, 79, 80, 81, 82, 133, 201, 214], "world_spac": [75, 79, 80, 81, 82, 133], "volumeimg": [75, 79, 80, 81, 133, 203, 214], "pynifti": [75, 79, 81, 82], "brifti": [75, 97, 216], "elsewher": [75, 85], "volume_img": [75, 133, 192], "kept": [75, 85, 90, 91, 155, 207, 208, 209], "much": [75, 112, 137, 145, 149, 156, 158, 161, 178, 184, 197, 228, 230], "input_spac": [76, 78, 133], "output_spac": [76, 78, 133], "composed_with": [76, 78, 133, 149], "get_invers": [76, 78, 133], "inverse_map": [76, 78, 133, 229], "apply_affin": [77, 133], "from_matrix_vector": [77, 133], "nxn": 77, "to_matrix_vector": [77, 133], "get_bound": [77, 133], "occupi": [77, 102, 103, 197, 212], "clever": 78, "volume_field": [79, 81, 82, 133, 192, 214], "volumefield": [79, 81, 82, 133, 201, 214], "undefin": [79, 81, 82], "prescal": [79, 81, 82], "demand": [79, 81, 82], "practic": [79, 81, 82, 160, 175, 178, 186, 197, 224], "mni152": [79, 80, 81, 82, 99, 103, 137, 201, 210, 213], "user": [79, 80, 81, 82, 90, 91, 111, 134, 137, 138, 143, 147, 149, 155, 161, 167, 170, 171, 174, 177, 191, 192, 193, 195, 197, 198, 221, 222, 226, 227, 228, 229], "maintain": [79, 80, 81, 82, 103, 153, 161, 164, 168, 176, 177, 213, 227], "privat": [79, 81, 82, 116, 195], "pointer": [79, 81, 82, 170, 197], "ly": [79, 80, 81, 82, 201, 203], "3x3": [79, 80, 81, 82, 203], "n_x": [79, 80, 81, 82, 203], "n_y": [79, 80, 81, 82, 203], "n_z": [79, 80, 81, 82, 203], "resampled_imag": [79, 80, 81, 82, 203, 205], "composed_with_transform": [79, 80, 81, 82, 133, 214], "w2w_transform": [79, 80, 81, 82, 204], "remapped_imag": [79, 80, 81, 82, 204], "get_transform": [79, 80, 81, 82, 133, 179], "like_from_data": [79, 81, 82, 133], "resampled_to_img": [79, 80, 81, 82, 133, 214], "target_imag": [79, 80, 81, 82, 205], "understood": [79, 81, 82, 119], "nipy_imag": [79, 80, 81, 82, 205], "values_in_world": [79, 80, 81, 82, 133, 214], "engin": [80, 197, 198, 220, 230], "abstract": [80, 94, 145, 214, 220, 224], "volume_data": [81, 82, 133, 192], "volumedata": [81, 82, 133, 201], "multidimension": [81, 201], "warp": [81, 138, 147, 201], "forward": [81, 169, 195], "imposs": [81, 82, 91, 229], "get_world_coord": [81, 82, 133], "volume_grid": [82, 133, 192], "volumegrid": [82, 133, 201], "regularli": [82, 119], "compositionerror": [82, 133], "dofmax": [83, 118], "10000000000": [83, 118], "baselin": [83, 118], "h0": [83, 84, 118], "reml": [83, 123, 133, 192], "zscore": [83, 84, 133, 192], "calibr": [84, 95, 133], "10000": [84, 202], "cluster_stat": [84, 95, 133], "region_stat": 84, "exce": 84, "thresh1": 84, "diam1": 84, "thresh2": 84, "diam2": 84, "thresh": 84, "diam": 84, "classic": 84, "suprathreshold": 84, "stat1": 84, "labels1": 84, "labels2": 84, "chatterbox": 84, "voxel_result": 84, "uncorrect": [84, 202], "corr_p_valu": 84, "tmax": 84, "perm_maxt_valu": 84, "cluster_result": 84, "results1": 84, "results2": 84, "expected_voxels_per_clust": 84, "expected_number_of_clust": 84, "peak_xyz": [84, 133], "nonempti": 84, "size_valu": 84, "size_p_valu": 84, "s_corr_p_valu": 84, "perm_size_valu": 84, "perm_maxsize_valu": 84, "region_result": 84, "label_valu": 84, "height_threshold": [84, 133], "pval": [84, 94], "uniform": [84, 224], "tvalu": 84, "vardata": [84, 96], "stat_id": [84, 95], "ndraw": 84, "100000": [84, 89], "mfx": 84, "onesampl": [84, 95, 133, 192], "voxelwis": 84, "random_tvalu": 84, "data1": 84, "vardata1": 84, "vardata2": 84, "compute_cluster_stat": [84, 133], "fisher_valu": 84, "nclust": 84, "compute_region_stat": [84, 133], "nregion": 84, "extract_clusters_from_diam": [84, 133], "comment": [84, 134, 137, 147, 156, 185], "septemb": 84, "15th": 84, "develop": [84, 134, 136, 139, 145, 149, 155, 162, 167, 168, 169, 174, 176, 178, 185, 191, 192, 195, 196, 197, 198, 214, 219, 221, 227, 228, 230], "subdivid": [84, 104], "blob": [84, 87, 90, 97, 216], "my": [84, 131, 137, 138, 147, 152, 156, 160, 161, 169, 191, 195, 226], "understand": [84, 134, 139, 152, 180, 197, 201, 219], "experiment": [84, 111, 112, 119, 231], "extract_clusters_from_graph": [84, 133], "extract_clusters_from_thresh": [84, 133], "max_dist": [84, 133], "onesample_stat": [84, 133], "magic": [84, 99, 167, 210], "os_stat": 84, "os_stat_mfx": 84, "n_label": 84, "sorted_valu": [84, 133], "sortedvalu": 84, "twosample_stat": [84, 133], "y1": 84, "y2": 84, "ts_stat": 84, "ts_stat_mfx": 84, "epi": [85, 207], "compute_mask": [85, 133, 214], "mean_volum": [85, 207], "reference_volum": [85, 207], "exclude_zero": [85, 207, 208, 209], "grei": [85, 103, 207, 208, 212], "nichol": [85, 118, 199, 207, 208], "dens": [85, 207, 208], "failur": [85, 156, 173, 178, 207, 208], "discard": [85, 94, 161, 207, 208, 209], "larger": [85, 87, 103, 145, 207, 212, 226], "larg": [85, 96, 119, 156, 179, 195, 197, 198, 207, 208, 209, 217, 227, 230], "skull": [85, 103, 207, 212], "miss": [85, 137, 138, 147, 193, 207, 208, 209], "pad": [85, 110, 207, 208, 209], "compute_mask_fil": [85, 133, 214, 215], "input_filenam": [85, 208], "output_filenam": [85, 208], "return_mean": [85, 208, 209], "2nd": [85, 208], "mean_imag": [85, 208], "compute_mask_sess": [85, 133, 214, 215], "session_imag": [85, 209], "intersect": [85, 92, 209], "inner": [85, 90, 91, 176, 209], "wherea": [85, 190, 195, 209, 229], "intersect_mask": [85, 133], "input_mask": 85, "nsubj": [85, 96], "input_mask_fil": 85, "grp_mask": 85, "largest_cc": [85, 133], "series_from_mask": [85, 133], "ensure_finit": 85, "session_seri": 85, "spread": 85, "threshold_connect_compon": [85, 133], "packag": [86, 118, 127, 129, 134, 138, 147, 153, 158, 174, 183, 185, 188, 189, 190, 195, 196, 197, 198, 199, 214, 221, 225, 230], "aim": [86, 188, 219], "roi": [86, 90, 91, 94, 133, 145], "multisubject": 86, "strength": [86, 198], "publish": [86, 120], "ipmi": 86, "landmark": [86, 87, 94, 96], "compute_landmark": [86, 133], "prevalence_pv": [86, 87, 94], "prevalence_threshold": [86, 87, 94], "smin": [86, 87, 90, 96], "1000": [86, 224], "burnin": 86, "structureddomain": [86, 90, 91, 133], "context": [86, 90, 91, 94, 127, 159], "nbnode": [86, 96], "preval": 86, "gauss_mixtur": 86, "emp_nul": 86, "gam_gauss": 86, "dpmm": 86, "sbf": 86, "landmarkregion": [86, 133], "hroi": [86, 87, 133, 192], "nroi": [86, 87, 90], "bayesian_structural_analysi": [87, 96, 133, 192], "bsa": [87, 96], "make_bsa_imag": [87, 133], "mask_imag": [87, 92, 95, 96], "stat_imag": 87, "write_dir": [87, 92], "contrast_id": 87, "structural_bfl": [87, 133, 192], "landmark_region": [87, 94], "counterpart": 87, "unifi": [88, 224], "mesh": [88, 134], "local_volum": 88, "referenti": [88, 96, 97, 216], "descriptor": [88, 119], "em_dim": [88, 94], "connected_compon": [88, 133], "get_coord": [88, 90, 91, 133], "get_featur": [88, 90, 91, 93, 133], "fid": [88, 90, 91, 93], "get_volum": [88, 90, 91, 133], "integrata": 88, "lsum": [88, 90, 91], "bmask": 88, "representative_featur": [88, 90, 91, 133], "foain": 88, "among": [88, 90, 91, 92, 96, 111, 118, 119, 154], "set_featur": [88, 90, 91, 93, 133], "n_vertic": 88, "n_triabl": 88, "ndgrid": 88, "fly": [88, 161], "det": 88, "make_feature_from_imag": [88, 133], "wish": [88, 99, 104, 153, 210], "to_imag": [88, 90, 91, 133], "nonzer": 88, "array_affine_coord": [88, 133], "domain_from_binary_arrai": [88, 133], "nn": [88, 91, 92, 95], "unus": [88, 91, 190], "domain_from_imag": [88, 133], "mim": [88, 91], "niftiiimag": [88, 91], "dd": 88, "domain_from_mesh": [88, 133], "gifti": 88, "grid_domain_from_binary_arrai": [88, 133], "grid_domain_from_imag": [88, 133], "grid_domain_from_shap": [88, 133], "rectangular": 88, "idx_affine_coord": [88, 133], "reduce_coo_matrix": [88, 133], "mat": [88, 152, 186, 222], "smatrix_from_3d_arrai": [88, 133], "coo_mat": 88, "smatrix_from_3d_idx": [88, 133], "smatrix_from_nd_arrai": [88, 133], "smatrix_from_nd_idx": [88, 133], "hparcel": [89, 133], "ldata": 89, "nb_parcel": [89, 92, 93], "nb_perm": 89, "dmax": [89, 96], "lamb": 89, "chunksiz": 89, "initial_mask": 89, "connected": 89, "discrete_domain": [89, 90, 92, 93, 94, 133, 192], "discretedomain": [89, 92, 93, 94, 133], "n_subj": [89, 97, 216], "prfx": [89, 92], "swape": 89, "deform": 89, "nb_subj": [89, 92, 93], "deped": 89, "pa": [89, 92], "perm_prfx": [89, 133], "mroi": [90, 93, 133, 192], "subdomain": [90, 94, 133], "librari": [90, 145, 184, 186, 190, 191, 198, 221, 227, 230], "satisfactori": 90, "intermedi": [90, 96, 167], "virgil": 90, "fritsch": 90, "inria": 90, "fr": 90, "subregion": [90, 91], "roi_featur": [90, 91], "roi_feature_dim": [90, 91], "persist": [90, 91], "feature_to_voxel_map": [90, 91, 133], "flat": [90, 91], "feature_dim": [90, 91], "hashabl": [90, 91], "roi_siz": [90, 91], "domain_dimens": [90, 91], "get_id": [90, 91, 133], "get_leaves_id": [90, 133], "get_local_volum": [90, 91, 133], "loc_volum": [90, 91], "get_par": [90, 133], "get_roi_featur": [90, 91, 133], "get_siz": [90, 91, 133], "ignore_children": 90, "make_forest": [90, 133], "make_graph": [90, 133], "merge_ascend": [90, 133], "id_list": [90, 91], "pull_featur": 90, "unmodifi": [90, 170], "pool": [90, 123], "merge_descend": [90, 133], "son": 90, "dealt": [90, 110, 138], "plot_featur": [90, 91, 133], "boxplot": [90, 91], "recompute_label": [90, 91, 133], "reduce_to_leav": [90, 133], "remove_featur": [90, 91, 133], "remove_roi_featur": [90, 91, 133], "assess_qu": [90, 91], "qualiti": [90, 91, 172, 195], "select_id": [90, 91, 133], "select_roi": [90, 91, 133], "set_roi_featur": [90, 91, 133], "descrip": [90, 91], "upon": [90, 91, 94], "tweak": [90, 91], "nim": [90, 91], "dom": [90, 91, 94], "ddom": [90, 91], "ndgriddomain": [90, 91, 133], "hroi_as_discrete_domain_blob": [90, 133], "hierachicalroi": 90, "hroi_from_watersh": [90, 133], "hierarchichalroi": 90, "hroi_agglomer": [90, 133], "input_hroi": 90, "agglomer": 90, "output_hroi": 90, "make_hroi_from_subdomain": [90, 133], "sub_domain": 90, "familywis": 91, "n_roi": 91, "hazard": 91, "summary_featur": 91, "subdomain_from_arrai": [91, 133], "subdomain_from_bal": [91, 133], "radii": 91, "subdomain_from_imag": [91, 133], "multipleroi": 91, "subdomain_from_position_and_imag": [91, 133], "po": [91, 95, 97, 216], "prescrib": [91, 196], "mutli": 92, "subjectparcel": 92, "lib": [92, 161, 185], "operm": 92, "fixed_parcel": [92, 133], "nbparcel": 92, "fullpath": 92, "gkm": 92, "ward_and": 92, "gkm_and_ward": 92, "write_di": 92, "topion": 92, "minut": [92, 160], "60k": 92, "dirti": 92, "expens": 92, "quit": [92, 161, 197, 229], "cpu": [92, 230], "mask_parcel": [92, 133], "output_imag": [92, 118], "wim": 92, "nifti1imagin": 92, "parcel_input": [92, 133], "learning_imag": 92, "fdim": 92, "nb_subject": [92, 93], "nb_featur": 92, "thethreshold": 92, "byd": 92, "efault": 92, "reduct": 92, "nb_subect": 92, "parcellation_based_analysi": [92, 133], "test_imag": [92, 178], "test_id": 92, "one_sampl": 92, "rfx_path": 92, "condition_id": 92, "swd": 92, "rfx": [92, 96], "multisubjectparcel": [92, 133], "statstic": 92, "test_data": 92, "write_parcellation_imag": [92, 133], "template_path": 92, "indiv_path": 92, "subject_id": 92, "template_label": 93, "individual_label": 93, "contour": [93, 104, 195], "multiroi": 93, "elementari": 93, "make_featur": [93, 133], "sire": 93, "pfeatur": 93, "nbsubj": 93, "set_individual_label": [93, 133], "set_template_label": [93, 133], "revisit": [94, 229], "improv": [94, 188], "sensit": [94, 96, 198], "reliabl": 94, "indiv_coord": 94, "low": [94, 111, 121, 126, 147, 197, 221], "kernel_dens": [94, 133], "kde": 94, "cutoff": 94, "roi_preval": [94, 133], "population_preval": 94, "build_landmark": [94, 133], "amer": 94, "wuch": 94, "extent": [94, 104, 198], "lr": 94, "newlabel": 94, "relabel": 94, "fulfil": 94, "def_model": [95, 133], "def_nit": [95, 133], "dump": [95, 133, 186], "bonferroni": [95, 133], "zimg": 95, "height_th": 95, "height_control": 95, "fpr": 95, "cluster_th": 95, "null_": 95, "rft": [95, 133, 192], "get_3d_peak": [95, 133], "order_th": 95, "peak": [95, 96, 120, 126], "n_maxima": 95, "linear_model_fit": [95, 133], "data_imag": 95, "onesample_test": [95, 133], "vardata_imag": 95, "cluster_forming_th": 95, "prepare_arrai": [95, 133], "simulated_pvalu": [95, 133], "simu_t": 95, "twosample_test": [95, 133], "twosampl": 95, "reproduc": 96, "jacknif": 96, "subampl": 96, "cohort": 96, "methodolog": 96, "pinel": 96, "meriaux": 96, "dehaen": 96, "polin": [96, 114, 118, 199, 220, 221], "jb": [96, 118], "mar": 96, "105": 96, "bootstrap_group": [96, 133], "ngroup": 96, "subgroup": 96, "bootstrap": [96, 227], "subbgroup": 96, "cluster_reproduc": [96, 133], "crfx": 96, "swap": 96, "far": [96, 136, 141, 147, 196, 229], "binar": 96, "cmfx": 96, "cffx": 96, "cluster_threshold": [96, 133], "stat_map": 96, "csize": 96, "nbvox": 96, "vx": 96, "nrow": 96, "ncol": 96, "coord_bsa": [96, 133], "thq": 96, "afnam": 96, "spatial_model": [96, 133, 192], "representatit": 96, "pickl": 96, "afcoord": 96, "number_of_region": 96, "draw_sampl": [96, 133], "split_method": 96, "randomli": [96, 224], "groupsiz": 96, "fttest": [96, 133], "cumul": [96, 224], "get_cluster_position_from_thresholded_map": [96, 133], "thr": 96, "cisz": 96, "anat_dim": 96, "get_peak_position_from_thresholded_map": [96, 133], "deomain": 96, "group_reproducibility_metr": [96, 133], "contrast_imag": 96, "variance_imag": 96, "number_of_sampl": 96, "do_clust": 96, "do_voxel": 96, "do_peak": 96, "cluster_rep_result": 96, "voxel_rep_result": 96, "peak_rep_result": 96, "histo_repro": [96, 133], "hr": 96, "map_reproduc": [96, 133], "subrgoup": 96, "rmap": 96, "mfx_ttest": [96, 133], "peak_reproduc": [96, 133], "split_group": [96, 133], "statistics_from_posit": [96, 133], "nt": 96, "bad": 96, "ttest": [96, 133], "voxel_reproduc": [96, 133], "ngourp": 96, "voxel_thresholded_ttest": [96, 133], "surrogate_2d_dataset": [97, 133, 214, 216], "sk": [97, 216], "noise_level": [97, 216], "ampli": [97, 216], "spatial_jitt": [97, 216], "signal_jitt": [97, 216], "width_jitt": [97, 216], "out_text_fil": [97, 216], "out_image_fil": [97, 216], "surrog": [97, 216], "amount": [97, 197, 216, 224, 230], "amplitud": [97, 110, 112, 126, 216, 225, 231], "jitter": [97, 216], "fluctuat": [97, 216], "surrogate_3d_dataset": [97, 133, 214, 216], "surrogate_4d_dataset": [97, 133, 214, 216], "n_scan": [97, 111, 119, 121, 216], "n_sess": [97, 216], "signal_level": [97, 216], "simlul": [97, 216], "overridden": [97, 216], "n_row": [97, 216], "mayavi": [99, 100, 103, 136, 210, 211, 213, 217, 225], "demo": [99, 104], "demo_plot_map": [99, 133], "do3d": [99, 210], "plot_anat": [99, 133], "anat": [99, 103, 210, 212, 213], "anat_affin": [99, 103, 210, 212, 213], "cut_coord": [99, 103, 104, 210, 213, 217], "slicer": [99, 102, 113, 133, 137, 192, 210], "ortho": [99, 210], "titl": [99, 104, 120, 133, 155, 156, 161, 177, 210, 216], "annot": [99, 104, 133, 210], "draw_cross": [99, 104, 133, 210], "black_bg": [99, 104, 210], "color": [99, 101, 103, 104, 160, 213, 217], "linearsegmentedcolormap": 99, "imshow_kwarg": [99, 210], "frontal": [99, 210], "background": [99, 103, 104, 133, 137, 139, 210, 213, 216], "compulsori": [99, 103, 210, 213], "plosit": [99, 210], "black": [99, 101, 104, 210], "facecolor": [99, 104, 210], "edgecolor": [99, 104, 210], "pyplot": [99, 103, 104, 177, 210, 213], "savefig": [99, 104, 210], "vmax": [99, 101, 103, 213], "vmean": 99, "ptp": 99, "vmin": [99, 101, 103, 213, 217], "colormap": [99, 101, 103, 111, 213], "imshow": [99, 104, 111, 137, 210, 216], "plot_map": [99, 104, 133, 214, 217], "threshold_3d": [99, 210], "view_3d": [99, 210], "1mm": [99, 103, 137, 152, 210, 213], "auto": [99, 104, 128, 136, 186, 190, 210, 217], "transpar": [99, 104, 144, 210, 217, 230], "screenshot": [99, 210], "azimuth": [99, 210], "elev": [99, 210], "focalpoint": [99, 210], "mlab": [99, 210], "ma": [99, 210, 217], "masked_less": [99, 210, 217], "find_mni_templ": [100, 133], "alpha_cmap": [101, 133], "triplet": 101, "dim_cmap": [101, 133], "to_whit": 101, "white": [101, 103, 122, 137, 198, 212], "replace_insid": [101, 133], "outer_cmap": 101, "inner_cmap": 101, "insid": 101, "misc": 102, "coord_transform": [102, 133, 217], "find_cut_coord": [102, 104, 133], "activation_threshold": 102, "find_activ": 102, "find_maxsep_cut_coord": [102, 133], "map3d": 102, "n_cut": 102, "ncut": 102, "get_mask_bound": [102, 133], "affine_img_src": [103, 133, 214], "affineimag": [103, 137, 211], "reverse_x": [103, 211], "radiolog": [103, 211], "autocrop_img": [103, 133], "bg_color": [103, 104], "demo_plot_map_3d": [103, 133], "m2screenshot": [103, 133], "mayavi_fig": 103, "mpl_ax": 103, "autocrop": 103, "captur": 103, "screeshot": 103, "plot_anat_3d": [103, 133, 214], "sulci_opac": [103, 212], "gyri_opac": [103, 212], "opac": [103, 212], "skull_percentil": [103, 212], "wm_percentil": [103, 212], "outline_color": [103, 212], "percentil": [103, 212], "delimit": [103, 212], "matter": [103, 198, 212], "plot_map_3d": [103, 133, 214], "offscreen": [103, 213], "render": [103, 136, 177, 193, 213, 217], "outlin": [103, 213], "cursor": [103, 155, 190, 213], "vtk": [103, 135, 139, 213, 221, 230], "linux": [103, 161, 167, 174, 195, 213], "card": [103, 213], "layout": [104, 147], "left_right": 104, "contour_map": [104, 133], "edge_map": [104, 133], "init_with_figur": [104, 133], "leave_spac": 104, "99": 104, "bgcolor": 104, "horizont": [104, 147], "font": 104, "frame_ax": 104, "crossbar": 104, "ortho_slic": 104, "axhlin": 104, "mpl": 104, "do_cut": [104, 133], "draw_cut": [104, 133], "data_bound": 104, "draw_left_right": [104, 133], "draw_posit": [104, 133], "get_object_bound": [104, 133], "demo_ortho_slic": [104, 133], "test_anat_cach": [105, 133], "test_demo_plot_map": [105, 133], "test_plot_anat": [105, 133], "test_plot_anat_kwarg": [105, 133], "test_plot_map_empti": [105, 133], "test_plot_map_with_auto_cut_coord": [105, 133], "smoke": 106, "test_dim_cmap": [106, 133], "test_replace_insid": [106, 133], "test_coord_transform_trivi": [107, 133], "test_find_cut_coord": [107, 133], "test_find_maxsep_cut_coord": [107, 133], "test_fast_abs_percentil": [108, 133], "test_demo_ortho_slic": [109, 133], "block_amplitud": [110, 133], "block_spec": 110, "hrf": [110, 119, 126, 133, 192, 224], "glover": [110, 114, 119, 120, 224], "convolution_pad": 110, "convolution_dt": 110, "hrf_interv": 110, "event": [110, 111, 112, 119, 120, 126, 133, 225, 231], "off": [110, 126, 137, 154, 169, 224, 229], "convolv": [110, 119, 126, 133], "convolut": [110, 111, 119, 126, 231], "block_design": [110, 133], "level_contrast": 110, "signifi": 110, "onset": [110, 111, 112, 119, 126], "anova": 110, "placehold": [110, 127, 160], "_block_": 110, "event_design": [110, 133], "event_spec": 110, "_event_": 110, "fourier_basi": [110, 126, 133], "drift": [110, 111, 121, 126, 231], "tval": [110, 126], "openfmri2nipi": [110, 133], "ons_dur_amp": 110, "openfmri": 110, "ons_dur_map": 110, "stimulu": [110, 120, 224], "durat": [110, 112, 120, 224], "stack2design": [110, 133], "old_x": 110, "new_x": 110, "old_contrast": 110, "new_contrast": 110, "stack_contrast": [110, 133], "stack_design": [110, 133], "confin": 111, "make_dmtx": [111, 133], "remaind": 111, "ancillari": 111, "task": [111, 158, 161, 178, 190, 197, 198, 221], "paradigm": [111, 133, 224], "physiolog": [111, 198], "sinusoid": 111, "low_frequ": 111, "phenomena": 111, "frametim": [111, 119], "light": 111, "show_contrast": [111, 133], "write_csv": [111, 133], "csv": [111, 112], "dmtx_from_csv": [111, 133], "dmtx_light": [111, 133], "hrf_model": [111, 119], "drift_model": 111, "hfcut": 111, "128": [111, 124, 222], "drift_ord": 111, "fir_delai": [111, 119], "add_reg": 111, "add_reg_nam": 111, "min_onset": [111, 119], "framework": [111, 131, 148, 153, 177, 178, 191, 198], "nreg": 111, "nbframe": 111, "fir": [111, 119], "spm_time": [111, 119], "spm_time_dispers": [111, 119], "blank": [111, 177], "period": [111, 121, 224], "nb_onset": 111, "naddreg": 111, "reg_": 111, "notion": [112, 137, 145, 229], "jargon": 112, "con_id": [112, 118, 119], "n_event": 112, "write_to_csv": [112, 133], "csv_file": 112, "load_paradigm_from_csv_fil": [112, 133], "clearer": [112, 137, 229], "image_list": [113, 133, 149, 192], "imagelist": [113, 133, 139, 142, 149, 186], "volume_start_tim": [113, 116, 123, 141], "fmrilist": 113, "fourdimag": 113, "filist": 113, "axis0_gener": [113, 133], "boil": 113, "spectral": [114, 120], "593": 114, "606": 114, "spectral_decomposit": [114, 133], "hrf2decompos": 114, "lambdifi": [114, 126], "3251": 114, "approx": 114, "taylor_approx": [114, 133], "compris": 114, "dhrf": [114, 119], "invertr": [115, 133], "irf": 115, "w0": 115, "arctan": 115, "push": [116, 161, 167, 170, 171, 174], "execut": [116, 123, 127, 133, 178, 185, 191, 197, 227], "bit": [116, 137, 229], "fmriimagelist": [116, 123, 133, 141, 186], "__setitem__": [116, 117], "deleg": 116, "estimatear": [116, 133], "generate_output": [116, 133], "readi": [116, 154, 156, 161, 167, 174, 227], "model_gener": [116, 133], "model_typ": 116, "model_param": 116, "output_ar1": [116, 117, 133], "outfil": 116, "overwrit": 116, "regression_output": 116, "regressionoutput": [116, 133], "output_f": [116, 117, 133], "f_reg_out": 116, "slice_spec": 116, "output_t": [116, 117, 133], "outbas": 116, "output_effect": [116, 118], "output_sd": 116, "reglist": 116, "regressionoutputlist": [116, 133], "outputt": [116, 133, 192], "indirectli": 116, "toutput": [116, 133], "output_resid": [116, 117, 133], "results_gener": [116, 133], "model_iter": 116, "__call__": 117, "stuff": [117, 126, 136, 161, 166, 169], "output_shap": 117, "retval": 117, "res_list": 117, "z_val": 118, "cval_": 118, "shuffl": 118, "z_ffx": 118, "contrast_typ": 118, "tmin": 118, "enhanc": [118, 196], "breakag": 118, "discuss": [118, 134, 160, 180, 186, 192, 195, 196, 198, 224, 229], "brett": [118, 160, 174, 199, 220, 221], "andersson": 118, "wager": 118, "apr": 118, "653": 118, "hypothes": 118, "contrast_dim": 118, "fmri_data": 118, "design_matric": 118, "higher": [118, 197, 198, 202, 224, 229], "perspect": 118, "example_data": [118, 226], "fmri_fil": 118, "get_filenam": 118, "fiac": [118, 137], "fiac0": 118, "run1": 118, "run2": 118, "design_fil": 118, "run1_design": 118, "run2_design": 118, "multi_session_model": 118, "z_imag": 118, "output_z": 118, "output_stat": 118, "output_vari": 118, "n_col": 118, "n_dim": 118, "do_scal": 118, "ar1": [118, 133], "yiled": 118, "vi": [118, 177, 202, 216], "glm_result": 118, "n_time_point": 118, "con_val": 118, "con": 118, "get_beta": [118, 133], "column_index": 118, "accessor": 118, "n_column": 118, "get_logl": [118, 133], "get_ms": [118, 133], "data_sc": [118, 133], "columnwis": 118, "timpuls": 119, "compute_regressor": [119, 133], "exp_condit": 119, "cond": 119, "oversampl": 119, "canonical_deriv": 119, "sought": 119, "creg": 119, "reg_nam": 119, "impuls": [119, 120], "dirac": 119, "glover_hrf": [119, 133], "time_length": 119, "32": [119, 185, 193, 222, 223], "glover_time_deriv": [119, 133], "flover": 119, "spm_dispersion_deriv": [119, 133], "spm_hrf": [119, 120, 133], "spm_time_deriv": [119, 133], "gari": 120, "afni": [120, 137, 196, 197, 198, 221, 224], "glover1999deconvolut": 120, "deconvolut": 120, "bold": [120, 160, 177, 198, 201, 224], "page": [120, 161, 163, 165, 166, 168, 169, 174, 182, 185, 186, 190, 192, 195, 198, 201, 218, 225], "416": 120, "429": 120, "year": [120, 174, 199], "1999": 120, "orlando": 120, "fl": 120, "academ": [120, 198], "c1992": 120, "pk1": 120, "pk2": 120, "width1": 120, "width2": 120, "raw_hrf": 120, "raw": [120, 134, 136, 138, 144, 147], "auditori": 120, "curv": 120, "wrote": [120, 129, 134, 191], "formul": [120, 223], "gamma_param": [120, 133], "rtol": 120, "ddspmt": [120, 133], "peak_disp": 120, "spm_hrf_compat": [120, 133], "dspmt": [120, 133], "gamma_expr": [120, 133], "peak_loc": 120, "peak_fwhm": 120, "peak_delai": 120, "under_delai": 120, "under_disp": 120, "p_u_ratio": 120, "spn": 120, "undershoot": 120, "spmt": [120, 133], "dct_ii_basi": [121, 133], "volume_tim": 121, "normcol": 121, "dct": 121, "ii": [121, 161], "discrete_cosine_transform": 121, "dct_basi": 121, "dct_ii_cut_basi": [121, 133], "cut_period": 121, "wavelength": 121, "cdrift": 121, "n_drift": 121, "arcompon": [122, 133], "drho": 122, "cor": 122, "arcovari": [122, 133], "fmask": [123, 133], "fimg": 123, "dfnum": 123, "dfdenom": 123, "estimate_pooled_covari": [123, 133], "artarget": 123, "orth": [124, 125, 133], "penalty_cov": 124, "2664165549094176e": 124, "penalty_mean": 124, "spm_reml": 124, "quadrat": 124, "penalti": [124, 138], "cov_h": 124, "trrv": [125, 133], "subspac": [125, 137], "96": 125, "97": [125, 176, 185], "_interpol": 126, "interp1d": 126, "linear_interp": [126, 133], "step_funct": [126, 133], "convolve_funct": [126, 133], "bounds_error": 126, "fill_valu": [126, 133], "assume_sort": 126, "interp1": 126, "attributeerror": [126, 149], "github": [126, 153, 156, 162, 164, 165, 166, 167, 169, 170, 171, 174, 186, 227], "395": 126, "10810": 126, "g_interv": 126, "s0": 126, "b_of_t": 126, "anonym": 126, "on_off": 126, "lam": 126, "lambdify_t": [126, 133], "f_interv": 126, "dt": [126, 224], "fn1": 126, "fn2": 126, "wave": 126, "piecewis": [126, 224], "triangular": 126, "0e": 126, "conv": 126, "ftri": 126, "argmax": 126, "arbitrarili": 126, "nexpr": 126, "newexpr": 126, "diracdelta": [126, 224], "sum_express": 126, "got": [126, 127, 157, 161, 169, 185], "_b4": 126, "_b5": 126, "kw": 126, "imterpol": 126, "f_t": 126, "get_pkg_info": [127, 133], "pkg_path": 127, "pkg_commit_hash": [127, 133], "short": [127, 137, 163, 198], "commit": [127, 155, 160, 167, 170, 173, 174, 178, 180, 195], "hash": 127, "commit_info": 127, "txt": [127, 174, 177, 190], "ini": [127, 226], "archive_subst_hash": 127, "install_hash": 127, "git": [127, 153, 156, 161, 162, 166, 168, 169, 170, 171, 173, 174, 181, 182, 184, 191, 227], "archiv": [127, 140, 226], "instal": [127, 153, 154, 157, 158, 161, 162, 168, 173, 174, 177, 180, 189, 192, 194, 225], "repositori": [127, 139, 140, 154, 162, 169, 170, 180, 181, 227], "hash_from": 127, "hash_str": 127, "extend": [128, 156, 167, 188, 191, 197, 201, 230], "gui": [128, 197, 198, 221, 226], "if_datasourc": [128, 133], "msg": [128, 149, 190], "if_example_data": [128, 133], "if_templ": [128, 133], "make_label_dec": [128, 133], "factori": 128, "ldec": 128, "__doc__": 128, "needs_mpl_agg": [128, 133], "needs_review": [128, 133], "review": [128, 153, 164, 174, 186, 192, 196], "broadli": [129, 195], "peopl": [129, 137, 138, 143, 147, 152, 169, 195, 197, 198], "userwarn": 129, "visibl": 129, "deprecationwarn": 129, "urgent": 129, "usag": [129, 191, 229], "strides_from": [130, 133], "fortran": [130, 139, 147, 197], "perl": [131, 197], "strongli": [131, 227], "recommend": [131, 225], "discov": [131, 170], "revert": [131, 181], "grin": [131, 186], "regex": 131, "newstr": 131, "oldstr": 131, "escap": [131, 184], "languag": [131, 197, 198, 221, 227, 230], "robert": [131, 198], "kern": 131, "grep": [131, 174], "decor": [131, 133, 192], "dec": [131, 195], "super_slow": 131, "make_doctest_suit": 131, "snipi": 131, "testutil": 131, "check_dep": [131, 133], "perl_dash_pi": [131, 133], "dry_run": 131, "ass": 131, "grind": 131, "xarg": 131, "print_extended_help": [131, 133], "opt_str": 131, "parser": 131, "cbook": 132, "thank": [132, 160, 170, 174], "is_iter": [132, 133], "is_numlik": [132, 133], "seq_prod": [132, 133], "releas": [133, 135, 136, 139, 155, 173, 175, 180, 183, 187, 188, 189, 190, 192, 194, 195, 198, 225], "dev1": [133, 135, 139, 173, 174, 180, 183, 187, 189, 192, 194, 225], "date": [133, 135, 139, 155, 160, 173, 180, 183, 184, 187, 189, 192, 194, 225], "februari": [133, 135, 139, 173, 180, 183, 187, 189, 192, 194, 225], "2024": [133, 135, 139, 173, 180, 183, 187, 189, 192, 194, 225], "modul": [133, 137, 158, 178, 181, 192, 195, 202, 215, 216, 217, 225, 229, 230], "vbgmm": 133, "ggm": 133, "hierarchical_clust": [133, 192], "weightedforest": 133, "imm": [133, 192], "mixedimm": 133, "von_mises_fisher_mixtur": [133, 192], "vonmisesmixtur": 133, "timediff": [133, 192], "tsdiffplot": [133, 192], "reselimag": 133, "resel": 133, "bipartite_graph": [133, 192], "bipartitegraph": 133, "parcel_analysi": [133, 192], "parcelanalysi": 133, "imageinterpol": 133, "kernel_smooth": [133, 192, 223], "linearfilt": [133, 223], "affine2d": 133, "rigid2d": 133, "similarity2d": 133, "chain_transform": [133, 192], "chaintransform": 133, "groupwise_registr": [133, 192], "fmrirealign4d": 133, "image4d": 133, "realign4d": [133, 192], "realign4dalgorithm": 133, "spacerealign": 133, "histogram_registr": [133, 192], "histogramregistr": [133, 223], "polyaffin": [133, 192], "similarity_measur": [133, 192], "correlationcoeffici": 133, "correlationratio": 133, "correlationratiol1": 133, "discreteparzenmutualinform": 133, "mutualinform": 133, "normalizedmutualinform": [133, 143], "parzenmutualinform": 133, "similaritymeasur": 133, "supervisedlikelihoodratio": 133, "type_check": [133, 192], "brain_segment": [133, 192], "braint1segment": 133, "bayesian_mixed_effect": [133, 192], "bench": [133, 192], "bench_intvol": [133, 192], "empirical_pvalu": [133, 192, 202], "normalempiricalnul": [133, 202, 214], "factorterm": 133, "randomeffect": 133, "mixed_effects_stat": [133, 192], "mixedeffectsmodel": 133, "inversegaussian": 133, "poisson": 133, "nlsmodel": [133, 192], "arestim": 133, "armodel": 133, "glsmodel": 133, "stepfunct": 133, "chibarsquar": 133, "chisquar": 133, "eccon": 133, "ecquasi": 133, "hotel": 133, "intrinsicvolum": 133, "multilinearform": 133, "onesidedf": 133, "fnsum": 133, "fast_dist": [133, 192], "cli": [133, 192], "img3dto4d": [133, 192], "img4dto3d": [133, 192], "conftest": [133, 192], "slicemak": 133, "image_spac": [133, 192], "array_coord": [133, 192], "arraycoordmap": 133, "coordinate_map": [133, 137, 192, 229], "coordmapmak": 133, "coordmapmakererror": 133, "coordsysmakererror": 133, "coordinatesystemerror": 133, "spaceerror": 133, "spminfo": 133, "nibcompat": [133, 192], "nifti_ref": [133, 192], "niftierror": 133, "affine_util": [133, 192], "permutation_test": [133, 192], "permutation_test_onesampl": 133, "permutation_test_onesample_graph": 133, "permutation_test_twosampl": 133, "bsa_io": [133, 192], "meshdomain": 133, "hierarchical_parcel": [133, 192], "hierarchicalroi": 133, "parcel_io": [133, 192], "statistical_map": [133, 192], "linearmodel": 133, "reproducibility_measur": [133, 192], "simul_multisubject_fmri_dataset": [133, 192, 216], "viz_tool": [133, 192, 214], "activation_map": [133, 192, 214], "anat_cach": [133, 192], "coord_tool": [133, 192], "maps_3d": [133, 192, 214], "baseslic": 133, "basestackedslic": 133, "cutax": 133, "orthoslic": 133, "xslicer": 133, "yslicer": 133, "zslicer": 133, "test_activation_map": [133, 192], "test_cm": [133, 192], "test_coord_tool": [133, 192], "test_edge_detect": [133, 192], "test_slic": [133, 192], "modal": [133, 141, 192, 198, 224], "designmatrix": 133, "experimental_paradigm": [133, 192], "blockparadigm": 133, "eventrelatedparadigm": 133, "modeloutputimag": 133, "fmrilinearmodel": 133, "generallinearmodel": 133, "hemodynamic_model": [133, 192], "realfunc": [133, 192], "secondstag": 133, "trace": [133, 192], "interp1dnumer": 133, "timeconvolv": 133, "pkg_info": [133, 192], "visibledeprecationwarn": 133, "perlpi": [133, 192], "hope": [134, 197, 219], "serv": [134, 186, 197, 201], "jarrod": [134, 191, 199, 220, 221], "millman": [134, 199, 220, 221], "collabor": [134, 161, 188, 195, 197, 219], "topic": 134, "unfortun": 134, "birn": 134, "focu": [134, 158, 178], "yann": [134, 221], "cointepa": [134, 220, 221], "home": [134, 144, 160, 163, 174, 191, 219, 226, 227], "huge": [134, 147], "server": 134, "laptop": 134, "institut": [134, 196], "januari": 134, "rm": [134, 185, 191], "organ": [134, 136, 155, 161, 178, 186, 197, 220], "declin": 134, "record": 134, "dicom": [134, 137], "gi": 134, "protocol": [134, 161, 224], "why": [134, 137, 155, 161, 170, 192, 194], "decid": [134, 137, 199], "greatli": 134, "abil": [134, 137, 161, 197], "moreov": [134, 137], "viewer": [134, 139, 180], "superimpos": [134, 217], "anatomist": 134, "storag": [134, 144, 145], "difficult": [134, 154, 158, 176, 178, 195, 197], "cover": [134, 158, 178], "url": [134, 145, 161, 171, 186], "manag": [134, 167, 190, 197, 227], "attach": [134, 136, 138, 147, 190, 224], "seen": 134, "distant": 134, "ftp": 134, "simpler": 134, "hidden": 134, "mind": [134, 195], "openrepositori": 134, "repositoryurl": 134, "getlocalfil": 134, "niftifilenam": 134, "chose": [134, 137], "sql": 134, "transfer": 134, "eeg": [134, 221], "meg": [134, 221], "ctf": 134, "sulci": 134, "parallel": [136, 197, 198, 230], "book": [136, 165, 167], "vtk4": 136, "enthought": [136, 184, 191, 195, 196], "example_dataset": 136, "writing_vtk_files_using_python": 136, "svn": [136, 146, 155, 167, 177, 185], "tvtk_dataset": 136, "public": [136, 161, 192, 198], "kitwar": [136, 196], "cgi": 136, "viewcv": 136, "checkout": [136, 160, 161, 167, 169, 170], "datamanipul": 136, "buildugrid": 136, "plain": [136, 193, 217], "Of": [136, 137, 160, 195, 224, 229], "vtkpoint": 136, "insertnextpoint": 136, "getpoint": 136, "a00374": 136, "vtktriangl": 136, "counterclockwis": 136, "vtk_triangl": 136, "vtkcell": 136, "getcelltyp": 136, "pt_id": 136, "getpointid": 136, "getid": 136, "getnumberofid": 136, "setid": 136, "unstructur": 136, "ugrid": 136, "vtkunstructuredgrid": 136, "setpoint": 136, "insertnextcel": 136, "pt_data": 136, "getpointdata": 136, "cell_data": 136, "getcelldata": 136, "textur": 136, "tensor": [136, 198], "tcoord": 136, "getscalar": 136, "tri_pt_data": 136, "vtkfloatarrai": 136, "insertnextvalu": 136, "setscalar": 136, "forget": [136, 176], "tri_cell_data": 136, "tri_pt_vec": 136, "setnumberofcompon": 136, "insertnexttuple3": 136, "setvector": 136, "testcod": 136, "live": 136, "mapper": 136, "actor": 136, "vtkdatasetmapp": 136, "setinput": 136, "vtkactor": 136, "setmapp": 136, "ren": 136, "vtkrender": 136, "renwin": 136, "vtkrenderwindow": 136, "addrender": 136, "iren": 136, "vtkrenderwindowinteractor": 136, "setrenderwindow": 136, "addactor": 136, "scene": 136, "schroeder": 136, "ken": 136, "martin": 136, "bill": 136, "lorensen": 136, "toolkit": 136, "orient": [136, 137, 150, 179, 198, 224, 230], "inc": [136, 185], "jonathan": [137, 160, 199, 221], "gael": [137, 186, 191], "varoquaux": 137, "rough": 137, "undigest": 137, "mention": [137, 138, 147, 224], "lpiimag": 137, "xyzimag": 137, "ijk_to_kij": 137, "kij_to_ra": 137, "ijk_to_ra": 137, "yup": 137, "another_kij_to_ra": 137, "x_start": 137, "y_start": 137, "z_start": 137, "x_step": 137, "y_step": 137, "z_step": 137, "a_kij": 137, "a_kij_yzx": 137, "rastransform": 137, "anterior": [137, 147, 152], "superior": [137, 147, 152], "inferior": [137, 147, 152], "reorder_rang": 137, "to_lp": 137, "lpstransform": 137, "to_ra": 137, "axis_nam": 137, "raitransform": 137, "excus": 137, "rst": [137, 172, 174, 177, 186, 190], "am": [137, 147, 161, 170], "fsl": [137, 140, 149, 186, 188, 197, 198, 221], "versu": 137, "neurolog": 137, "mess": 137, "hear": 137, "tailarach": [137, 223, 229], "colour": 137, "bike": 137, "shed": 137, "someon": [137, 161, 169], "paint": 137, "neuro": 137, "goal": [137, 196, 221], "affine_imag": 137, "get_data": [137, 179], "flip": [137, 152], "pylab": [137, 216], "sentenc": 137, "meet": [137, 176, 220], "bother": 137, "transform_funct": 137, "coord_si": 137, "veer": 137, "displac": 137, "act": 137, "to_matvec": 137, "xyz_world": 137, "095": 137, "ubuntu": [137, 165, 180, 183, 227], "mincinfo": 137, "signed__": 137, "32768": 137, "32767": 137, "zspace": 137, "yspace": 137, "xspace": 137, "minchead": 137, "netcdf": 137, "varid": 137, "vartyp": 137, "dimension____": 137, "patient": [137, 144], "regular__": 137, "centr": 137, "509994506836": 137, "0950012207031": 137, "rootvari": 137, "group________": 137, "true_": 137, "signtyp": 137, "valid_rang": 137, "var_attribut": 137, "_fillvalu": 137, "certainli": [137, 227], "puls": 137, "pipelin": [137, 139, 143, 180, 186, 188], "group_axi": 137, "unknown_acquisit": 137, "deliber": [137, 171], "question": [137, 194, 229], "spce": 137, "j30": 137, "j30_to_xyz": 137, "2mm": [137, 152], "aren": 137, "human": [137, 172, 220], "beings": 137, "steal": [137, 195], "quot": [137, 195, 196, 198], "apolog": 137, "glad": 137, "electron": 137, "matthew": [137, 160, 174, 186, 199, 221], "board": 137, "marker": 137, "newcom": 137, "dai": 137, "everyon": 137, "obscur": [137, 154], "neuroscientist": 137, "physicist": 137, "statistician": 137, "olling": 137, "thread": [137, 154, 185], "commun": [137, 153, 167, 197, 198], "php": [137, 196], "9140": 137, "establish": 137, "appar": 137, "rai": 137, "rasimag": 137, "neurotransform": 137, "_doc": 137, "advoc": [137, 195], "acronym": 137, "who": [137, 138, 147, 160, 169, 170, 174, 191, 195, 197], "rope": [137, 190], "phrase": 137, "feel": [137, 153, 155, 178, 195, 200], "decreas": 137, "scream": 137, "program": [137, 197, 198, 227], "whatev": [137, 195, 229], "pretti": [137, 160], "gordon": 137, "kindlmann": 137, "nrrd": 137, "teem": 137, "sourceforg": [137, 177], "net": [137, 177], "adopt": [137, 153, 172, 198], "itk": 137, "discrep": 137, "disagr": 137, "technician": 137, "him": 137, "answer": [137, 223, 229], "heck": 137, "ijktora": 137, "ras_to_lp": 137, "ijk_to_lp": 137, "shouldn": 137, "address": [137, 155, 156, 160], "somedai": 137, "sentiment": 137, "acknowledg": 137, "newdata": 137, "kij_to_lp": 137, "saw": 137, "kij_to_ijk": 137, "evidenc": 137, "lot": [137, 138, 147, 186, 195], "throw": [137, 160], "288": 137, "won": [137, 185], "temporarili": 137, "disabl": [137, 161, 185, 190], "builtin": [137, 229], "saniti": 137, "slowest": [138, 147], "imagin": [138, 140, 147, 152, 226], "img_arr": [138, 147], "memmap": [138, 147], "spm_read_vol": [138, 147], "spm_vol": [138, 147], "invari": [138, 147], "paper": [138, 147], "situat": [138, 147, 161, 198], "arr2": 138, "discontigu": 138, "circumst": [138, 147], "img_obj": [138, 147], "first_z_slic": [138, 147], "from_arrai": 138, "jt": [138, 147], "compromis": [138, 147], "insist": [138, 147], "leftmost": [138, 147], "rightmost": [138, 147], "repli": [138, 147], "quickstart": [138, 147, 180, 192, 227], "nativ": [139, 186, 197], "brainvisa": [139, 144, 145, 180, 198, 221], "databas": [139, 144, 145, 161, 180, 197], "todai": 139, "batch": [139, 150, 188, 198], "refactor": [139, 142, 156, 161, 187, 190, 199], "softwar": [139, 155, 175, 180, 185, 186, 191, 192, 195, 196, 197, 198, 219, 221, 227, 230], "my_repo": 140, "subjectrepositori": 140, "my_designmak": 140, "mydesignpars": 140, "my_pipelin": 140, "realignerfactori": 140, "slicetimerfactori": 140, "coregisterfactori": 140, "flirt": [140, 149], "normalizerfactori": 140, "filterfactori": 140, "designfactori": 140, "my_analysi": 140, "subjectanalysi": 140, "subject_pipelin": 140, "anger": 141, "usecas": 142, "enough": [143, 181], "pluggabl": 143, "anat_img": [143, 149, 223], "splineinterpol": 143, "registrationstrategi": 143, "w2w": 143, "img_fix": 143, "img_mov": 143, "new_img": 143, "imagea": 143, "v2w": [143, 152], "imageb": 143, "new_coordmap": 143, "mismatch": 143, "quickli": [143, 178], "__eq__": 143, "robust": [143, 153], "recal": 143, "subject1": 144, "subject2": 144, "sess1": 144, "repo": [144, 161, 169, 170, 174, 186, 193], "gssrespositori": 144, "root_dir": 144, "experiment1": 144, "patient1": 144, "sess2": 144, "patient2": 144, "control1": 144, "control2": 144, "hdf5": [144, 145], "entail": 145, "slot": 145, "enabl": [145, 185, 191], "timecours": 145, "005": 145, "geospati": 145, "telescop": 145, "web": [145, 172, 197], "technologi": 145, "niftii": 145, "hdf": 145, "highli": [145, 195], "excel": [145, 158, 167, 170, 172, 178, 186, 190, 227, 230], "pytabl": 145, "uri": 145, "guidanc": 145, "w3c": 145, "briefli": [145, 230], "entiti": 145, "resourc": [145, 166, 168, 173, 195], "oppos": 145, "xml": 145, "incorpor": [145, 169, 196], "referenc": [145, 177], "denorm": 145, "tend": [145, 176, 197], "said": 145, "adher": 145, "leverag": 145, "beyond": 145, "scope": 145, "xpath": 145, "lxml": 145, "biomag": 146, "wikidot": 146, "dicompyl": 146, "cirl": 146, "berkelei": [146, 176, 198, 199, 221], "cburn": [146, 191, 193], "trunk": [146, 164, 171, 193], "nifti_view": 146, "almost": [147, 198, 227, 229], "surround": 147, "ruler": 147, "neck": 147, "ky": 147, "numarrai": [147, 221], "anyon": [147, 161], "incur": 147, "obviou": [147, 152, 178, 196, 197, 229], "san": 147, "arcan": 147, "zyx": [147, 152], "awar": 147, "happi": [147, 161], "movement": [148, 221], "coregistr": [148, 150, 152], "intermod": 148, "glob": 149, "some4d": 149, "img_list": 149, "load_list": 149, "vol0": 149, "mean_img": 149, "mean_some4d": 149, "some3d": 149, "mean_some3d": 149, "reggi": [149, 223], "mocod": 149, "unresl": 149, "rmocod": 149, "rcoord_map": 149, "mocovol": 149, "a_vol": 149, "coordmaperror": 149, "rmocovol": 149, "rmocod_img": 149, "list_to_imag": 149, "rsome4d": 149, "mocod_img": 149, "imagelisterror": 149, "timestamp": 149, "st_list": 149, "slicetimeerror": 149, "sliceaxi": 149, "enumer": 149, "sliceax": 149, "st_img": 149, "stsome4d": 149, "scanner_img": 149, "voxel2scann": 149, "mni_img": 149, "voxel2mni": 149, "epi4d": 149, "mni152t1": 149, "coreg": 149, "coreg_cmap": 149, "c_anat_img": 149, "compose_with": 149, "template_cmap": 149, "template_dim": 149, "c_anat_cmap": 149, "fnirt": 149, "norm_cmap": 149, "full_cmap": 149, "w_anat_data": 149, "resliced_to_grid": 149, "w_anat_img": 149, "w_func_list": 149, "w_img_data": 149, "prime": 152, "obliqu": 152, "input_coord": [152, 229], "axis_i": 152, "axis_j": 152, "axis_k": 152, "4mm": 152, "180": 152, "axis_z": 152, "axis_x": 152, "axis0": 152, "axis1": 152, "axis2": 152, "pixelarrai": 152, "infil": 152, "voxel2mm": 152, "from_data_and_mat": 152, "imga": 152, "infile_a": 152, "vx2mma": 152, "imgb": 152, "infile_b": 152, "vx2mmb": 152, "mm2vxb": 152, "cma": 152, "cmb": 152, "voxa_to_voxb": 152, "composewith": 152, "wikipedia_function_composit": 152, "remind": [152, 161, 169], "somehow": 152, "inv_m2": 152, "mm2vxb_map": 152, "vx2mma_map": 152, "composedwith": 152, "t_coordmap": 152, "mm2mm": 152, "v_coordmap": 152, "worlda": 152, "worldb": 152, "magnet": [152, 198, 220], "isocent": 152, "primari": [152, 222], "v2v": 152, "accumul": 152, "transformatio": 152, "host": [153, 166, 214], "immedi": [153, 161], "clone": [153, 161, 162, 167, 170, 174, 227], "build_ext": [153, 184], "pythonpath": 153, "pick": [153, 161, 178, 197, 198], "data_fil": 153, "effort": [153, 199, 228], "readabl": [153, 155, 161, 172, 176, 230], "welcom": 153, "mail": [153, 155, 161, 170, 174], "yourself": [153, 161, 163, 171], "plan": [153, 178, 180, 188, 192, 196, 197], "ourselv": [153, 196, 223], "strive": 153, "workflow": [153, 164, 166, 168, 170, 174, 198], "prematur": [153, 176], "evil": [153, 176], "email": [153, 155, 170], "instruct": [153, 157, 161, 162, 163, 165, 169, 171, 174, 181, 182, 184, 185, 193, 196, 226, 227], "meson": [154, 174], "frontend": 154, "pip": [154, 158, 174, 178], "invok": 154, "ninja": 154, "pyproject": [154, 174], "toml": [154, 174], "subdirectori": [154, 172, 178, 191, 226], "cd": [154, 162, 170, 171, 174, 185, 191, 226, 227], "j1": 154, "spot": 154, "dilig": 155, "brief": 155, "appreci": 155, "histori": [155, 167, 225, 228], "backtrack": 155, "rational": 155, "skim": 155, "novel": 155, "patch": [155, 168, 169, 173, 180, 181, 182, 184], "emac": [155, 172, 173, 180, 189, 195, 202, 216], "fantast": 155, "hit": 155, "xemac": 155, "mark": [155, 178, 199, 224], "setq": [155, 190], "youradddress": 155, "obfusc": 155, "credit": [155, 191], "AT": 155, "past": 155, "classifi": 156, "categori": 156, "enh": [156, 161], "bw": 156, "opt": [156, 185, 193], "bk": 156, "sty": 156, "pep8": 156, "conform": 156, "whitespac": [156, 193], "wip": 156, "rebas": [156, 169], "incomplet": [156, 201], "relax": 156, "slightli": [156, 185, 229], "habit": 156, "glanc": 156, "submit": [156, 180, 181, 182, 184, 199], "feedback": 156, "fundament": 156, "edit": [156, 160, 164, 167, 170, 172, 174, 185, 190, 227], "button": [156, 161, 163], "mrg": 156, "64bitcythonextensionsonwindow": 157, "download": [157, 165, 174, 178, 181, 182, 184, 185, 190, 191, 192, 197, 225, 226], "microsoft": [157, 184, 227], "2e911956": 157, "f90f": 157, "4bfb": 157, "8231": 157, "e292a7b6f287": 157, "grmsdkx_en_dvd": 157, "iso": 157, "aspx": 157, "18950": 157, "14597": 157, "vcsetup": 157, "ex": 157, "devguid": 157, "issue16161": 157, "exercis": [158, 178], "suffici": [158, 178, 197], "pytest": [158, 178], "runner": [158, 178], "tester": [158, 178], "mymodul": 159, "somecrash": 159, "workspac": 159, "pdb": 159, "dbstop": 159, "sphinx": [159, 172, 173, 180, 186, 194], "introspect": 159, "shell": [159, 184, 185, 190, 191, 198, 221, 226, 230], "ipshellemb": 159, "ipshel": 159, "person": 160, "gitconfig": 160, "yourdomain": [160, 170], "statu": [160, 161, 167, 170], "br": 160, "wdiff": 160, "vim": 160, "config": [160, 167, 170, 184, 185, 226], "benefit": [160, 176, 195], "shorten": 160, "lg": [160, 161], "cred": 160, "creset": 160, "yellow": 160, "cgreen": 160, "blue": 160, "abbrev": 160, "6d8e1e": 160, "nf": [160, 161], "ago": 160, "d304a73": 160, "pull": [160, 161, 162, 167, 169, 170, 173, 180], "hhuuggoo": 160, "master": 160, "week": 160, "terhorst": 160, "4aff2a8": 160, "test_bugfix": 160, "hugo": 160, "a7ff2e5": 160, "summit": 160, "corran": 160, "webster": 160, "68f6752": 160, "axisindex": 160, "index_bi": 160, "sketchi": 160, "corr": 160, "376adbd": 160, "b605216": 160, "joshu": 160, "2e991e8": 160, "outer": 160, "7beda5a": 160, "65af65": 160, "956fbab": 160, "remot": [160, 161, 167, 169, 170, 171], "upstream": [160, 161, 167, 169, 170], "yuri": 160, "zaytsev": 160, "fork": [161, 164, 168, 170], "fetch": [161, 169, 171], "ipython": [161, 172, 173, 181, 182, 184, 195, 225, 226, 227], "bugfix": 161, "stuck": 161, "explan": 161, "sound": 161, "strang": 161, "branchnam": 161, "buxfix": 161, "hack": [161, 170], "my_new_fil": 161, "readm": [161, 174], "untrack": 161, "new_file_nam": 161, "faith": [161, 170], "tangl": 161, "dropdown": 161, "menu": [161, 184, 190], "click": [161, 163], "enter": 161, "attent": 161, "preliminari": [161, 186], "unwant": 161, "colon": [161, 193], "tag": [161, 174], "admin": 161, "githhub": 161, "ssh": [161, 163], "gitk": 161, "network": [161, 195], "fanci": [161, 229], "cool": [161, 169], "meantim": 161, "sternli": 161, "messi": 161, "worri": [161, 195], "ahead": 161, "harmon": 161, "replai": 161, "tear": 161, "backup": [161, 186], "tmp": [161, 174, 185], "succinctli": 161, "conflict": 161, "man": 161, "luckili": 161, "straightforward": [161, 229], "abort": 161, "notic": [161, 223], "forgot": 161, "reflog": 161, "8630830": 161, "278dd2a": 161, "finish": [161, 170], "11ee694744f2552d": 161, "26aa21a": 161, "seek_gzip_factori": 161, "leak": 161, "gzip": 161, "botch": 161, "embarrass": 161, "typo": 161, "poster": [161, 192], "onelin": [161, 169], "eadc391": 161, "a815645": 161, "2dec1ac": 161, "13d7934": 161, "6ad92e5": 161, "maskedconst": 161, "29001ed": 161, "nep": 161, "copul": 161, "structured_array_extens": 161, "sensibl": [161, 169, 217], "editor": [161, 226, 227], "reword": 161, "amend": 161, "squash": 161, "meld": 161, "fixup": 161, "THAT": 161, "WILL": 161, "BE": 161, "achiev": [161, 197], "revis": [161, 218], "detach": [161, 174], "721fc64": 161, "199": 161, "insert": [161, 173, 190, 193], "0f22701": 161, "successfulli": 161, "sophist": 161, "went": [161, 196], "recoveri": 161, "paus": 163, "overview": [164, 168, 189], "mirror": 164, "debian": [165, 180, 183, 190, 227], "sudo": [165, 181, 193, 226, 227], "apt": [165, 181, 190, 227], "fedora": [165, 180, 183, 227], "yum": [165, 182], "msysgit": 165, "osx": [165, 194], "scm": 165, "comprehens": 166, "tailor": 166, "servic": [166, 221], "guid": [167, 173, 192, 228], "pro": 167, "cheat": [167, 172, 173, 180], "sheet": [167, 172, 173, 180], "parabl": 167, "concept": 167, "behind": [167, 229], "foundat": 167, "fernando": [167, 191, 195, 199, 221], "perez": [167, 195, 199, 220, 221], "tip": 167, "crash": [167, 173], "subvers": [167, 185], "thumb": 167, "linu": 167, "torvald": 167, "tutori": [168, 188, 191, 192, 224, 225, 228], "Being": 169, "scari": 169, "rw": 169, "ff": 169, "rejoin": 169, "easiest": [170, 172, 184, 193], "quickest": 170, "test_my_bug": 170, "funni": 170, "warmli": 170, "0002": 170, "refresh": 170, "investig": 171, "accident": 171, "satisfact": 171, "graphviz": [172, 194], "makefil": 172, "latex": [172, 177], "websit": [172, 186, 227], "browser": [172, 177, 189], "primer": 172, "guidelin": [172, 177, 178, 180, 192, 227], "faq": [172, 192, 198], "coverag": 173, "checklist": 173, "changelog": [173, 174, 180], "outstand": 174, "contributor": 174, "prev_releas": 174, "uniq": 174, "shortlog": 174, "opportun": 174, "mailmap": 174, "duplic": 174, "copyright": [174, 195], "conf": [174, 177], "licens": [174, 192, 194, 195, 198], "rst2html": [174, 190], "pypi": 174, "tar": [174, 185, 191, 226], "mkdir": [174, 185, 191, 226], "eg_log": 174, "run_log_exampl": 174, "virtualenv": [174, 180, 189], "printout": 174, "stdout": [174, 190], "venv": [174, 191], "wheel": [174, 227], "builder": 174, "maco": 174, "travi": [174, 178], "macpython": 174, "privileg": 174, "__version__": 174, "upload": 174, "setuptool": [174, 191], "intro": 174, "pypirc": 174, "usernam": 174, "__token__": 174, "twine": 174, "gpg": 174, "announc": 174, "wors": 175, "howto": 175, "focus": 176, "usabl": 176, "significantli": 176, "spend": [176, 197, 228], "py4scienc": 176, "uc": [176, 199], "ctype": 176, "weav": 176, "blitz": 176, "offend": 176, "great": 176, "advic": [176, 199], "fellow": 176, "programm": [176, 197, 199], "kent": 176, "beck": 176, "donald": 176, "knuth": 176, "tim": 176, "elimin": 176, "recod": 176, "wherein": 177, "subsect": 177, "hunter": [177, 195, 196, 199, 220, 221], "thousand": 177, "_sphinx_help": 177, "sphinx_help": 177, "grow": 177, "abbrevi": 177, "underscor": 177, "hyphen": 177, "frequent": [177, 194], "links_nam": 177, "_targetnam": 177, "external_websit": 177, "hyperlink": 177, "blah": 177, "targetname_": 177, "autodoc": 177, "facil": 177, "backend_bas": 177, "locationev": 177, "mpl_connect": 177, "michael": 177, "droettboom": 177, "pygment": 177, "highlight": 177, "setp": 177, "anim": 177, "antialias": 177, "aa": 177, "snip": 177, "inlin": 177, "markup": 177, "ital": 177, "monotyp": 177, "fairli": [177, 198, 224, 229, 230], "indent": [177, 202, 216], "tab": [177, 190, 202, 216], "nil": [177, 202, 216], "ft": [177, 202, 216], "sw": [177, 202, 216], "plt": 177, "ylabel": 177, "leftarrow": 177, "foral": 177, "delta_1": 177, "rho_1": 177, "sigma_2": 177, "alpha_2": 177, "prime_2": 177, "prime_2u": 177, "sphinxext": [177, 193], "mathmpl": 177, "mathpng": 177, "flavor": 177, "pngmath": 177, "dvipng": 177, "jsmath": 177, "javascript": 177, "ext": [177, 193], "devel": [177, 182, 227], "eleg": 177, "scalabl": [177, 197], "hire": [177, 199, 202, 216, 224], "codec": 177, "codecinfo": 177, "incrementalencod": 177, "bufferedincrementalencod": 177, "incrementaldecod": 177, "bufferedincrementaldecod": 177, "streamwrit": 177, "streamread": 177, "streamreaderwrit": 177, "streamrecod": 177, "sphinx_liter": 177, "_making_a_list": 177, "_making_a_t": 177, "making_a_list": 177, "_making_link": 177, "pocoo": 177, "docutil": [177, 190], "quickref": 177, "meth": 177, "figurecanvasbas": 177, "_ipython_highlight": 177, "sourcecod": 177, "_formatting_text": 177, "literalinclud": 177, "_using_math": 177, "rst_emac": 177, "_sphinx_liter": 177, "farm": 178, "buildbot": 178, "assert_array_equ": 178, "assert_almost_equ": 178, "test_": 178, "test_coordinate_system": 178, "stringio": 178, "buffer": [178, 190], "freed": 178, "fixtur": 178, "fine": 178, "test_func": 178, "myfil": 178, "wt": 178, "exit": [178, 191], "enclos": 178, "refus": 178, "mkstemp": 178, "namedtemporaryfil": 178, "platform": [178, 185, 197], "fd": 178, "tmpfile": [178, 186], "fake_imag": 178, "unlink": 178, "temp": [178, 190], "thoroughli": 178, "big": [178, 185], "axampl": 178, "test_index": 178, "assert_equ": 178, "assert_rais": 178, "doctestplu": 178, "varieti": [178, 230], "test_maxmin_valu": 178, "test_clust": 178, "testclust": 178, "testkmeans1": 178, "statement": [178, 195], "sv": 178, "docest": 178, "example3d": 179, "voxel_posit": 179, "world_posit": 179, "roadmap": [180, 187], "trick": [180, 189], "stock": 181, "invoc": 181, "deb": 181, "liblapack": [181, 185], "mayavi2": [181, 217], "virtualenvwrapp": 181, "earlier": 182, "mandriva": 182, "cento": 182, "gcc": [182, 185, 195], "super": 183, "pythonxi": 184, "suit": [184, 191, 197], "mingw": [184, 185], "brave": 184, "compil": [184, 190, 227], "mingw32": [184, 185], "leg": 184, "distutil": [184, 185], "cfg": [184, 185], "inst": 184, "xp": 184, "cygwin": [184, 185], "bash": [184, 191], "prompt": [184, 191], "affair": 185, "vista": 185, "enterpris": 185, "32bit": 185, "chunk": 185, "sua": 185, "variant": [185, 195], "msy": 185, "environ": [185, 191, 197, 220, 227], "bzip2": 185, "snapshot": 185, "bz2": [185, 186], "coreutil": 185, "diffutil": 185, "gawk": 185, "msyscor": 185, "binutil": 185, "20070129": 185, "unpack": [185, 226], "TO": 185, "libexec": 185, "scroll": 185, "ufconfig": 185, "amd": 185, "bat": 185, "export": [185, 227], "drivelett": 185, "cygdriv": 185, "xconfig": 185, "3189": 185, "l2size": 185, "hour": 185, "lapack_xx": 185, "plat": 185, "_nt": 185, "funrol": 185, "o3": 185, "malign": 185, "msse2": 185, "blaslib": 185, "lf77bla": 185, "latla": 185, "stai": 185, "cp": [185, 226], "liblapack_atla": 185, "lapack_nt": 185, "xerbla": 185, "libf77bla": 185, "libcbla": 185, "libatla": 185, "goto": [185, 190], "mk": 185, "bla": [185, 230], "llapack": 185, "lcbla": 185, "lg2c": 185, "libamd": 185, "libumfpack": 185, "fftw_xx": 185, "sse2": 185, "malloc16": 185, "f77": 185, "mangl": 185, "OR": 185, "processor": 185, "libfftw3": 185, "fftw3": 185, "libnam": 185, "flapack": 185, "blas_opt": 185, "lapack_opt": 185, "f77bla": 185, "cbla": 185, "g2c": 185, "library_dir": 185, "include_dir": 185, "fcompil": 185, "gnu": [185, 196, 198], "bdist_wininst": 185, "folder": [185, 226], "show_config": 185, "sprint": 186, "sidebar": 186, "trac": 186, "blueprint": 186, "test_registr": 186, "test_autoalign_nmi_value_2": 186, "test_seg": 186, "test_texture2": 186, "za": 186, "z0": 186, "_open": 186, "test_file_roundtrip": 186, "pyniftiio": 186, "harmless": 186, "merge_imag": 186, "emptycopi": 186, "dress": 186, "undress": 186, "ramp": 186, "weekli": 186, "cron": 186, "job": [186, 195, 230], "nifticlib": 186, "prototyp": [188, 197], "summer": 188, "interoper": [188, 221], "checker": 189, "ropemac": 189, "pragmat": 189, "emacs_python_mod": 190, "el": 190, "promot": [190, 195], "demot": 190, "alist": 190, "toc": 190, "symlink": [190, 191], "came": [190, 199], "plumb": 190, "webpag": [190, 198], "usr": [190, 191], "env": [190, 191], "python3": [190, 227], "sy": 190, "subprocess": 190, "popen": 190, "parseabl": 190, "cat": 190, "argv": 190, "pipe": [190, 193], "readlin": 190, "epylint": 190, "somepyfil": 190, "pycodecheck": 190, "defun": 190, "pymac": 190, "lisp": 190, "gnome": 190, "gnomerc": 190, "bashrc": [190, 227], "lispei": 190, "restart": [190, 227], "fluidli": 190, "f9": 190, "f10": 190, "f11": 190, "brows": 190, "ecb": 190, "isol": 191, "interfer": 191, "constantli": 191, "reinstal": 191, "scipy2008": 191, "heavili": 191, "blog": 191, "prabhu": 191, "hi": 191, "virtual": [191, 196, 224], "encourag": [191, 195], "tarbal": 191, "xzf": 191, "ln": 191, "echo": [191, 227], "sbin": 191, "x11": 191, "easy_instal": 191, "deactiv": 191, "venv_switch": 191, "sh": [191, 227], "virtualenvrc": 191, "ne": 191, "fi": 191, "venv_path": 191, "activate_env": 191, "rcfile": 191, "rc": 191, "bash_profil": [191, 227], "prerequisit": [191, 195], "pwd": 191, "0b2": 191, "geographi": [192, 225], "glossari": [192, 225], "neurospin": [192, 198, 199], "peer": 192, "macport": 193, "inheritance_diagram": 193, "port": 193, "cmapx": 193, "cmapx_np": 193, "dia": 193, "hpgl": 193, "imap": 193, "imap_np": 193, "ismap": 193, "mif": 193, "mp": 193, "pcl": 193, "pic": 193, "ps2": 193, "svg": 193, "svgz": 193, "tk": [193, 227], "vml": 193, "vmlz": 193, "vtx": 193, "xdot": 193, "238": 193, "generate_dot": 193, "_format_node_opt": 193, "this_node_opt": 193, "ioerror": 193, "errno": 193, "broken": 193, "picki": 193, "backtick": 193, "spell": 194, "licenc": 194, "bsd": [194, 198, 218], "gotcha": 194, "2004": [195, 199], "believ": [195, 219], "legal": 195, "cite": 195, "hous": 195, "gpl": [195, 196, 198], "countless": 195, "reus": 195, "wide": [195, 197, 198, 202], "redistribut": 195, "oblig": 195, "famou": 195, "major": [195, 197, 221], "mit": 195, "psf": 195, "proprietari": [195, 197], "sell": 195, "copyleft": 195, "permiss": [195, 198], "paragraph": 195, "tex": 195, "commod": 195, "vacuum": 195, "drive": 195, "inadvert": 195, "skill": 195, "kick": 195, "parlanc": 195, "compet": 195, "possess": 195, "damn": 195, "market": 195, "paid": 195, "compani": [195, 196, 227], "legitim": 195, "infect": 195, "viral": 195, "bore": 195, "fltk": 195, "sector": [195, 196], "commerci": [195, 196, 198], "doubt": 195, "fear": 195, "realiti": 195, "hunt": 195, "war": 195, "felt": 195, "harm": 195, "unpalat": 195, "forgo": 195, "tough": 195, "gpld": 195, "motiv": 195, "convinc": 195, "amen": 195, "lgpl": [195, 196, 198], "eas": 195, "loath": 195, "encount": [195, 224], "british": 196, "tiscali": 196, "english": 196, "d0082350": 196, "pain": [196, 224], "industri": 196, "wherev": 196, "richard": 196, "stallman": 196, "attract": 196, "monei": 196, "nation": 196, "FOR": 196, "biomed": 196, "dissemin": 196, "freeli": [196, 197], "research": [196, 197, 198, 219], "educ": 196, "profit": 196, "govern": 196, "laboratori": [196, 198, 221], "permit": 196, "na": [196, 224], "mic": 196, "rosenlaw": 196, "oslbook": 196, "htm": 196, "opensourc": 196, "namic_wiki": 196, "community_licens": 196, "consum": 197, "prone": 197, "scientif": [197, 221, 227, 230], "stream": 197, "consequ": 197, "octav": 197, "idl": [197, 221], "java": 197, "middl": 197, "ground": 197, "ill": 197, "exploratori": 197, "barrier": 197, "scientist": 197, "specialist": 197, "prechelt2000ec": 197, "boehm1981": 197, "walston1977mpm": 197, "premium": 197, "offer": 197, "brooks78": 197, "closer": 197, "Their": 197, "suitabl": [197, 198], "poor": 197, "impoverish": 197, "furthermor": 197, "weak": 197, "crucial": 197, "boehm": 197, "barri": 197, "1981": 197, "econom": 197, "englewood": 197, "cliff": 197, "nj": 197, "prentic": 197, "hall": 197, "prechelt": 197, "lutz": 197, "2000": 197, "walston": 197, "felix": 197, "1977": 197, "ibm": 197, "syst": 197, "fund": [198, 199], "bethesda": 198, "maryland": 198, "cox": 198, "scriptabl": 198, "blood": 198, "oxygen": 198, "flow": 198, "deoxygen": 198, "hemoglobin": 198, "oxi": 198, "deoxi": 198, "sister": 198, "carefulli": 198, "pari": [198, 199], "dti": 198, "poorli": 198, "ellips": 198, "fiber": 198, "dwi": 198, "eeglab": 198, "electro": 198, "reson": [198, 220], "fmrib": 198, "steve": 198, "smith": 198, "ica": 198, "strong": 198, "commonli": [198, 201, 224], "sensor": 198, "lesser": 198, "began": [198, 199], "neurosci": [198, 219, 221], "pet": 198, "positron": 198, "emiss": 198, "tomographi": 198, "radio": 198, "compound": 198, "detector": 198, "emit": 198, "radiat": 198, "bodi": 198, "reconstruct": 198, "radiact": 198, "mainstream": 198, "nearli": [198, 227], "water": 198, "ashburn": 198, "karl": 198, "friston": 198, "london": 198, "voxbo": [198, 221], "lesion": 198, "symptom": 198, "dan": 198, "kimberg": 198, "inject": 198, "arteri": 198, "radioact": 198, "influenc": 198, "invas": 198, "jonthan": 199, "brainstat": 199, "afterward": 199, "brainpi": [199, 220], "esposito": 199, "jean": [199, 221], "baptist": [199, 221], "tom": 199, "christoph": 199, "burn": 199, "wait": 199, "meanwhil": 199, "team": [199, 200, 219], "fff": 199, "benjamin": 199, "thyreau": 199, "alongsid": 201, "datastructur": 201, "evenli": 201, "wire": 201, "concret": 201, "readili": 201, "unlik": [201, 224], "initialis": 202, "claim": 202, "c_": 202, "enn": 202, "franc": [214, 221], "viz": 214, "pressur": 215, "pl": 216, "noiseless": 216, "noiseless_data": 216, "figsiz": 216, "group_data": 216, "emphasi": 217, "pure": 217, "mni_sform": 217, "fake": 217, "rectangl": 217, "broca": 217, "mni_sform_inv": 217, "asymmetr": 217, "x_map": 217, "y_map": 217, "z_map": 217, "218": 217, "thresholded_map": 217, "viz3d": 217, "versatil": 217, "creativ": 218, "fragment": 218, "clariti": 219, "teach": 219, "materi": 219, "clearli": 219, "june": 220, "kj": 220, "hbm": 220, "hbm2005": 221, "confer": 221, "dept": 221, "canada": 221, "depart": 221, "california": 221, "hospitali": 221, "fr\u00e9d\u00e9ric": 221, "joliot": 221, "chicago": 221, "colorado": 221, "boulder": 221, "evolv": 221, "decad": 221, "broad": 221, "glue": 221, "pymat": 221, "spatio": 221, "wavelet": 221, "phiwav": 221, "myimg": 222, "mydata": 222, "newmyfil": 222, "rawarrai": 222, "arr_img": 222, "millimetr": 223, "inspect": 223, "subject_img": 223, "subject_world": 223, "tailarach_world": 223, "subject_cmap": 223, "tailarach_cmap": [223, 229], "atlas_img": 223, "tailarach_camp": 223, "atlas_voxel": 223, "subject_voxel": 223, "pretend": 223, "atlas_im": [223, 229], "subject_im": [223, 229], "talairach_cmap": 223, "subject_world_to_talairach_world": 223, "normalized_subject_im": 223, "respond": 224, "checkerboard": 224, "discrimin": 224, "delta_": 224, "t_j": 224, "a_j": 224, "realiz": 224, "mathbb": [224, 229], "t_1": [224, 229], "t_2": [224, 229], "int_a": 224, "deliv": 224, "t_": 224, "a_1": 224, "a_": 224, "t_3": 224, "e_a": 224, "e_b": 224, "1_": 224, "infti": 224, "instantan": 224, "stick": 224, "dc": 224, "heat": 224, "temperatur": 224, "uniformli": 224, "prespecifi": 224, "scenario": 224, "p_j": 224, "da": 224, "u_j": 224, "v_j": 224, "int_v": 224, "somewhat": 224, "beta_a": 224, "beta_b": 224, "heavisid": 224, "ta": 224, "bb": 224, "fa": 224, "_t": 224, "fb": 224, "f_a": 224, "f_b": 224, "beta_i": 224, "tild": [224, 229], "f_o": [224, 229], "beta_": 224, "tau_o": 224, "tau_c": 224, "f_c": 224, "attenu": 224, "decai": 224, "tau": 224, "beta_j": 224, "h_": 224, "h_a": 224, "h_b": 224, "amp": 224, "_f": 224, "s_1": 224, "s_n": 224, "y_": [224, 229], "epsilon_": 224, "beta_1": 224, "beta_2": 224, "t_k": 224, "s_i": 224, "neuron": [225, 231], "curl": [226, 227], "redirect": 226, "wget": 226, "zxvf": 226, "powershel": [226, 227], "get_nipy_user_dir": 226, "versioneddatasourc": 226, "0x101f8e410": 226, "0x10044b110": 226, "bomber": 226, "get_data_path": 226, "expandus": 226, "_nipi": 226, "pip3": 227, "python2": 227, "pip2": 227, "dnf": 227, "tkinter": 227, "bare": 227, "homebrew": 227, "brew": 227, "user_bas": 227, "your_usernam": 227, "favorit": 227, "macosx": 227, "py3_local_bin": 227, "confirm": 227, "lo": 227, "pypa": 227, "worth": 227, "machineri": 227, "bundl": 227, "continuum": 227, "analyt": 227, "upgrad": 227, "intel": 227, "xcode": 227, "msvc": 227, "snippet": 229, "conceptu": 229, "z_": 229, "i_": 229, "j_": 229, "k_": 229, "lie": 229, "x_a": 229, "z_a": 229, "subject_world_to_tailarach_world": 229, "i_a": 229, "j_a": 229, "k_a": 229, "rightarrow": 229, "isomorph": 229, "u_1": 229, "u_n": 229, "u_i": 229, "whichev": 229, "i_d": 229, "strictli": 229, "mislead": 229, "i_r": 229, "v_1": 229, "v_m": 229, "bracket": 229, "cdot": 229, "e_1": 229, "e_2": 229, "e_3": 229, "overset": 229, "mapsto": 229, "circ": 229, "u_d": 229, "u_r": 229, "leftrightarrow": 229, "map_coordin": 229, "u_2": 229, "u_3": 229, "twist": 229, "v_2": 229, "m_f": 229, "d_f": 229, "r_f": 229, "m_g": 229, "d_g": 229, "r_g": 229, "1st": 229, "f_p": 229, "df_p": 229, "m_1": 229, "d_1": 229, "r_1": 229, "f_1": 229, "m_2": 229, "d_2": 229, "r_2": 229, "f_2": 229, "otim": 229, "liberti": 229, "n_r": 229, "n_d": 229, "tp": 229, "pmatrix": 229, "ubiquit": 229, "t_2t_1": 229, "biject": 229, "impract": 229, "recov": 229, "in_c": 229, "f_tild": 229, "in_dtyp": 229, "out_dtyp": 229, "reordered_input": 229, "reordered_output": 229, "arithmet": 230, "umbrella": 230, "lapack": 230, "genet": 230, "solver": 230, "mathematica": 230, "creainteract": 230, "bottleneck": 230}, "objects": {"nipy.algorithms.clustering": [[1, 0, 0, "-", "bgmm"], [2, 0, 0, "-", "ggmixture"], [3, 0, 0, "-", "gmm"], [4, 0, 0, "-", "hierarchical_clustering"], [5, 0, 0, "-", "imm"], [6, 0, 0, "-", "utils"], [7, 0, 0, "-", "von_mises_fisher_mixture"]], "nipy.algorithms.clustering.bgmm": [[1, 1, 1, "", "BGMM"], [1, 1, 1, "", "VBGMM"], [1, 3, 1, "", "detsh"], [1, 3, 1, "", "dirichlet_eval"], [1, 3, 1, "", "dkl_dirichlet"], [1, 3, 1, "", "dkl_gaussian"], [1, 3, 1, "", "dkl_wishart"], [1, 3, 1, "", "generate_Wishart"], [1, 3, 1, "", "generate_normals"], [1, 3, 1, "", "generate_perm"], [1, 3, 1, "", "multinomial"], [1, 3, 1, "", "normal_eval"], [1, 3, 1, "", "wishart_eval"]], "nipy.algorithms.clustering.bgmm.BGMM": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "average_log_like"], [1, 2, 1, "", "bayes_factor"], [1, 2, 1, "", "bic"], [1, 2, 1, "", "check"], [1, 2, 1, "", "check_x"], [1, 2, 1, "", "conditional_posterior_proba"], [1, 2, 1, "", "estimate"], [1, 2, 1, "", "evidence"], [1, 2, 1, "", "guess_priors"], [1, 2, 1, "", "guess_regularizing"], [1, 2, 1, "", "initialize"], [1, 2, 1, "", "initialize_and_estimate"], [1, 2, 1, "", "likelihood"], [1, 2, 1, "", "map_label"], [1, 2, 1, "", "mixture_likelihood"], [1, 2, 1, "", "plugin"], [1, 2, 1, "", "pop"], [1, 2, 1, "", "probability_under_prior"], [1, 2, 1, "", "sample"], [1, 2, 1, "", "sample_and_average"], [1, 2, 1, "", "sample_indicator"], [1, 2, 1, "", "set_priors"], [1, 2, 1, "", "show"], [1, 2, 1, "", "show_components"], [1, 2, 1, "", "test"], [1, 2, 1, "", "train"], [1, 2, 1, "", "unweighted_likelihood"], [1, 2, 1, "", "unweighted_likelihood_"], [1, 2, 1, "", "update"], [1, 2, 1, "", "update_means"], [1, 2, 1, "", "update_precisions"], [1, 2, 1, "", "update_weights"]], "nipy.algorithms.clustering.bgmm.VBGMM": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "average_log_like"], [1, 2, 1, "", "bayes_factor"], [1, 2, 1, "", "bic"], [1, 2, 1, "", "check"], [1, 2, 1, "", "check_x"], [1, 2, 1, "", "conditional_posterior_proba"], [1, 2, 1, "", "estimate"], [1, 2, 1, "", "evidence"], [1, 2, 1, "", "guess_priors"], [1, 2, 1, "", "guess_regularizing"], [1, 2, 1, "", "initialize"], [1, 2, 1, "", "initialize_and_estimate"], [1, 2, 1, "", "likelihood"], [1, 2, 1, "", "map_label"], [1, 2, 1, "", "mixture_likelihood"], [1, 2, 1, "", "plugin"], [1, 2, 1, "", "pop"], [1, 2, 1, "", "probability_under_prior"], [1, 2, 1, "", "sample"], [1, 2, 1, "", "sample_and_average"], [1, 2, 1, "", "sample_indicator"], [1, 2, 1, "", "set_priors"], [1, 2, 1, "", "show"], [1, 2, 1, "", "show_components"], [1, 2, 1, "", "test"], [1, 2, 1, "", "train"], [1, 2, 1, "", "unweighted_likelihood"], [1, 2, 1, "", "unweighted_likelihood_"], [1, 2, 1, "", "update"], [1, 2, 1, "", "update_means"], [1, 2, 1, "", "update_precisions"], [1, 2, 1, "", "update_weights"]], "nipy.algorithms.clustering.ggmixture": [[2, 1, 1, "", "GGGM"], [2, 1, 1, "", "GGM"], [2, 1, 1, "", "Gamma"]], "nipy.algorithms.clustering.ggmixture.GGGM": [[2, 2, 1, "", "Estep"], [2, 2, 1, "", "Mstep"], [2, 2, 1, "", "__init__"], [2, 2, 1, "", "component_likelihood"], [2, 2, 1, "", "estimate"], [2, 2, 1, "", "init"], [2, 2, 1, "", "init_fdr"], [2, 2, 1, "", "parameters"], [2, 2, 1, "", "posterior"], [2, 2, 1, "", "show"]], "nipy.algorithms.clustering.ggmixture.GGM": [[2, 2, 1, "", "Estep"], [2, 2, 1, "", "Mstep"], [2, 2, 1, "", "__init__"], [2, 2, 1, "", "estimate"], [2, 2, 1, "", "parameters"], [2, 2, 1, "", "posterior"], [2, 2, 1, "", "show"]], "nipy.algorithms.clustering.ggmixture.Gamma": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "check"], [2, 2, 1, "", "estimate"], [2, 2, 1, "", "parameters"]], "nipy.algorithms.clustering.gmm": [[3, 1, 1, "", "GMM"], [3, 1, 1, "", "GridDescriptor"], [3, 3, 1, "", "best_fitting_GMM"], [3, 3, 1, "", "plot2D"]], "nipy.algorithms.clustering.gmm.GMM": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "average_log_like"], [3, 2, 1, "", "bic"], [3, 2, 1, "", "check"], [3, 2, 1, "", "check_x"], [3, 2, 1, "", "estimate"], [3, 2, 1, "", "evidence"], [3, 2, 1, "", "guess_regularizing"], [3, 2, 1, "", "initialize"], [3, 2, 1, "", "initialize_and_estimate"], [3, 2, 1, "", "likelihood"], [3, 2, 1, "", "map_label"], [3, 2, 1, "", "mixture_likelihood"], [3, 2, 1, "", "plugin"], [3, 2, 1, "", "pop"], [3, 2, 1, "", "show"], [3, 2, 1, "", "show_components"], [3, 2, 1, "", "test"], [3, 2, 1, "", "train"], [3, 2, 1, "", "unweighted_likelihood"], [3, 2, 1, "", "unweighted_likelihood_"], [3, 2, 1, "", "update"]], "nipy.algorithms.clustering.gmm.GridDescriptor": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "make_grid"], [3, 2, 1, "", "set"]], "nipy.algorithms.clustering.hierarchical_clustering": [[4, 1, 1, "", "WeightedForest"], [4, 3, 1, "", "average_link_graph"], [4, 3, 1, "", "average_link_graph_segment"], [4, 3, 1, "", "fusion"], [4, 3, 1, "", "ward"], [4, 3, 1, "", "ward_field_segment"], [4, 3, 1, "", "ward_quick"], [4, 3, 1, "", "ward_quick_segment"], [4, 3, 1, "", "ward_segment"]], "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "adjacency"], [4, 2, 1, "", "all_distances"], [4, 2, 1, "", "anti_symmeterize"], [4, 2, 1, "", "cc"], [4, 2, 1, "", "check"], [4, 2, 1, "", "check_compatible_height"], [4, 2, 1, "", "cliques"], [4, 2, 1, "", "compact_neighb"], [4, 2, 1, "", "compute_children"], [4, 2, 1, "", "copy"], [4, 2, 1, "", "cut_redundancies"], [4, 2, 1, "", "define_graph_attributes"], [4, 2, 1, "", "degrees"], [4, 2, 1, "", "depth_from_leaves"], [4, 2, 1, "", "dijkstra"], [4, 2, 1, "", "floyd"], [4, 2, 1, "", "from_3d_grid"], [4, 2, 1, "", "get_E"], [4, 2, 1, "", "get_V"], [4, 2, 1, "", "get_children"], [4, 2, 1, "", "get_descendants"], [4, 2, 1, "", "get_edges"], [4, 2, 1, "", "get_height"], [4, 2, 1, "", "get_vertices"], [4, 2, 1, "", "get_weights"], [4, 2, 1, "", "is_connected"], [4, 2, 1, "", "isleaf"], [4, 2, 1, "", "isroot"], [4, 2, 1, "", "kruskal"], [4, 2, 1, "", "leaves_of_a_subtree"], [4, 2, 1, "", "left_incidence"], [4, 2, 1, "", "list_of_neighbors"], [4, 2, 1, "", "list_of_subtrees"], [4, 2, 1, "", "main_cc"], [4, 2, 1, "", "merge_simple_branches"], [4, 2, 1, "", "normalize"], [4, 2, 1, "", "partition"], [4, 2, 1, "", "plot"], [4, 2, 1, "", "plot_height"], [4, 2, 1, "", "propagate_upward"], [4, 2, 1, "", "propagate_upward_and"], [4, 2, 1, "", "remove_edges"], [4, 2, 1, "", "remove_trivial_edges"], [4, 2, 1, "", "reorder_from_leaves_to_roots"], [4, 2, 1, "", "right_incidence"], [4, 2, 1, "", "set_edges"], [4, 2, 1, "", "set_euclidian"], [4, 2, 1, "", "set_gaussian"], [4, 2, 1, "", "set_height"], [4, 2, 1, "", "set_weights"], [4, 2, 1, "", "show"], [4, 2, 1, "", "split"], [4, 2, 1, "", "subforest"], [4, 2, 1, "", "subgraph"], [4, 2, 1, "", "symmeterize"], [4, 2, 1, "", "to_coo_matrix"], [4, 2, 1, "", "tree_depth"], [4, 2, 1, "", "voronoi_diagram"], [4, 2, 1, "", "voronoi_labelling"]], "nipy.algorithms.clustering.imm": [[5, 1, 1, "", "IMM"], [5, 1, 1, "", "MixedIMM"], [5, 3, 1, "", "co_labelling"], [5, 3, 1, "", "main"]], "nipy.algorithms.clustering.imm.IMM": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "average_log_like"], [5, 2, 1, "", "bayes_factor"], [5, 2, 1, "", "bic"], [5, 2, 1, "", "check"], [5, 2, 1, "", "check_x"], [5, 2, 1, "", "conditional_posterior_proba"], [5, 2, 1, "", "cross_validated_update"], [5, 2, 1, "", "estimate"], [5, 2, 1, "", "evidence"], [5, 2, 1, "", "guess_priors"], [5, 2, 1, "", "guess_regularizing"], [5, 2, 1, "", "initialize"], [5, 2, 1, "", "initialize_and_estimate"], [5, 2, 1, "", "likelihood"], [5, 2, 1, "", "likelihood_under_the_prior"], [5, 2, 1, "", "map_label"], [5, 2, 1, "", "mixture_likelihood"], [5, 2, 1, "", "plugin"], [5, 2, 1, "", "pop"], [5, 2, 1, "", "probability_under_prior"], [5, 2, 1, "", "reduce"], [5, 2, 1, "", "sample"], [5, 2, 1, "", "sample_and_average"], [5, 2, 1, "", "sample_indicator"], [5, 2, 1, "", "set_constant_densities"], [5, 2, 1, "", "set_priors"], [5, 2, 1, "", "show"], [5, 2, 1, "", "show_components"], [5, 2, 1, "", "simple_update"], [5, 2, 1, "", "test"], [5, 2, 1, "", "train"], [5, 2, 1, "", "unweighted_likelihood"], [5, 2, 1, "", "unweighted_likelihood_"], [5, 2, 1, "", "update"], [5, 2, 1, "", "update_means"], [5, 2, 1, "", "update_precisions"], [5, 2, 1, "", "update_weights"]], "nipy.algorithms.clustering.imm.MixedIMM": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "average_log_like"], [5, 2, 1, "", "bayes_factor"], [5, 2, 1, "", "bic"], [5, 2, 1, "", "check"], [5, 2, 1, "", "check_x"], [5, 2, 1, "", "conditional_posterior_proba"], [5, 2, 1, "", "cross_validated_update"], [5, 2, 1, "", "estimate"], [5, 2, 1, "", "evidence"], [5, 2, 1, "", "guess_priors"], [5, 2, 1, "", "guess_regularizing"], [5, 2, 1, "", "initialize"], [5, 2, 1, "", "initialize_and_estimate"], [5, 2, 1, "", "likelihood"], [5, 2, 1, "", "likelihood_under_the_prior"], [5, 2, 1, "", "map_label"], [5, 2, 1, "", "mixture_likelihood"], [5, 2, 1, "", "plugin"], [5, 2, 1, "", "pop"], [5, 2, 1, "", "probability_under_prior"], [5, 2, 1, "", "reduce"], [5, 2, 1, "", "sample"], [5, 2, 1, "", "sample_and_average"], [5, 2, 1, "", "sample_indicator"], [5, 2, 1, "", "set_constant_densities"], [5, 2, 1, "", "set_priors"], [5, 2, 1, "", "show"], [5, 2, 1, "", "show_components"], [5, 2, 1, "", "simple_update"], [5, 2, 1, "", "test"], [5, 2, 1, "", "train"], [5, 2, 1, "", "unweighted_likelihood"], [5, 2, 1, "", "unweighted_likelihood_"], [5, 2, 1, "", "update"], [5, 2, 1, "", "update_means"], [5, 2, 1, "", "update_precisions"], [5, 2, 1, "", "update_weights"]], "nipy.algorithms.clustering.utils": [[6, 3, 1, "", "kmeans"], [6, 3, 1, "", "voronoi"]], "nipy.algorithms.clustering.von_mises_fisher_mixture": [[7, 1, 1, "", "VonMisesMixture"], [7, 3, 1, "", "estimate_robust_vmm"], [7, 3, 1, "", "example_cv_nonoise"], [7, 3, 1, "", "example_noisy"], [7, 3, 1, "", "select_vmm"], [7, 3, 1, "", "select_vmm_cv"], [7, 3, 1, "", "sphere_density"]], "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "density_per_component"], [7, 2, 1, "", "estimate"], [7, 2, 1, "", "estimate_means"], [7, 2, 1, "", "estimate_weights"], [7, 2, 1, "", "log_density_per_component"], [7, 2, 1, "", "log_weighted_density"], [7, 2, 1, "", "mixture_density"], [7, 2, 1, "", "responsibilities"], [7, 2, 1, "", "show"], [7, 2, 1, "", "weighted_density"]], "nipy.algorithms.diagnostics": [[8, 0, 0, "-", "commands"], [9, 0, 0, "-", "screens"], [10, 0, 0, "-", "timediff"], [11, 0, 0, "-", "tsdiffplot"]], "nipy.algorithms.diagnostics.commands": [[8, 3, 1, "", "diagnose"], [8, 3, 1, "", "parse_fname_axes"], [8, 3, 1, "", "tsdiffana"]], "nipy.algorithms.diagnostics.screens": [[9, 3, 1, "", "screen"], [9, 3, 1, "", "write_screen_res"]], "nipy.algorithms.diagnostics.timediff": [[10, 3, 1, "", "time_slice_diffs"], [10, 3, 1, "", "time_slice_diffs_image"]], "nipy.algorithms.diagnostics.tsdiffplot": [[11, 3, 1, "", "plot_tsdiffs"], [11, 3, 1, "", "plot_tsdiffs_image"]], "nipy.algorithms": [[12, 0, 0, "-", "fwhm"], [18, 0, 0, "-", "interpolation"], [19, 0, 0, "-", "kernel_smooth"], [20, 0, 0, "-", "optimize"], [32, 0, 0, "-", "resample"]], "nipy.algorithms.fwhm": [[12, 1, 1, "", "ReselImage"], [12, 1, 1, "", "Resels"]], "nipy.algorithms.fwhm.ReselImage": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "fwhm2resel"], [12, 2, 1, "", "integrate"], [12, 2, 1, "", "resel2fwhm"]], "nipy.algorithms.fwhm.Resels": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "fwhm2resel"], [12, 2, 1, "", "integrate"], [12, 2, 1, "", "resel2fwhm"]], "nipy.algorithms.graph": [[13, 0, 0, "-", "bipartite_graph"], [14, 0, 0, "-", "field"], [15, 0, 0, "-", "forest"], [16, 0, 0, "-", "graph"]], "nipy.algorithms.graph.bipartite_graph": [[13, 1, 1, "", "BipartiteGraph"], [13, 3, 1, "", "bipartite_graph_from_adjacency"], [13, 3, 1, "", "bipartite_graph_from_coo_matrix"], [13, 3, 1, "", "check_feature_matrices"], [13, 3, 1, "", "cross_eps"], [13, 3, 1, "", "cross_knn"]], "nipy.algorithms.graph.bipartite_graph.BipartiteGraph": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "copy"], [13, 2, 1, "", "set_edges"], [13, 2, 1, "", "set_weights"], [13, 2, 1, "", "subgraph_left"], [13, 2, 1, "", "subgraph_right"]], "nipy.algorithms.graph.field": [[14, 1, 1, "", "Field"], [14, 3, 1, "", "field_from_coo_matrix_and_data"], [14, 3, 1, "", "field_from_graph_and_data"]], "nipy.algorithms.graph.field.Field": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "adjacency"], [14, 2, 1, "", "anti_symmeterize"], [14, 2, 1, "", "cc"], [14, 2, 1, "", "cliques"], [14, 2, 1, "", "closing"], [14, 2, 1, "", "compact_neighb"], [14, 2, 1, "", "constrained_voronoi"], [14, 2, 1, "", "copy"], [14, 2, 1, "", "custom_watershed"], [14, 2, 1, "", "cut_redundancies"], [14, 2, 1, "", "degrees"], [14, 2, 1, "", "diffusion"], [14, 2, 1, "", "dijkstra"], [14, 2, 1, "", "dilation"], [14, 2, 1, "", "erosion"], [14, 2, 1, "", "floyd"], [14, 2, 1, "", "from_3d_grid"], [14, 2, 1, "", "geodesic_kmeans"], [14, 2, 1, "", "get_E"], [14, 2, 1, "", "get_V"], [14, 2, 1, "", "get_edges"], [14, 2, 1, "", "get_field"], [14, 2, 1, "", "get_local_maxima"], [14, 2, 1, "", "get_vertices"], [14, 2, 1, "", "get_weights"], [14, 2, 1, "", "highest_neighbor"], [14, 2, 1, "", "is_connected"], [14, 2, 1, "", "kruskal"], [14, 2, 1, "", "left_incidence"], [14, 2, 1, "", "list_of_neighbors"], [14, 2, 1, "", "local_maxima"], [14, 2, 1, "", "main_cc"], [14, 2, 1, "", "normalize"], [14, 2, 1, "", "opening"], [14, 2, 1, "", "remove_edges"], [14, 2, 1, "", "remove_trivial_edges"], [14, 2, 1, "", "right_incidence"], [14, 2, 1, "", "set_edges"], [14, 2, 1, "", "set_euclidian"], [14, 2, 1, "", "set_field"], [14, 2, 1, "", "set_gaussian"], [14, 2, 1, "", "set_weights"], [14, 2, 1, "", "show"], [14, 2, 1, "", "subfield"], [14, 2, 1, "", "subgraph"], [14, 2, 1, "", "symmeterize"], [14, 2, 1, "", "threshold_bifurcations"], [14, 2, 1, "", "to_coo_matrix"], [14, 2, 1, "", "voronoi_diagram"], [14, 2, 1, "", "voronoi_labelling"], [14, 2, 1, "", "ward"]], "nipy.algorithms.graph.forest": [[15, 1, 1, "", "Forest"]], "nipy.algorithms.graph.forest.Forest": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "adjacency"], [15, 2, 1, "", "all_distances"], [15, 2, 1, "", "anti_symmeterize"], [15, 2, 1, "", "cc"], [15, 2, 1, "", "check"], [15, 2, 1, "", "cliques"], [15, 2, 1, "", "compact_neighb"], [15, 2, 1, "", "compute_children"], [15, 2, 1, "", "copy"], [15, 2, 1, "", "cut_redundancies"], [15, 2, 1, "", "define_graph_attributes"], [15, 2, 1, "", "degrees"], [15, 2, 1, "", "depth_from_leaves"], [15, 2, 1, "", "dijkstra"], [15, 2, 1, "", "floyd"], [15, 2, 1, "", "from_3d_grid"], [15, 2, 1, "", "get_E"], [15, 2, 1, "", "get_V"], [15, 2, 1, "", "get_children"], [15, 2, 1, "", "get_descendants"], [15, 2, 1, "", "get_edges"], [15, 2, 1, "", "get_vertices"], [15, 2, 1, "", "get_weights"], [15, 2, 1, "", "is_connected"], [15, 2, 1, "", "isleaf"], [15, 2, 1, "", "isroot"], [15, 2, 1, "", "kruskal"], [15, 2, 1, "", "leaves_of_a_subtree"], [15, 2, 1, "", "left_incidence"], [15, 2, 1, "", "list_of_neighbors"], [15, 2, 1, "", "main_cc"], [15, 2, 1, "", "merge_simple_branches"], [15, 2, 1, "", "normalize"], [15, 2, 1, "", "propagate_upward"], [15, 2, 1, "", "propagate_upward_and"], [15, 2, 1, "", "remove_edges"], [15, 2, 1, "", "remove_trivial_edges"], [15, 2, 1, "", "reorder_from_leaves_to_roots"], [15, 2, 1, "", "right_incidence"], [15, 2, 1, "", "set_edges"], [15, 2, 1, "", "set_euclidian"], [15, 2, 1, "", "set_gaussian"], [15, 2, 1, "", "set_weights"], [15, 2, 1, "", "show"], [15, 2, 1, "", "subforest"], [15, 2, 1, "", "subgraph"], [15, 2, 1, "", "symmeterize"], [15, 2, 1, "", "to_coo_matrix"], [15, 2, 1, "", "tree_depth"], [15, 2, 1, "", "voronoi_diagram"], [15, 2, 1, "", "voronoi_labelling"]], "nipy.algorithms.graph.graph": [[16, 1, 1, "", "Graph"], [16, 1, 1, "", "WeightedGraph"], [16, 3, 1, "", "complete_graph"], [16, 3, 1, "", "concatenate_graphs"], [16, 3, 1, "", "eps_nn"], [16, 3, 1, "", "graph_3d_grid"], [16, 3, 1, "", "knn"], [16, 3, 1, "", "lil_cc"], [16, 3, 1, "", "mst"], [16, 3, 1, "", "wgraph_from_3d_grid"], [16, 3, 1, "", "wgraph_from_adjacency"], [16, 3, 1, "", "wgraph_from_coo_matrix"]], "nipy.algorithms.graph.graph.Graph": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "adjacency"], [16, 2, 1, "", "cc"], [16, 2, 1, "", "degrees"], [16, 2, 1, "", "get_E"], [16, 2, 1, "", "get_V"], [16, 2, 1, "", "get_edges"], [16, 2, 1, "", "get_vertices"], [16, 2, 1, "", "main_cc"], [16, 2, 1, "", "set_edges"], [16, 2, 1, "", "show"], [16, 2, 1, "", "to_coo_matrix"]], "nipy.algorithms.graph.graph.WeightedGraph": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "adjacency"], [16, 2, 1, "", "anti_symmeterize"], [16, 2, 1, "", "cc"], [16, 2, 1, "", "cliques"], [16, 2, 1, "", "compact_neighb"], [16, 2, 1, "", "copy"], [16, 2, 1, "", "cut_redundancies"], [16, 2, 1, "", "degrees"], [16, 2, 1, "", "dijkstra"], [16, 2, 1, "", "floyd"], [16, 2, 1, "", "from_3d_grid"], [16, 2, 1, "", "get_E"], [16, 2, 1, "", "get_V"], [16, 2, 1, "", "get_edges"], [16, 2, 1, "", "get_vertices"], [16, 2, 1, "", "get_weights"], [16, 2, 1, "", "is_connected"], [16, 2, 1, "", "kruskal"], [16, 2, 1, "", "left_incidence"], [16, 2, 1, "", "list_of_neighbors"], [16, 2, 1, "", "main_cc"], [16, 2, 1, "", "normalize"], [16, 2, 1, "", "remove_edges"], [16, 2, 1, "", "remove_trivial_edges"], [16, 2, 1, "", "right_incidence"], [16, 2, 1, "", "set_edges"], [16, 2, 1, "", "set_euclidian"], [16, 2, 1, "", "set_gaussian"], [16, 2, 1, "", "set_weights"], [16, 2, 1, "", "show"], [16, 2, 1, "", "subgraph"], [16, 2, 1, "", "symmeterize"], [16, 2, 1, "", "to_coo_matrix"], [16, 2, 1, "", "voronoi_diagram"], [16, 2, 1, "", "voronoi_labelling"]], "nipy.algorithms.group": [[17, 0, 0, "-", "parcel_analysis"]], "nipy.algorithms.group.parcel_analysis": [[17, 1, 1, "", "ParcelAnalysis"], [17, 3, 1, "", "parcel_analysis"]], "nipy.algorithms.group.parcel_analysis.ParcelAnalysis": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "dump_results"], [17, 2, 1, "", "parcel_maps"], [17, 2, 1, "", "t_map"]], "nipy.algorithms.interpolation": [[18, 1, 1, "", "ImageInterpolator"]], "nipy.algorithms.interpolation.ImageInterpolator": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "evaluate"], [18, 4, 1, "", "mode"], [18, 5, 1, "", "n_prepad_if_needed"], [18, 4, 1, "", "order"]], "nipy.algorithms.kernel_smooth": [[19, 1, 1, "", "LinearFilter"], [19, 3, 1, "", "fwhm2sigma"], [19, 3, 1, "", "sigma2fwhm"]], "nipy.algorithms.kernel_smooth.LinearFilter": [[19, 2, 1, "", "__init__"], [19, 5, 1, "", "normalization"], [19, 2, 1, "", "smooth"]], "nipy.algorithms.optimize": [[20, 3, 1, "", "fmin_steepest"]], "nipy.algorithms.registration": [[21, 0, 0, "-", "affine"], [22, 0, 0, "-", "chain_transform"], [23, 0, 0, "-", "groupwise_registration"], [24, 0, 0, "-", "histogram_registration"], [25, 0, 0, "-", "optimizer"], [26, 0, 0, "-", "polyaffine"], [27, 0, 0, "-", "resample"], [28, 0, 0, "-", "scripting"], [29, 0, 0, "-", "similarity_measures"], [30, 0, 0, "-", "transform"], [31, 0, 0, "-", "type_check"]], "nipy.algorithms.registration.affine": [[21, 1, 1, "", "Affine"], [21, 1, 1, "", "Affine2D"], [21, 1, 1, "", "Rigid"], [21, 1, 1, "", "Rigid2D"], [21, 1, 1, "", "Similarity"], [21, 1, 1, "", "Similarity2D"], [21, 3, 1, "", "inverse_affine"], [21, 3, 1, "", "preconditioner"], [21, 3, 1, "", "rotation_mat2vec"], [21, 3, 1, "", "rotation_vec2mat"], [21, 3, 1, "", "slices2aff"], [21, 3, 1, "", "subgrid_affine"], [21, 3, 1, "", "threshold"], [21, 3, 1, "", "to_matrix44"]], "nipy.algorithms.registration.affine.Affine": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.affine.Affine2D": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.affine.Rigid": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.affine.Rigid2D": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.affine.Similarity": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.affine.Similarity2D": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "apply"], [21, 2, 1, "", "as_affine"], [21, 2, 1, "", "compose"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "from_matrix44"], [21, 2, 1, "", "inv"], [21, 4, 1, "", "is_direct"], [21, 4, 1, "", "param"], [21, 5, 1, "", "param_inds"], [21, 4, 1, "", "pre_rotation"], [21, 4, 1, "", "precond"], [21, 4, 1, "", "rotation"], [21, 4, 1, "", "scaling"], [21, 4, 1, "", "translation"]], "nipy.algorithms.registration.chain_transform": [[22, 1, 1, "", "ChainTransform"]], "nipy.algorithms.registration.chain_transform.ChainTransform": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "apply"], [22, 4, 1, "", "param"]], "nipy.algorithms.registration.groupwise_registration": [[23, 1, 1, "", "FmriRealign4d"], [23, 1, 1, "", "Image4d"], [23, 1, 1, "", "Realign4d"], [23, 1, 1, "", "Realign4dAlgorithm"], [23, 1, 1, "", "SpaceRealign"], [23, 1, 1, "", "SpaceTimeRealign"], [23, 3, 1, "", "adjust_subsampling"], [23, 3, 1, "", "guess_slice_axis_and_direction"], [23, 3, 1, "", "interp_slice_times"], [23, 3, 1, "", "make_grid"], [23, 3, 1, "", "realign4d"], [23, 3, 1, "", "resample4d"], [23, 3, 1, "", "scanner_coords"], [23, 3, 1, "", "single_run_realign4d"], [23, 3, 1, "", "tr_from_header"]], "nipy.algorithms.registration.groupwise_registration.FmriRealign4d": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "estimate"], [23, 2, 1, "", "resample"]], "nipy.algorithms.registration.groupwise_registration.Image4d": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "free_data"], [23, 2, 1, "", "get_fdata"], [23, 2, 1, "", "get_shape"], [23, 2, 1, "", "scanner_time"], [23, 2, 1, "", "z_to_slice"]], "nipy.algorithms.registration.groupwise_registration.Realign4d": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "estimate"], [23, 2, 1, "", "resample"]], "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "align_to_refscan"], [23, 2, 1, "", "estimate_instant_motion"], [23, 2, 1, "", "estimate_motion"], [23, 2, 1, "", "init_instant_motion"], [23, 2, 1, "", "resample"], [23, 2, 1, "", "resample_full_data"], [23, 2, 1, "", "set_fmin"], [23, 2, 1, "", "set_transform"]], "nipy.algorithms.registration.groupwise_registration.SpaceRealign": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "estimate"], [23, 2, 1, "", "resample"]], "nipy.algorithms.registration.groupwise_registration.SpaceTimeRealign": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "estimate"], [23, 2, 1, "", "resample"]], "nipy.algorithms.registration.histogram_registration": [[24, 1, 1, "", "HistogramRegistration"], [24, 3, 1, "", "approx_gradient"], [24, 3, 1, "", "approx_hessian"], [24, 3, 1, "", "approx_hessian_diag"], [24, 3, 1, "", "clamp"], [24, 3, 1, "", "ideal_spacing"], [24, 3, 1, "", "smallest_bounding_box"], [24, 3, 1, "", "smooth_image"]], "nipy.algorithms.registration.histogram_registration.HistogramRegistration": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "eval"], [24, 2, 1, "", "eval_gradient"], [24, 2, 1, "", "eval_hessian"], [24, 2, 1, "", "explore"], [24, 4, 1, "", "interp"], [24, 2, 1, "", "optimize"], [24, 2, 1, "", "set_fov"], [24, 4, 1, "", "similarity"], [24, 2, 1, "", "subsample"]], "nipy.algorithms.registration.optimizer": [[25, 3, 1, "", "configure_optimizer"], [25, 3, 1, "", "subdict"], [25, 3, 1, "", "use_derivatives"]], "nipy.algorithms.registration.polyaffine": [[26, 1, 1, "", "PolyAffine"]], "nipy.algorithms.registration.polyaffine.PolyAffine": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "affine"], [26, 2, 1, "", "affines"], [26, 2, 1, "", "apply"], [26, 2, 1, "", "compose"], [26, 2, 1, "", "left_compose"], [26, 4, 1, "", "param"]], "nipy.algorithms.registration.resample": [[27, 3, 1, "", "cast_array"], [27, 3, 1, "", "resample"]], "nipy.algorithms.registration.scripting": [[28, 3, 1, "", "aff2euler"], [28, 3, 1, "", "aff2rot_zooms"], [28, 3, 1, "", "space_time_realign"]], "nipy.algorithms.registration.similarity_measures": [[29, 1, 1, "", "CorrelationCoefficient"], [29, 1, 1, "", "CorrelationRatio"], [29, 1, 1, "", "CorrelationRatioL1"], [29, 1, 1, "", "DiscreteParzenMutualInformation"], [29, 1, 1, "", "MutualInformation"], [29, 1, 1, "", "NormalizedMutualInformation"], [29, 1, 1, "", "ParzenMutualInformation"], [29, 1, 1, "", "SimilarityMeasure"], [29, 1, 1, "", "SupervisedLikelihoodRatio"], [29, 3, 1, "", "correlation2loglikelihood"], [29, 3, 1, "", "dist2loss"]], "nipy.algorithms.registration.similarity_measures.CorrelationCoefficient": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.CorrelationRatio": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.CorrelationRatioL1": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.DiscreteParzenMutualInformation": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.MutualInformation": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.NormalizedMutualInformation": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.ParzenMutualInformation": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.SimilarityMeasure": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.similarity_measures.SupervisedLikelihoodRatio": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "loss"], [29, 2, 1, "", "npoints"]], "nipy.algorithms.registration.transform": [[30, 1, 1, "", "Transform"]], "nipy.algorithms.registration.transform.Transform": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "apply"], [30, 2, 1, "", "compose"], [30, 4, 1, "", "param"]], "nipy.algorithms.registration.type_check": [[31, 3, 1, "", "check_type"], [31, 3, 1, "", "check_type_and_shape"]], "nipy.algorithms.resample": [[32, 3, 1, "", "resample"], [32, 3, 1, "", "resample_img2img"]], "nipy.algorithms.segmentation": [[33, 0, 0, "-", "brain_segmentation"], [34, 0, 0, "-", "segmentation"]], "nipy.algorithms.segmentation.brain_segmentation": [[33, 1, 1, "", "BrainT1Segmentation"]], "nipy.algorithms.segmentation.brain_segmentation.BrainT1Segmentation": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "convert"]], "nipy.algorithms.segmentation.segmentation": [[34, 1, 1, "", "Segmentation"], [34, 3, 1, "", "binarize_ppm"], [34, 3, 1, "", "map_from_ppm"], [34, 3, 1, "", "moment_matching"]], "nipy.algorithms.segmentation.segmentation.Segmentation": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "free_energy"], [34, 2, 1, "", "log_external_field"], [34, 2, 1, "", "map"], [34, 2, 1, "", "normalized_external_field"], [34, 2, 1, "", "run"], [34, 2, 1, "", "set_markov_prior"], [34, 2, 1, "", "ve_step"], [34, 2, 1, "", "vm_step"]], "nipy.algorithms.slicetiming": [[35, 0, 0, "-", "timefuncs"]], "nipy.algorithms.slicetiming.timefuncs": [[35, 3, 1, "", "st_01234"], [35, 3, 1, "", "st_02413"], [35, 3, 1, "", "st_03142"], [35, 3, 1, "", "st_13024"], [35, 3, 1, "", "st_41302"], [35, 3, 1, "", "st_42031"], [35, 3, 1, "", "st_43210"], [35, 3, 1, "", "st_odd0_even1"]], "nipy.algorithms.statistics": [[36, 0, 0, "-", "bayesian_mixed_effects"], [38, 0, 0, "-", "empirical_pvalue"], [40, 0, 0, "-", "mixed_effects_stat"], [49, 0, 0, "-", "onesample"], [50, 0, 0, "-", "rft"], [51, 0, 0, "-", "utils"]], "nipy.algorithms.statistics.bayesian_mixed_effects": [[36, 3, 1, "", "two_level_glm"]], "nipy.algorithms.statistics.bench": [[37, 0, 0, "-", "bench_intvol"]], "nipy.algorithms.statistics.bench.bench_intvol": [[37, 3, 1, "", "bench_lips1d"], [37, 3, 1, "", "bench_lips2d"], [37, 3, 1, "", "bench_lips3d"]], "nipy.algorithms.statistics.empirical_pvalue": [[38, 1, 1, "", "NormalEmpiricalNull"], [38, 3, 1, "", "check_p_values"], [38, 3, 1, "", "fdr"], [38, 3, 1, "", "fdr_threshold"], [38, 3, 1, "", "gamma_gaussian_fit"], [38, 3, 1, "", "gaussian_fdr"], [38, 3, 1, "", "gaussian_fdr_threshold"], [38, 3, 1, "", "smoothed_histogram_from_samples"], [38, 3, 1, "", "three_classes_GMM_fit"]], "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "fdr"], [38, 2, 1, "", "fdrcurve"], [38, 2, 1, "", "learn"], [38, 2, 1, "", "plot"], [38, 2, 1, "", "threshold"], [38, 2, 1, "", "uncorrected_threshold"]], "nipy.algorithms.statistics.formula": [[39, 0, 0, "-", "formulae"]], "nipy.algorithms.statistics.formula.formulae": [[39, 1, 1, "", "Beta"], [39, 1, 1, "", "Factor"], [39, 1, 1, "", "FactorTerm"], [39, 1, 1, "", "Formula"], [39, 1, 1, "", "RandomEffects"], [39, 1, 1, "", "Term"], [39, 3, 1, "", "contrast_from_cols_or_rows"], [39, 3, 1, "", "define"], [39, 3, 1, "", "getparams"], [39, 3, 1, "", "getterms"], [39, 3, 1, "", "is_factor"], [39, 3, 1, "", "is_factor_term"], [39, 3, 1, "", "is_formula"], [39, 3, 1, "", "is_term"], [39, 3, 1, "", "make_dummy"], [39, 3, 1, "", "make_recarray"], [39, 3, 1, "", "natural_spline"], [39, 3, 1, "", "terms"]], "nipy.algorithms.statistics.formula.formulae.Beta": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "adjoint"], [39, 2, 1, "", "apart"], [39, 4, 1, "", "args"], [39, 2, 1, "", "args_cnc"], [39, 2, 1, "", "as_base_exp"], [39, 2, 1, "", "as_coeff_Add"], [39, 2, 1, "", "as_coeff_Mul"], [39, 2, 1, "", "as_coeff_add"], [39, 2, 1, "", "as_coeff_exponent"], [39, 2, 1, "", "as_coeff_mul"], [39, 2, 1, "", "as_coefficient"], [39, 2, 1, "", "as_coefficients_dict"], [39, 2, 1, "", "as_content_primitive"], [39, 2, 1, "", "as_dummy"], [39, 2, 1, "", "as_expr"], [39, 2, 1, "", "as_independent"], [39, 2, 1, "", "as_leading_term"], [39, 2, 1, "", "as_numer_denom"], [39, 2, 1, "", "as_ordered_factors"], [39, 2, 1, "", "as_ordered_terms"], [39, 2, 1, "", "as_poly"], [39, 2, 1, "", "as_powers_dict"], [39, 2, 1, "", "as_real_imag"], [39, 2, 1, "", "as_set"], [39, 2, 1, "", "as_terms"], [39, 2, 1, "", "aseries"], [39, 4, 1, "", "assumptions0"], [39, 2, 1, "", "atoms"], [39, 4, 1, "", "binary_symbols"], [39, 2, 1, "", "cancel"], [39, 4, 1, "", "canonical_variables"], [39, 2, 1, "", "class_key"], [39, 2, 1, "", "coeff"], [39, 2, 1, "", "collect"], [39, 2, 1, "", "combsimp"], [39, 2, 1, "", "compare"], [39, 2, 1, "", "compute_leading_term"], [39, 2, 1, "", "conjugate"], [39, 2, 1, "", "copy"], [39, 2, 1, "", "could_extract_minus_sign"], [39, 2, 1, "", "count"], [39, 2, 1, "", "count_ops"], [39, 5, 1, "", "default_assumptions"], [39, 2, 1, "", "diff"], [39, 2, 1, "", "dir"], [39, 2, 1, "", "doit"], [39, 2, 1, "", "dummy_eq"], [39, 5, 1, "", "dummy_index"], [39, 2, 1, "", "equals"], [39, 2, 1, "", "evalf"], [39, 2, 1, "", "expand"], [39, 4, 1, "", "expr_free_symbols"], [39, 2, 1, "", "extract_additively"], [39, 2, 1, "", "extract_branch_factor"], [39, 2, 1, "", "extract_multiplicatively"], [39, 2, 1, "", "factor"], [39, 2, 1, "", "find"], [39, 2, 1, "", "fourier_series"], [39, 2, 1, "", "fps"], [39, 4, 1, "", "free_symbols"], [39, 2, 1, "", "fromiter"], [39, 4, 1, "", "func"], [39, 2, 1, "", "gammasimp"], [39, 2, 1, "", "getO"], [39, 2, 1, "", "getn"], [39, 2, 1, "", "has"], [39, 2, 1, "", "has_free"], [39, 2, 1, "", "has_xfree"], [39, 2, 1, "", "integrate"], [39, 2, 1, "", "invert"], [39, 5, 1, "", "is_Add"], [39, 5, 1, "", "is_AlgebraicNumber"], [39, 5, 1, "", "is_Atom"], [39, 5, 1, "", "is_Boolean"], [39, 5, 1, "", "is_Derivative"], [39, 5, 1, "", "is_Dummy"], [39, 5, 1, "", "is_Equality"], [39, 5, 1, "", "is_Float"], [39, 5, 1, "", "is_Function"], [39, 5, 1, "", "is_Indexed"], [39, 5, 1, "", "is_Integer"], [39, 5, 1, "", "is_MatAdd"], [39, 5, 1, "", "is_MatMul"], [39, 5, 1, "", "is_Matrix"], [39, 5, 1, "", "is_Mul"], [39, 5, 1, "", "is_Not"], [39, 5, 1, "", "is_Number"], [39, 5, 1, "", "is_NumberSymbol"], [39, 5, 1, "", "is_Order"], [39, 5, 1, "", "is_Piecewise"], [39, 5, 1, "", "is_Point"], [39, 5, 1, "", "is_Poly"], [39, 5, 1, "", "is_Pow"], [39, 5, 1, "", "is_Rational"], [39, 5, 1, "", "is_Relational"], [39, 5, 1, "", "is_Symbol"], [39, 5, 1, "", "is_Vector"], [39, 5, 1, "", "is_Wild"], [39, 4, 1, "", "is_algebraic"], [39, 2, 1, "", "is_algebraic_expr"], [39, 4, 1, "", "is_antihermitian"], [39, 4, 1, "", "is_commutative"], [39, 5, 1, "", "is_comparable"], [39, 4, 1, "", "is_complex"], [39, 4, 1, "", "is_composite"], [39, 2, 1, "", "is_constant"], [39, 4, 1, "", "is_even"], [39, 4, 1, "", "is_extended_negative"], [39, 4, 1, "", "is_extended_nonnegative"], [39, 4, 1, "", "is_extended_nonpositive"], [39, 4, 1, "", "is_extended_nonzero"], [39, 4, 1, "", "is_extended_positive"], [39, 4, 1, "", "is_extended_real"], [39, 4, 1, "", "is_finite"], [39, 4, 1, "", "is_hermitian"], [39, 2, 1, "", "is_hypergeometric"], [39, 4, 1, "", "is_imaginary"], [39, 4, 1, "", "is_infinite"], [39, 4, 1, "", "is_integer"], [39, 4, 1, "", "is_irrational"], [39, 2, 1, "", "is_meromorphic"], [39, 4, 1, "", "is_negative"], [39, 4, 1, "", "is_noninteger"], [39, 4, 1, "", "is_nonnegative"], [39, 4, 1, "", "is_nonpositive"], [39, 4, 1, "", "is_nonzero"], [39, 5, 1, "", "is_number"], [39, 4, 1, "", "is_odd"], [39, 4, 1, "", "is_polar"], [39, 2, 1, "", "is_polynomial"], [39, 4, 1, "", "is_positive"], [39, 4, 1, "", "is_prime"], [39, 4, 1, "", "is_rational"], [39, 2, 1, "", "is_rational_function"], [39, 4, 1, "", "is_real"], [39, 5, 1, "", "is_scalar"], [39, 5, 1, "", "is_symbol"], [39, 4, 1, "", "is_transcendental"], [39, 4, 1, "", "is_zero"], [39, 4, 1, "", "kind"], [39, 2, 1, "", "leadterm"], [39, 2, 1, "", "limit"], [39, 2, 1, "", "lseries"], [39, 2, 1, "", "match"], [39, 2, 1, "", "matches"], [39, 2, 1, "", "n"], [39, 5, 1, "", "name"], [39, 2, 1, "", "normal"], [39, 2, 1, "", "nseries"], [39, 2, 1, "", "nsimplify"], [39, 2, 1, "", "powsimp"], [39, 2, 1, "", "primitive"], [39, 2, 1, "", "radsimp"], [39, 2, 1, "", "ratsimp"], [39, 2, 1, "", "rcall"], [39, 2, 1, "", "refine"], [39, 2, 1, "", "removeO"], [39, 2, 1, "", "replace"], [39, 2, 1, "", "rewrite"], [39, 2, 1, "", "round"], [39, 2, 1, "", "separate"], [39, 2, 1, "", "series"], [39, 2, 1, "", "simplify"], [39, 2, 1, "", "sort_key"], [39, 2, 1, "", "subs"], [39, 2, 1, "", "taylor_term"], [39, 2, 1, "", "to_nnf"], [39, 2, 1, "", "together"], [39, 2, 1, "", "transpose"], [39, 2, 1, "", "trigsimp"], [39, 2, 1, "", "xreplace"]], "nipy.algorithms.statistics.formula.formulae.Factor": [[39, 2, 1, "", "__init__"], [39, 4, 1, "", "coefs"], [39, 2, 1, "", "design"], [39, 4, 1, "", "design_expr"], [39, 4, 1, "", "dtype"], [39, 2, 1, "", "fromcol"], [39, 2, 1, "", "fromrec"], [39, 2, 1, "", "get_term"], [39, 4, 1, "", "main_effect"], [39, 4, 1, "", "mean"], [39, 4, 1, "", "params"], [39, 2, 1, "", "stratify"], [39, 2, 1, "", "subs"], [39, 4, 1, "", "terms"]], "nipy.algorithms.statistics.formula.formulae.FactorTerm": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "adjoint"], [39, 2, 1, "", "apart"], [39, 4, 1, "", "args"], [39, 2, 1, "", "args_cnc"], [39, 2, 1, "", "as_base_exp"], [39, 2, 1, "", "as_coeff_Add"], [39, 2, 1, "", "as_coeff_Mul"], [39, 2, 1, "", "as_coeff_add"], [39, 2, 1, "", "as_coeff_exponent"], [39, 2, 1, "", "as_coeff_mul"], [39, 2, 1, "", "as_coefficient"], [39, 2, 1, "", "as_coefficients_dict"], [39, 2, 1, "", "as_content_primitive"], [39, 2, 1, "", "as_dummy"], [39, 2, 1, "", "as_expr"], [39, 2, 1, "", "as_independent"], [39, 2, 1, "", "as_leading_term"], [39, 2, 1, "", "as_numer_denom"], [39, 2, 1, "", "as_ordered_factors"], [39, 2, 1, "", "as_ordered_terms"], [39, 2, 1, "", "as_poly"], [39, 2, 1, "", "as_powers_dict"], [39, 2, 1, "", "as_real_imag"], [39, 2, 1, "", "as_set"], [39, 2, 1, "", "as_terms"], [39, 2, 1, "", "aseries"], [39, 4, 1, "", "assumptions0"], [39, 2, 1, "", "atoms"], [39, 4, 1, "", "binary_symbols"], [39, 2, 1, "", "cancel"], [39, 4, 1, "", "canonical_variables"], [39, 2, 1, "", "class_key"], [39, 2, 1, "", "coeff"], [39, 2, 1, "", "collect"], [39, 2, 1, "", "combsimp"], [39, 2, 1, "", "compare"], [39, 2, 1, "", "compute_leading_term"], [39, 2, 1, "", "conjugate"], [39, 2, 1, "", "copy"], [39, 2, 1, "", "could_extract_minus_sign"], [39, 2, 1, "", "count"], [39, 2, 1, "", "count_ops"], [39, 5, 1, "", "default_assumptions"], [39, 2, 1, "", "diff"], [39, 2, 1, "", "dir"], [39, 2, 1, "", "doit"], [39, 2, 1, "", "dummy_eq"], [39, 2, 1, "", "equals"], [39, 2, 1, "", "evalf"], [39, 2, 1, "", "expand"], [39, 4, 1, "", "expr_free_symbols"], [39, 2, 1, "", "extract_additively"], [39, 2, 1, "", "extract_branch_factor"], [39, 2, 1, "", "extract_multiplicatively"], [39, 2, 1, "", "factor"], [39, 2, 1, "", "find"], [39, 4, 1, "", "formula"], [39, 2, 1, "", "fourier_series"], [39, 2, 1, "", "fps"], [39, 4, 1, "", "free_symbols"], [39, 2, 1, "", "fromiter"], [39, 4, 1, "", "func"], [39, 2, 1, "", "gammasimp"], [39, 2, 1, "", "getO"], [39, 2, 1, "", "getn"], [39, 2, 1, "", "has"], [39, 2, 1, "", "has_free"], [39, 2, 1, "", "has_xfree"], [39, 2, 1, "", "integrate"], [39, 2, 1, "", "invert"], [39, 5, 1, "", "is_Add"], [39, 5, 1, "", "is_AlgebraicNumber"], [39, 5, 1, "", "is_Atom"], [39, 5, 1, "", "is_Boolean"], [39, 5, 1, "", "is_Derivative"], [39, 5, 1, "", "is_Dummy"], [39, 5, 1, "", "is_Equality"], [39, 5, 1, "", "is_Float"], [39, 5, 1, "", "is_Function"], [39, 5, 1, "", "is_Indexed"], [39, 5, 1, "", "is_Integer"], [39, 5, 1, "", "is_MatAdd"], [39, 5, 1, "", "is_MatMul"], [39, 5, 1, "", "is_Matrix"], [39, 5, 1, "", "is_Mul"], [39, 5, 1, "", "is_Not"], [39, 5, 1, "", "is_Number"], [39, 5, 1, "", "is_NumberSymbol"], [39, 5, 1, "", "is_Order"], [39, 5, 1, "", "is_Piecewise"], [39, 5, 1, "", "is_Point"], [39, 5, 1, "", "is_Poly"], [39, 5, 1, "", "is_Pow"], [39, 5, 1, "", "is_Rational"], [39, 5, 1, "", "is_Relational"], [39, 5, 1, "", "is_Symbol"], [39, 5, 1, "", "is_Vector"], [39, 5, 1, "", "is_Wild"], [39, 4, 1, "", "is_algebraic"], [39, 2, 1, "", "is_algebraic_expr"], [39, 4, 1, "", "is_antihermitian"], [39, 4, 1, "", "is_commutative"], [39, 5, 1, "", "is_comparable"], [39, 4, 1, "", "is_complex"], [39, 4, 1, "", "is_composite"], [39, 2, 1, "", "is_constant"], [39, 4, 1, "", "is_even"], [39, 4, 1, "", "is_extended_negative"], [39, 4, 1, "", "is_extended_nonnegative"], [39, 4, 1, "", "is_extended_nonpositive"], [39, 4, 1, "", "is_extended_nonzero"], [39, 4, 1, "", "is_extended_positive"], [39, 4, 1, "", "is_extended_real"], [39, 4, 1, "", "is_finite"], [39, 4, 1, "", "is_hermitian"], [39, 2, 1, "", "is_hypergeometric"], [39, 4, 1, "", "is_imaginary"], [39, 4, 1, "", "is_infinite"], [39, 4, 1, "", "is_integer"], [39, 4, 1, "", "is_irrational"], [39, 2, 1, "", "is_meromorphic"], [39, 4, 1, "", "is_negative"], [39, 4, 1, "", "is_noninteger"], [39, 4, 1, "", "is_nonnegative"], [39, 4, 1, "", "is_nonpositive"], [39, 4, 1, "", "is_nonzero"], [39, 5, 1, "", "is_number"], [39, 4, 1, "", "is_odd"], [39, 4, 1, "", "is_polar"], [39, 2, 1, "", "is_polynomial"], [39, 4, 1, "", "is_positive"], [39, 4, 1, "", "is_prime"], [39, 4, 1, "", "is_rational"], [39, 2, 1, "", "is_rational_function"], [39, 4, 1, "", "is_real"], [39, 5, 1, "", "is_scalar"], [39, 5, 1, "", "is_symbol"], [39, 4, 1, "", "is_transcendental"], [39, 4, 1, "", "is_zero"], [39, 4, 1, "", "kind"], [39, 2, 1, "", "leadterm"], [39, 2, 1, "", "limit"], [39, 2, 1, "", "lseries"], [39, 2, 1, "", "match"], [39, 2, 1, "", "matches"], [39, 2, 1, "", "n"], [39, 5, 1, "", "name"], [39, 2, 1, "", "normal"], [39, 2, 1, "", "nseries"], [39, 2, 1, "", "nsimplify"], [39, 2, 1, "", "powsimp"], [39, 2, 1, "", "primitive"], [39, 2, 1, "", "radsimp"], [39, 2, 1, "", "ratsimp"], [39, 2, 1, "", "rcall"], [39, 2, 1, "", "refine"], [39, 2, 1, "", "removeO"], [39, 2, 1, "", "replace"], [39, 2, 1, "", "rewrite"], [39, 2, 1, "", "round"], [39, 2, 1, "", "separate"], [39, 2, 1, "", "series"], [39, 2, 1, "", "simplify"], [39, 2, 1, "", "sort_key"], [39, 2, 1, "", "subs"], [39, 2, 1, "", "taylor_term"], [39, 2, 1, "", "to_nnf"], [39, 2, 1, "", "together"], [39, 2, 1, "", "transpose"], [39, 2, 1, "", "trigsimp"], [39, 2, 1, "", "xreplace"]], "nipy.algorithms.statistics.formula.formulae.Formula": [[39, 2, 1, "", "__init__"], [39, 4, 1, "", "coefs"], [39, 2, 1, "", "design"], [39, 4, 1, "", "design_expr"], [39, 4, 1, "", "dtype"], [39, 2, 1, "", "fromrec"], [39, 4, 1, "", "mean"], [39, 4, 1, "", "params"], [39, 2, 1, "", "subs"], [39, 4, 1, "", "terms"]], "nipy.algorithms.statistics.formula.formulae.RandomEffects": [[39, 2, 1, "", "__init__"], [39, 4, 1, "", "coefs"], [39, 2, 1, "", "cov"], [39, 2, 1, "", "design"], [39, 4, 1, "", "design_expr"], [39, 4, 1, "", "dtype"], [39, 2, 1, "", "fromrec"], [39, 4, 1, "", "mean"], [39, 4, 1, "", "params"], [39, 2, 1, "", "subs"], [39, 4, 1, "", "terms"]], "nipy.algorithms.statistics.formula.formulae.Term": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "adjoint"], [39, 2, 1, "", "apart"], [39, 4, 1, "", "args"], [39, 2, 1, "", "args_cnc"], [39, 2, 1, "", "as_base_exp"], [39, 2, 1, "", "as_coeff_Add"], [39, 2, 1, "", "as_coeff_Mul"], [39, 2, 1, "", "as_coeff_add"], [39, 2, 1, "", "as_coeff_exponent"], [39, 2, 1, "", "as_coeff_mul"], [39, 2, 1, "", "as_coefficient"], [39, 2, 1, "", "as_coefficients_dict"], [39, 2, 1, "", "as_content_primitive"], [39, 2, 1, "", "as_dummy"], [39, 2, 1, "", "as_expr"], [39, 2, 1, "", "as_independent"], [39, 2, 1, "", "as_leading_term"], [39, 2, 1, "", "as_numer_denom"], [39, 2, 1, "", "as_ordered_factors"], [39, 2, 1, "", "as_ordered_terms"], [39, 2, 1, "", "as_poly"], [39, 2, 1, "", "as_powers_dict"], [39, 2, 1, "", "as_real_imag"], [39, 2, 1, "", "as_set"], [39, 2, 1, "", "as_terms"], [39, 2, 1, "", "aseries"], [39, 4, 1, "", "assumptions0"], [39, 2, 1, "", "atoms"], [39, 4, 1, "", "binary_symbols"], [39, 2, 1, "", "cancel"], [39, 4, 1, "", "canonical_variables"], [39, 2, 1, "", "class_key"], [39, 2, 1, "", "coeff"], [39, 2, 1, "", "collect"], [39, 2, 1, "", "combsimp"], [39, 2, 1, "", "compare"], [39, 2, 1, "", "compute_leading_term"], [39, 2, 1, "", "conjugate"], [39, 2, 1, "", "copy"], [39, 2, 1, "", "could_extract_minus_sign"], [39, 2, 1, "", "count"], [39, 2, 1, "", "count_ops"], [39, 5, 1, "", "default_assumptions"], [39, 2, 1, "", "diff"], [39, 2, 1, "", "dir"], [39, 2, 1, "", "doit"], [39, 2, 1, "", "dummy_eq"], [39, 2, 1, "", "equals"], [39, 2, 1, "", "evalf"], [39, 2, 1, "", "expand"], [39, 4, 1, "", "expr_free_symbols"], [39, 2, 1, "", "extract_additively"], [39, 2, 1, "", "extract_branch_factor"], [39, 2, 1, "", "extract_multiplicatively"], [39, 2, 1, "", "factor"], [39, 2, 1, "", "find"], [39, 4, 1, "", "formula"], [39, 2, 1, "", "fourier_series"], [39, 2, 1, "", "fps"], [39, 4, 1, "", "free_symbols"], [39, 2, 1, "", "fromiter"], [39, 4, 1, "", "func"], [39, 2, 1, "", "gammasimp"], [39, 2, 1, "", "getO"], [39, 2, 1, "", "getn"], [39, 2, 1, "", "has"], [39, 2, 1, "", "has_free"], [39, 2, 1, "", "has_xfree"], [39, 2, 1, "", "integrate"], [39, 2, 1, "", "invert"], [39, 5, 1, "", "is_Add"], [39, 5, 1, "", "is_AlgebraicNumber"], [39, 5, 1, "", "is_Atom"], [39, 5, 1, "", "is_Boolean"], [39, 5, 1, "", "is_Derivative"], [39, 5, 1, "", "is_Dummy"], [39, 5, 1, "", "is_Equality"], [39, 5, 1, "", "is_Float"], [39, 5, 1, "", "is_Function"], [39, 5, 1, "", "is_Indexed"], [39, 5, 1, "", "is_Integer"], [39, 5, 1, "", "is_MatAdd"], [39, 5, 1, "", "is_MatMul"], [39, 5, 1, "", "is_Matrix"], [39, 5, 1, "", "is_Mul"], [39, 5, 1, "", "is_Not"], [39, 5, 1, "", "is_Number"], [39, 5, 1, "", "is_NumberSymbol"], [39, 5, 1, "", "is_Order"], [39, 5, 1, "", "is_Piecewise"], [39, 5, 1, "", "is_Point"], [39, 5, 1, "", "is_Poly"], [39, 5, 1, "", "is_Pow"], [39, 5, 1, "", "is_Rational"], [39, 5, 1, "", "is_Relational"], [39, 5, 1, "", "is_Symbol"], [39, 5, 1, "", "is_Vector"], [39, 5, 1, "", "is_Wild"], [39, 4, 1, "", "is_algebraic"], [39, 2, 1, "", "is_algebraic_expr"], [39, 4, 1, "", "is_antihermitian"], [39, 4, 1, "", "is_commutative"], [39, 5, 1, "", "is_comparable"], [39, 4, 1, "", "is_complex"], [39, 4, 1, "", "is_composite"], [39, 2, 1, "", "is_constant"], [39, 4, 1, "", "is_even"], [39, 4, 1, "", "is_extended_negative"], [39, 4, 1, "", "is_extended_nonnegative"], [39, 4, 1, "", "is_extended_nonpositive"], [39, 4, 1, "", "is_extended_nonzero"], [39, 4, 1, "", "is_extended_positive"], [39, 4, 1, "", "is_extended_real"], [39, 4, 1, "", "is_finite"], [39, 4, 1, "", "is_hermitian"], [39, 2, 1, "", "is_hypergeometric"], [39, 4, 1, "", "is_imaginary"], [39, 4, 1, "", "is_infinite"], [39, 4, 1, "", "is_integer"], [39, 4, 1, "", "is_irrational"], [39, 2, 1, "", "is_meromorphic"], [39, 4, 1, "", "is_negative"], [39, 4, 1, "", "is_noninteger"], [39, 4, 1, "", "is_nonnegative"], [39, 4, 1, "", "is_nonpositive"], [39, 4, 1, "", "is_nonzero"], [39, 5, 1, "", "is_number"], [39, 4, 1, "", "is_odd"], [39, 4, 1, "", "is_polar"], [39, 2, 1, "", "is_polynomial"], [39, 4, 1, "", "is_positive"], [39, 4, 1, "", "is_prime"], [39, 4, 1, "", "is_rational"], [39, 2, 1, "", "is_rational_function"], [39, 4, 1, "", "is_real"], [39, 5, 1, "", "is_scalar"], [39, 5, 1, "", "is_symbol"], [39, 4, 1, "", "is_transcendental"], [39, 4, 1, "", "is_zero"], [39, 4, 1, "", "kind"], [39, 2, 1, "", "leadterm"], [39, 2, 1, "", "limit"], [39, 2, 1, "", "lseries"], [39, 2, 1, "", "match"], [39, 2, 1, "", "matches"], [39, 2, 1, "", "n"], [39, 5, 1, "", "name"], [39, 2, 1, "", "normal"], [39, 2, 1, "", "nseries"], [39, 2, 1, "", "nsimplify"], [39, 2, 1, "", "powsimp"], [39, 2, 1, "", "primitive"], [39, 2, 1, "", "radsimp"], [39, 2, 1, "", "ratsimp"], [39, 2, 1, "", "rcall"], [39, 2, 1, "", "refine"], [39, 2, 1, "", "removeO"], [39, 2, 1, "", "replace"], [39, 2, 1, "", "rewrite"], [39, 2, 1, "", "round"], [39, 2, 1, "", "separate"], [39, 2, 1, "", "series"], [39, 2, 1, "", "simplify"], [39, 2, 1, "", "sort_key"], [39, 2, 1, "", "subs"], [39, 2, 1, "", "taylor_term"], [39, 2, 1, "", "to_nnf"], [39, 2, 1, "", "together"], [39, 2, 1, "", "transpose"], [39, 2, 1, "", "trigsimp"], [39, 2, 1, "", "xreplace"]], "nipy.algorithms.statistics.mixed_effects_stat": [[40, 1, 1, "", "MixedEffectsModel"], [40, 3, 1, "", "check_arrays"], [40, 3, 1, "", "generate_data"], [40, 3, 1, "", "mfx_stat"], [40, 3, 1, "", "one_sample_ftest"], [40, 3, 1, "", "one_sample_ttest"], [40, 3, 1, "", "t_stat"], [40, 3, 1, "", "two_sample_ftest"], [40, 3, 1, "", "two_sample_ttest"]], "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "log_like"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "score"]], "nipy.algorithms.statistics.models.family": [[41, 0, 0, "-", "family"], [42, 0, 0, "-", "links"], [43, 0, 0, "-", "varfuncs"]], "nipy.algorithms.statistics.models.family.family": [[41, 1, 1, "", "Binomial"], [41, 1, 1, "", "Family"], [41, 1, 1, "", "Gamma"], [41, 1, 1, "", "Gaussian"], [41, 1, 1, "", "InverseGaussian"], [41, 1, 1, "", "Poisson"]], "nipy.algorithms.statistics.models.family.family.Binomial": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 5, 1, "", "variance"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.family.Family": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.family.Gamma": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 5, 1, "", "variance"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.family.Gaussian": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 5, 1, "", "variance"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.family.InverseGaussian": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 5, 1, "", "variance"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.family.Poisson": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "deviance"], [41, 2, 1, "", "devresid"], [41, 2, 1, "", "fitted"], [41, 4, 1, "", "link"], [41, 5, 1, "", "links"], [41, 2, 1, "", "predict"], [41, 5, 1, "", "tol"], [41, 5, 1, "", "valid"], [41, 5, 1, "", "variance"], [41, 2, 1, "", "weights"]], "nipy.algorithms.statistics.models.family.links": [[42, 1, 1, "", "CDFLink"], [42, 1, 1, "", "CLogLog"], [42, 1, 1, "", "Link"], [42, 1, 1, "", "Log"], [42, 1, 1, "", "Logit"], [42, 1, 1, "", "Power"]], "nipy.algorithms.statistics.models.family.links.CDFLink": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "clean"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"], [42, 5, 1, "", "tol"]], "nipy.algorithms.statistics.models.family.links.CLogLog": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "clean"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"], [42, 5, 1, "", "tol"]], "nipy.algorithms.statistics.models.family.links.Link": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"]], "nipy.algorithms.statistics.models.family.links.Log": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "clean"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"], [42, 5, 1, "", "tol"]], "nipy.algorithms.statistics.models.family.links.Logit": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "clean"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"], [42, 5, 1, "", "tol"]], "nipy.algorithms.statistics.models.family.links.Power": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "deriv"], [42, 2, 1, "", "initialize"], [42, 2, 1, "", "inverse"]], "nipy.algorithms.statistics.models.family.varfuncs": [[43, 1, 1, "", "Binomial"], [43, 1, 1, "", "Power"], [43, 1, 1, "", "VarianceFunction"]], "nipy.algorithms.statistics.models.family.varfuncs.Binomial": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "clean"], [43, 5, 1, "", "tol"]], "nipy.algorithms.statistics.models.family.varfuncs.Power": [[43, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.models.family.varfuncs.VarianceFunction": [[43, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.models": [[44, 0, 0, "-", "glm"], [45, 0, 0, "-", "model"], [46, 0, 0, "-", "nlsmodel"], [47, 0, 0, "-", "regression"], [48, 0, 0, "-", "utils"]], "nipy.algorithms.statistics.models.glm": [[44, 1, 1, "", "Model"]], "nipy.algorithms.statistics.models.glm.Model": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "cont"], [44, 2, 1, "", "deviance"], [44, 2, 1, "", "estimate_scale"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "has_intercept"], [44, 2, 1, "", "information"], [44, 2, 1, "", "initialize"], [44, 2, 1, "", "logL"], [44, 5, 1, "", "niter"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "rank"], [44, 2, 1, "", "score"], [44, 2, 1, "", "whiten"]], "nipy.algorithms.statistics.models.model": [[45, 1, 1, "", "FContrastResults"], [45, 1, 1, "", "LikelihoodModel"], [45, 1, 1, "", "LikelihoodModelResults"], [45, 1, 1, "", "Model"], [45, 1, 1, "", "TContrastResults"]], "nipy.algorithms.statistics.models.model.FContrastResults": [[45, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.models.model.LikelihoodModel": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "information"], [45, 2, 1, "", "initialize"], [45, 2, 1, "", "logL"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "score"]], "nipy.algorithms.statistics.models.model.LikelihoodModelResults": [[45, 2, 1, "", "AIC"], [45, 2, 1, "", "BIC"], [45, 2, 1, "", "Fcontrast"], [45, 2, 1, "", "Tcontrast"], [45, 2, 1, "", "__init__"], [45, 2, 1, "", "conf_int"], [45, 2, 1, "", "logL"], [45, 2, 1, "", "t"], [45, 2, 1, "", "vcov"]], "nipy.algorithms.statistics.models.model.Model": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "initialize"], [45, 2, 1, "", "predict"]], "nipy.algorithms.statistics.models.model.TContrastResults": [[45, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.models.nlsmodel": [[46, 1, 1, "", "NLSModel"]], "nipy.algorithms.statistics.models.nlsmodel.NLSModel": [[46, 2, 1, "", "SSE"], [46, 2, 1, "", "__init__"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "getZ"], [46, 2, 1, "", "getomega"], [46, 2, 1, "", "initialize"], [46, 2, 1, "", "predict"]], "nipy.algorithms.statistics.models.regression": [[47, 1, 1, "", "AREstimator"], [47, 1, 1, "", "ARModel"], [47, 1, 1, "", "GLSModel"], [47, 1, 1, "", "OLSModel"], [47, 1, 1, "", "RegressionResults"], [47, 1, 1, "", "WLSModel"], [47, 3, 1, "", "ar_bias_correct"], [47, 3, 1, "", "ar_bias_corrector"], [47, 3, 1, "", "isestimable"], [47, 3, 1, "", "yule_walker"]], "nipy.algorithms.statistics.models.regression.AREstimator": [[47, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.models.regression.ARModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "has_intercept"], [47, 2, 1, "", "information"], [47, 2, 1, "", "initialize"], [47, 2, 1, "", "iterative_fit"], [47, 2, 1, "", "logL"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "rank"], [47, 2, 1, "", "score"], [47, 2, 1, "", "whiten"]], "nipy.algorithms.statistics.models.regression.GLSModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "has_intercept"], [47, 2, 1, "", "information"], [47, 2, 1, "", "initialize"], [47, 2, 1, "", "logL"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "rank"], [47, 2, 1, "", "score"], [47, 2, 1, "", "whiten"]], "nipy.algorithms.statistics.models.regression.OLSModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "has_intercept"], [47, 2, 1, "", "information"], [47, 2, 1, "", "initialize"], [47, 2, 1, "", "logL"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "rank"], [47, 2, 1, "", "score"], [47, 2, 1, "", "whiten"]], "nipy.algorithms.statistics.models.regression.RegressionResults": [[47, 2, 1, "", "AIC"], [47, 2, 1, "", "BIC"], [47, 2, 1, "", "F_overall"], [47, 2, 1, "", "Fcontrast"], [47, 2, 1, "", "MSE"], [47, 2, 1, "", "MSR"], [47, 2, 1, "", "MST"], [47, 2, 1, "", "R2"], [47, 2, 1, "", "R2_adj"], [47, 2, 1, "", "SSE"], [47, 2, 1, "", "SSR"], [47, 2, 1, "", "SST"], [47, 2, 1, "", "Tcontrast"], [47, 2, 1, "", "__init__"], [47, 2, 1, "", "conf_int"], [47, 2, 1, "", "logL"], [47, 2, 1, "", "norm_resid"], [47, 2, 1, "", "predicted"], [47, 2, 1, "", "resid"], [47, 2, 1, "", "t"], [47, 2, 1, "", "vcov"]], "nipy.algorithms.statistics.models.regression.WLSModel": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "has_intercept"], [47, 2, 1, "", "information"], [47, 2, 1, "", "initialize"], [47, 2, 1, "", "logL"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "rank"], [47, 2, 1, "", "score"], [47, 2, 1, "", "whiten"]], "nipy.algorithms.statistics.models.utils": [[48, 3, 1, "", "ECDF"], [48, 1, 1, "", "StepFunction"], [48, 3, 1, "", "mad"], [48, 3, 1, "", "monotone_fn_inverter"]], "nipy.algorithms.statistics.models.utils.StepFunction": [[48, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.onesample": [[49, 3, 1, "", "estimate_mean"], [49, 3, 1, "", "estimate_varatio"]], "nipy.algorithms.statistics.rft": [[50, 1, 1, "", "ChiBarSquared"], [50, 1, 1, "", "ChiSquared"], [50, 1, 1, "", "ECcone"], [50, 1, 1, "", "ECquasi"], [50, 1, 1, "", "FStat"], [50, 1, 1, "", "Hotelling"], [50, 1, 1, "", "IntrinsicVolumes"], [50, 1, 1, "", "MultilinearForm"], [50, 1, 1, "", "OneSidedF"], [50, 3, 1, "", "Q"], [50, 1, 1, "", "Roy"], [50, 1, 1, "", "TStat"], [50, 3, 1, "", "ball_search"], [50, 3, 1, "", "binomial"], [50, 1, 1, "", "fnsum"], [50, 3, 1, "", "mu_ball"], [50, 3, 1, "", "mu_sphere"], [50, 3, 1, "", "scale_space"], [50, 3, 1, "", "spherical_search"], [50, 3, 1, "", "volume2ball"]], "nipy.algorithms.statistics.rft.ChiBarSquared": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.ChiSquared": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.ECcone": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.ECquasi": [[50, 2, 1, "", "__init__"], [50, 4, 1, "", "c"], [50, 2, 1, "", "change_exponent"], [50, 4, 1, "", "coef"], [50, 4, 1, "", "coefficients"], [50, 4, 1, "", "coeffs"], [50, 2, 1, "", "compatible"], [50, 2, 1, "", "denom_poly"], [50, 2, 1, "", "deriv"], [50, 2, 1, "", "integ"], [50, 4, 1, "", "o"], [50, 4, 1, "", "order"], [50, 4, 1, "", "r"], [50, 4, 1, "", "roots"], [50, 4, 1, "", "variable"]], "nipy.algorithms.statistics.rft.FStat": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.Hotelling": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.IntrinsicVolumes": [[50, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.rft.MultilinearForm": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.OneSidedF": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.Roy": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.TStat": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "density"], [50, 2, 1, "", "integ"], [50, 2, 1, "", "pvalue"], [50, 2, 1, "", "quasi"]], "nipy.algorithms.statistics.rft.fnsum": [[50, 2, 1, "", "__init__"]], "nipy.algorithms.statistics.utils": [[51, 3, 1, "", "check_cast_bin8"], [51, 3, 1, "", "complex"], [51, 3, 1, "", "cube_with_strides_center"], [51, 3, 1, "", "decompose2d"], [51, 3, 1, "", "decompose3d"], [51, 3, 1, "", "join_complexes"], [51, 3, 1, "", "multiple_fast_inv"], [51, 3, 1, "", "multiple_mahalanobis"], [51, 3, 1, "", "test_EC2"], [51, 3, 1, "", "test_EC3"], [51, 3, 1, "", "z_score"]], "nipy.algorithms.utils": [[52, 0, 0, "-", "fast_distance"], [53, 0, 0, "-", "matrices"], [54, 0, 0, "-", "pca"]], "nipy.algorithms.utils.fast_distance": [[52, 3, 1, "", "euclidean_distance"]], "nipy.algorithms.utils.matrices": [[53, 3, 1, "", "full_rank"], [53, 3, 1, "", "matrix_rank"], [53, 3, 1, "", "pos_recipr"], [53, 3, 1, "", "recipr0"]], "nipy.algorithms.utils.pca": [[54, 3, 1, "", "pca"], [54, 3, 1, "", "pca_image"]], "nipy.cli": [[55, 0, 0, "-", "diagnose"], [56, 0, 0, "-", "img3dto4d"], [57, 0, 0, "-", "img4dto3d"], [58, 0, 0, "-", "realign4d"], [59, 0, 0, "-", "tsdiffana"]], "nipy.cli.diagnose": [[55, 3, 1, "", "main"]], "nipy.cli.img3dto4d": [[56, 3, 1, "", "do_3d_to_4d"], [56, 3, 1, "", "main"]], "nipy.cli.img4dto3d": [[57, 3, 1, "", "main"]], "nipy.cli.realign4d": [[58, 3, 1, "", "main"]], "nipy.cli.tsdiffana": [[59, 3, 1, "", "main"]], "nipy": [[60, 0, 0, "-", "conftest"], [127, 0, 0, "-", "pkg_info"], [129, 0, 0, "-", "utils"]], "nipy.conftest": [[60, 3, 1, "", "add_np"], [60, 3, 1, "", "in_tmp_path"], [60, 3, 1, "", "mpl_imports"]], "nipy.core.image": [[61, 0, 0, "-", "image"], [62, 0, 0, "-", "image_list"], [63, 0, 0, "-", "image_spaces"]], "nipy.core.image.image": [[61, 1, 1, "", "Image"], [61, 1, 1, "", "SliceMaker"], [61, 3, 1, "", "fromarray"], [61, 3, 1, "", "is_image"], [61, 3, 1, "", "iter_axis"], [61, 3, 1, "", "rollaxis"], [61, 3, 1, "", "rollimg"], [61, 3, 1, "", "subsample"], [61, 3, 1, "", "synchronized_order"]], "nipy.core.image.image.Image": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "affine"], [61, 2, 1, "", "axes"], [61, 5, 1, "", "coordmap"], [61, 2, 1, "", "from_image"], [61, 2, 1, "", "get_fdata"], [61, 4, 1, "", "header"], [61, 5, 1, "", "metadata"], [61, 2, 1, "", "ndim"], [61, 2, 1, "", "reference"], [61, 2, 1, "", "renamed_axes"], [61, 2, 1, "", "renamed_reference"], [61, 2, 1, "", "reordered_axes"], [61, 2, 1, "", "reordered_reference"], [61, 2, 1, "", "shape"]], "nipy.core.image.image.SliceMaker": [[61, 2, 1, "", "__init__"]], "nipy.core.image.image_list": [[62, 1, 1, "", "ImageList"]], "nipy.core.image.image_list.ImageList": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "from_image"], [62, 2, 1, "", "get_list_data"]], "nipy.core.image.image_spaces": [[63, 3, 1, "", "as_xyz_image"], [63, 3, 1, "", "is_xyz_affable"], [63, 3, 1, "", "make_xyz_image"], [63, 3, 1, "", "xyz_affine"]], "nipy.core.reference": [[64, 0, 0, "-", "array_coords"], [65, 0, 0, "-", "coordinate_map"], [66, 0, 0, "-", "coordinate_system"], [67, 0, 0, "-", "slices"], [68, 0, 0, "-", "spaces"]], "nipy.core.reference.array_coords": [[64, 1, 1, "", "ArrayCoordMap"], [64, 1, 1, "", "Grid"]], "nipy.core.reference.array_coords.ArrayCoordMap": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "from_shape"], [64, 4, 1, "", "transposed_values"], [64, 4, 1, "", "values"]], "nipy.core.reference.array_coords.Grid": [[64, 2, 1, "", "__init__"]], "nipy.core.reference.coordinate_map": [[65, 1, 1, "", "AffineTransform"], [65, 1, 1, "", "AxisError"], [65, 1, 1, "", "CoordMapMaker"], [65, 1, 1, "", "CoordMapMakerError"], [65, 1, 1, "", "CoordinateMap"], [65, 3, 1, "", "append_io_dim"], [65, 3, 1, "", "axmap"], [65, 3, 1, "", "compose"], [65, 3, 1, "", "drop_io_dim"], [65, 3, 1, "", "equivalent"], [65, 3, 1, "", "input_axis_index"], [65, 3, 1, "", "io_axis_indices"], [65, 3, 1, "", "orth_axes"], [65, 3, 1, "", "product"], [65, 3, 1, "", "renamed_domain"], [65, 3, 1, "", "renamed_range"], [65, 3, 1, "", "reordered_domain"], [65, 3, 1, "", "reordered_range"], [65, 3, 1, "", "shifted_domain_origin"], [65, 3, 1, "", "shifted_range_origin"]], "nipy.core.reference.coordinate_map.AffineTransform": [[65, 2, 1, "", "__init__"], [65, 5, 1, "", "affine"], [65, 2, 1, "", "from_params"], [65, 2, 1, "", "from_start_step"], [65, 5, 1, "", "function_domain"], [65, 5, 1, "", "function_range"], [65, 2, 1, "", "identity"], [65, 2, 1, "", "inverse"], [65, 5, 1, "", "ndims"], [65, 2, 1, "", "renamed_domain"], [65, 2, 1, "", "renamed_range"], [65, 2, 1, "", "reordered_domain"], [65, 2, 1, "", "reordered_range"], [65, 2, 1, "", "similar_to"]], "nipy.core.reference.coordinate_map.AxisError": [[65, 2, 1, "", "__init__"], [65, 5, 1, "", "args"], [65, 2, 1, "", "with_traceback"]], "nipy.core.reference.coordinate_map.CoordMapMaker": [[65, 2, 1, "", "__init__"], [65, 5, 1, "", "affine_maker"], [65, 5, 1, "", "generic_maker"], [65, 2, 1, "", "make_affine"], [65, 2, 1, "", "make_cmap"]], "nipy.core.reference.coordinate_map.CoordMapMakerError": [[65, 2, 1, "", "__init__"], [65, 5, 1, "", "args"], [65, 2, 1, "", "with_traceback"]], "nipy.core.reference.coordinate_map.CoordinateMap": [[65, 2, 1, "", "__init__"], [65, 5, 1, "", "function"], [65, 5, 1, "", "function_domain"], [65, 5, 1, "", "function_range"], [65, 2, 1, "", "inverse"], [65, 5, 1, "", "inverse_function"], [65, 5, 1, "", "ndims"], [65, 2, 1, "", "renamed_domain"], [65, 2, 1, "", "renamed_range"], [65, 2, 1, "", "reordered_domain"], [65, 2, 1, "", "reordered_range"], [65, 2, 1, "", "similar_to"]], "nipy.core.reference.coordinate_system": [[66, 1, 1, "", "CoordSysMaker"], [66, 1, 1, "", "CoordSysMakerError"], [66, 1, 1, "", "CoordinateSystem"], [66, 1, 1, "", "CoordinateSystemError"], [66, 3, 1, "", "is_coordsys"], [66, 3, 1, "", "is_coordsys_maker"], [66, 3, 1, "", "product"], [66, 3, 1, "", "safe_dtype"]], "nipy.core.reference.coordinate_system.CoordSysMaker": [[66, 2, 1, "", "__init__"], [66, 5, 1, "", "coord_sys_klass"]], "nipy.core.reference.coordinate_system.CoordSysMakerError": [[66, 2, 1, "", "__init__"], [66, 5, 1, "", "args"], [66, 2, 1, "", "with_traceback"]], "nipy.core.reference.coordinate_system.CoordinateSystem": [[66, 2, 1, "", "__init__"], [66, 5, 1, "", "coord_dtype"], [66, 5, 1, "", "coord_names"], [66, 5, 1, "", "dtype"], [66, 2, 1, "", "index"], [66, 5, 1, "", "name"], [66, 5, 1, "", "ndim"], [66, 2, 1, "", "similar_to"]], "nipy.core.reference.coordinate_system.CoordinateSystemError": [[66, 2, 1, "", "__init__"], [66, 5, 1, "", "args"], [66, 2, 1, "", "with_traceback"]], "nipy.core.reference.slices": [[67, 3, 1, "", "bounding_box"], [67, 3, 1, "", "xslice"], [67, 3, 1, "", "yslice"], [67, 3, 1, "", "zslice"]], "nipy.core.reference.spaces": [[68, 1, 1, "", "AffineError"], [68, 1, 1, "", "AxesError"], [68, 1, 1, "", "SpaceError"], [68, 1, 1, "", "SpaceTypeError"], [68, 1, 1, "", "XYZSpace"], [68, 3, 1, "", "get_world_cs"], [68, 3, 1, "", "is_xyz_affable"], [68, 3, 1, "", "is_xyz_space"], [68, 3, 1, "", "known_space"], [68, 3, 1, "", "xyz_affine"], [68, 3, 1, "", "xyz_order"]], "nipy.core.reference.spaces.AffineError": [[68, 2, 1, "", "__init__"], [68, 5, 1, "", "args"], [68, 2, 1, "", "with_traceback"]], "nipy.core.reference.spaces.AxesError": [[68, 2, 1, "", "__init__"], [68, 5, 1, "", "args"], [68, 2, 1, "", "with_traceback"]], "nipy.core.reference.spaces.SpaceError": [[68, 2, 1, "", "__init__"], [68, 5, 1, "", "args"], [68, 2, 1, "", "with_traceback"]], "nipy.core.reference.spaces.SpaceTypeError": [[68, 2, 1, "", "__init__"], [68, 5, 1, "", "args"], [68, 2, 1, "", "with_traceback"]], "nipy.core.reference.spaces.XYZSpace": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "as_map"], [68, 2, 1, "", "as_tuple"], [68, 2, 1, "", "register_to"], [68, 2, 1, "", "to_coordsys_maker"], [68, 4, 1, "", "x"], [68, 5, 1, "", "x_suffix"], [68, 4, 1, "", "y"], [68, 5, 1, "", "y_suffix"], [68, 4, 1, "", "z"], [68, 5, 1, "", "z_suffix"]], "nipy.core.utils": [[69, 0, 0, "-", "generators"]], "nipy.core.utils.generators": [[69, 3, 1, "", "data_generator"], [69, 3, 1, "", "f_generator"], [69, 3, 1, "", "matrix_generator"], [69, 3, 1, "", "parcels"], [69, 3, 1, "", "shape_generator"], [69, 3, 1, "", "slice_generator"], [69, 3, 1, "", "slice_parcels"], [69, 3, 1, "", "write_data"]], "nipy.interfaces": [[70, 0, 0, "-", "matlab"], [71, 0, 0, "-", "spm"]], "nipy.interfaces.matlab": [[70, 3, 1, "", "mlab_tempfile"], [70, 3, 1, "", "run_matlab"], [70, 3, 1, "", "run_matlab_script"]], "nipy.interfaces.spm": [[71, 1, 1, "", "SpmInfo"], [71, 3, 1, "", "fltcols"], [71, 3, 1, "", "fname_presuffix"], [71, 3, 1, "", "fnames_presuffix"], [71, 3, 1, "", "make_job"], [71, 3, 1, "", "run_jobdef"], [71, 3, 1, "", "scans_for_fname"], [71, 3, 1, "", "scans_for_fnames"]], "nipy.interfaces.spm.SpmInfo": [[71, 2, 1, "", "__init__"], [71, 4, 1, "", "spm_path"], [71, 4, 1, "", "spm_ver"]], "nipy.io": [[72, 0, 0, "-", "files"], [73, 0, 0, "-", "nibcompat"], [74, 0, 0, "-", "nifti_ref"]], "nipy.io.files": [[72, 3, 1, "", "as_image"], [72, 3, 1, "", "load"], [72, 3, 1, "", "save"]], "nipy.io.nibcompat": [[73, 3, 1, "", "get_affine"], [73, 3, 1, "", "get_dataobj"], [73, 3, 1, "", "get_header"], [73, 3, 1, "", "get_unscaled_data"]], "nipy.io.nifti_ref": [[74, 1, 1, "", "NiftiError"], [74, 3, 1, "", "nifti2nipy"], [74, 3, 1, "", "nipy2nifti"]], "nipy.io.nifti_ref.NiftiError": [[74, 2, 1, "", "__init__"], [74, 5, 1, "", "args"], [74, 2, 1, "", "with_traceback"]], "nipy.labs.datasets": [[75, 0, 0, "-", "converters"]], "nipy.labs.datasets.converters": [[75, 3, 1, "", "as_volume_img"], [75, 3, 1, "", "save"]], "nipy.labs.datasets.transforms": [[76, 0, 0, "-", "affine_transform"], [77, 0, 0, "-", "affine_utils"], [78, 0, 0, "-", "transform"]], "nipy.labs.datasets.transforms.affine_transform": [[76, 1, 1, "", "AffineTransform"]], "nipy.labs.datasets.transforms.affine_transform.AffineTransform": [[76, 2, 1, "", "__init__"], [76, 5, 1, "", "affine"], [76, 2, 1, "", "composed_with"], [76, 2, 1, "", "get_inverse"], [76, 5, 1, "", "input_space"], [76, 2, 1, "", "inverse_mapping"], [76, 2, 1, "", "mapping"], [76, 5, 1, "", "output_space"]], "nipy.labs.datasets.transforms.affine_utils": [[77, 3, 1, "", "apply_affine"], [77, 3, 1, "", "from_matrix_vector"], [77, 3, 1, "", "get_bounds"], [77, 3, 1, "", "to_matrix_vector"]], "nipy.labs.datasets.transforms.transform": [[78, 1, 1, "", "CompositionError"], [78, 1, 1, "", "Transform"]], "nipy.labs.datasets.transforms.transform.CompositionError": [[78, 2, 1, "", "__init__"], [78, 5, 1, "", "args"], [78, 2, 1, "", "with_traceback"]], "nipy.labs.datasets.transforms.transform.Transform": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "composed_with"], [78, 2, 1, "", "get_inverse"], [78, 5, 1, "", "input_space"], [78, 5, 1, "", "inverse_mapping"], [78, 5, 1, "", "mapping"], [78, 5, 1, "", "output_space"]], "nipy.labs.datasets.volumes": [[79, 0, 0, "-", "volume_data"], [80, 0, 0, "-", "volume_field"], [81, 0, 0, "-", "volume_grid"], [82, 0, 0, "-", "volume_img"]], "nipy.labs.datasets.volumes.volume_data": [[79, 1, 1, "", "VolumeData"]], "nipy.labs.datasets.volumes.volume_data.VolumeData": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "as_volume_img"], [79, 2, 1, "", "composed_with_transform"], [79, 2, 1, "", "get_fdata"], [79, 2, 1, "", "get_transform"], [79, 5, 1, "", "interpolation"], [79, 2, 1, "", "like_from_data"], [79, 5, 1, "", "metadata"], [79, 2, 1, "", "resampled_to_img"], [79, 2, 1, "", "values_in_world"], [79, 5, 1, "", "world_space"]], "nipy.labs.datasets.volumes.volume_field": [[80, 1, 1, "", "VolumeField"]], "nipy.labs.datasets.volumes.volume_field.VolumeField": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "as_volume_img"], [80, 2, 1, "", "composed_with_transform"], [80, 2, 1, "", "get_transform"], [80, 5, 1, "", "metadata"], [80, 2, 1, "", "resampled_to_img"], [80, 2, 1, "", "values_in_world"], [80, 5, 1, "", "world_space"]], "nipy.labs.datasets.volumes.volume_grid": [[81, 1, 1, "", "VolumeGrid"]], "nipy.labs.datasets.volumes.volume_grid.VolumeGrid": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "as_volume_img"], [81, 2, 1, "", "composed_with_transform"], [81, 2, 1, "", "get_fdata"], [81, 2, 1, "", "get_transform"], [81, 2, 1, "", "get_world_coords"], [81, 5, 1, "", "interpolation"], [81, 2, 1, "", "like_from_data"], [81, 5, 1, "", "metadata"], [81, 2, 1, "", "resampled_to_img"], [81, 2, 1, "", "values_in_world"], [81, 5, 1, "", "world_space"]], "nipy.labs.datasets.volumes.volume_img": [[82, 1, 1, "", "VolumeImg"]], "nipy.labs.datasets.volumes.volume_img.VolumeImg": [[82, 2, 1, "", "__init__"], [82, 5, 1, "", "affine"], [82, 2, 1, "", "as_volume_img"], [82, 2, 1, "", "composed_with_transform"], [82, 2, 1, "", "get_affine"], [82, 2, 1, "", "get_fdata"], [82, 2, 1, "", "get_transform"], [82, 2, 1, "", "get_world_coords"], [82, 5, 1, "", "interpolation"], [82, 2, 1, "", "like_from_data"], [82, 5, 1, "", "metadata"], [82, 2, 1, "", "resampled_to_img"], [82, 2, 1, "", "values_in_world"], [82, 5, 1, "", "world_space"], [82, 2, 1, "", "xyz_ordered"]], "nipy.labs.glm": [[83, 0, 0, "-", "glm"]], "nipy.labs.glm.glm": [[83, 1, 1, "", "contrast"], [83, 1, 1, "", "glm"], [83, 3, 1, "", "load"], [83, 3, 1, "", "ols"]], "nipy.labs.glm.glm.contrast": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "pvalue"], [83, 2, 1, "", "stat"], [83, 2, 1, "", "summary"], [83, 2, 1, "", "zscore"]], "nipy.labs.glm.glm.glm": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "contrast"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "save"]], "nipy.labs.group": [[84, 0, 0, "-", "permutation_test"]], "nipy.labs.group.permutation_test": [[84, 3, 1, "", "compute_cluster_stats"], [84, 3, 1, "", "compute_region_stat"], [84, 3, 1, "", "extract_clusters_from_diam"], [84, 3, 1, "", "extract_clusters_from_graph"], [84, 3, 1, "", "extract_clusters_from_thresh"], [84, 3, 1, "", "max_dist"], [84, 3, 1, "", "onesample_stat"], [84, 3, 1, "", "peak_XYZ"], [84, 1, 1, "", "permutation_test"], [84, 1, 1, "", "permutation_test_onesample"], [84, 1, 1, "", "permutation_test_onesample_graph"], [84, 1, 1, "", "permutation_test_twosample"], [84, 3, 1, "", "sorted_values"], [84, 3, 1, "", "twosample_stat"]], "nipy.labs.group.permutation_test.permutation_test": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "calibrate"], [84, 2, 1, "", "height_threshold"], [84, 2, 1, "", "pvalue"], [84, 2, 1, "", "zscore"]], "nipy.labs.group.permutation_test.permutation_test_onesample": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "calibrate"], [84, 2, 1, "", "height_threshold"], [84, 2, 1, "", "pvalue"], [84, 2, 1, "", "zscore"]], "nipy.labs.group.permutation_test.permutation_test_onesample_graph": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "calibrate"], [84, 2, 1, "", "height_threshold"], [84, 2, 1, "", "pvalue"], [84, 2, 1, "", "zscore"]], "nipy.labs.group.permutation_test.permutation_test_twosample": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "calibrate"], [84, 2, 1, "", "height_threshold"], [84, 2, 1, "", "pvalue"], [84, 2, 1, "", "zscore"]], "nipy.labs": [[85, 0, 0, "-", "mask"], [95, 0, 0, "-", "statistical_mapping"]], "nipy.labs.mask": [[85, 3, 1, "", "compute_mask"], [85, 3, 1, "", "compute_mask_files"], [85, 3, 1, "", "compute_mask_sessions"], [85, 3, 1, "", "intersect_masks"], [85, 3, 1, "", "largest_cc"], [85, 3, 1, "", "series_from_mask"], [85, 3, 1, "", "threshold_connect_components"]], "nipy.labs.spatial_models": [[86, 0, 0, "-", "bayesian_structural_analysis"], [87, 0, 0, "-", "bsa_io"], [88, 0, 0, "-", "discrete_domain"], [89, 0, 0, "-", "hierarchical_parcellation"], [90, 0, 0, "-", "hroi"], [91, 0, 0, "-", "mroi"], [92, 0, 0, "-", "parcel_io"], [93, 0, 0, "-", "parcellation"], [94, 0, 0, "-", "structural_bfls"]], "nipy.labs.spatial_models.bayesian_structural_analysis": [[86, 3, 1, "", "compute_landmarks"]], "nipy.labs.spatial_models.bsa_io": [[87, 3, 1, "", "make_bsa_image"]], "nipy.labs.spatial_models.discrete_domain": [[88, 1, 1, "", "DiscreteDomain"], [88, 1, 1, "", "MeshDomain"], [88, 1, 1, "", "NDGridDomain"], [88, 1, 1, "", "StructuredDomain"], [88, 3, 1, "", "array_affine_coord"], [88, 3, 1, "", "domain_from_binary_array"], [88, 3, 1, "", "domain_from_image"], [88, 3, 1, "", "domain_from_mesh"], [88, 3, 1, "", "grid_domain_from_binary_array"], [88, 3, 1, "", "grid_domain_from_image"], [88, 3, 1, "", "grid_domain_from_shape"], [88, 3, 1, "", "idx_affine_coord"], [88, 3, 1, "", "reduce_coo_matrix"], [88, 3, 1, "", "smatrix_from_3d_array"], [88, 3, 1, "", "smatrix_from_3d_idx"], [88, 3, 1, "", "smatrix_from_nd_array"], [88, 3, 1, "", "smatrix_from_nd_idx"]], "nipy.labs.spatial_models.discrete_domain.DiscreteDomain": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "connected_components"], [88, 2, 1, "", "copy"], [88, 2, 1, "", "get_coord"], [88, 2, 1, "", "get_feature"], [88, 2, 1, "", "get_volume"], [88, 2, 1, "", "integrate"], [88, 2, 1, "", "mask"], [88, 2, 1, "", "representative_feature"], [88, 2, 1, "", "set_feature"]], "nipy.labs.spatial_models.discrete_domain.MeshDomain": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "area"], [88, 2, 1, "", "topology"]], "nipy.labs.spatial_models.discrete_domain.NDGridDomain": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "connected_components"], [88, 2, 1, "", "copy"], [88, 2, 1, "", "get_coord"], [88, 2, 1, "", "get_feature"], [88, 2, 1, "", "get_volume"], [88, 2, 1, "", "integrate"], [88, 2, 1, "", "make_feature_from_image"], [88, 2, 1, "", "mask"], [88, 2, 1, "", "representative_feature"], [88, 2, 1, "", "set_feature"], [88, 2, 1, "", "to_image"]], "nipy.labs.spatial_models.discrete_domain.StructuredDomain": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "connected_components"], [88, 2, 1, "", "copy"], [88, 2, 1, "", "get_coord"], [88, 2, 1, "", "get_feature"], [88, 2, 1, "", "get_volume"], [88, 2, 1, "", "integrate"], [88, 2, 1, "", "mask"], [88, 2, 1, "", "representative_feature"], [88, 2, 1, "", "set_feature"]], "nipy.labs.spatial_models.hierarchical_parcellation": [[89, 3, 1, "", "hparcel"], [89, 3, 1, "", "perm_prfx"]], "nipy.labs.spatial_models.hroi": [[90, 3, 1, "", "HROI_as_discrete_domain_blobs"], [90, 3, 1, "", "HROI_from_watershed"], [90, 1, 1, "", "HierarchicalROI"], [90, 3, 1, "", "hroi_agglomeration"], [90, 3, 1, "", "make_hroi_from_subdomain"]], "nipy.labs.spatial_models.hroi.HierarchicalROI": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "copy"], [90, 2, 1, "", "feature_to_voxel_map"], [90, 2, 1, "", "get_coord"], [90, 2, 1, "", "get_feature"], [90, 2, 1, "", "get_id"], [90, 2, 1, "", "get_leaves_id"], [90, 2, 1, "", "get_local_volume"], [90, 2, 1, "", "get_parents"], [90, 2, 1, "", "get_roi_feature"], [90, 2, 1, "", "get_size"], [90, 2, 1, "", "get_volume"], [90, 2, 1, "", "integrate"], [90, 2, 1, "", "make_forest"], [90, 2, 1, "", "make_graph"], [90, 2, 1, "", "merge_ascending"], [90, 2, 1, "", "merge_descending"], [90, 2, 1, "", "plot_feature"], [90, 2, 1, "", "recompute_labels"], [90, 2, 1, "", "reduce_to_leaves"], [90, 2, 1, "", "remove_feature"], [90, 2, 1, "", "remove_roi_feature"], [90, 2, 1, "", "representative_feature"], [90, 2, 1, "", "select_id"], [90, 2, 1, "", "select_roi"], [90, 2, 1, "", "set_feature"], [90, 2, 1, "", "set_roi_feature"], [90, 2, 1, "", "to_image"]], "nipy.labs.spatial_models.mroi": [[91, 1, 1, "", "SubDomains"], [91, 3, 1, "", "subdomain_from_array"], [91, 3, 1, "", "subdomain_from_balls"], [91, 3, 1, "", "subdomain_from_image"], [91, 3, 1, "", "subdomain_from_position_and_image"]], "nipy.labs.spatial_models.mroi.SubDomains": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "copy"], [91, 2, 1, "", "feature_to_voxel_map"], [91, 2, 1, "", "get_coord"], [91, 2, 1, "", "get_feature"], [91, 2, 1, "", "get_id"], [91, 2, 1, "", "get_local_volume"], [91, 2, 1, "", "get_roi_feature"], [91, 2, 1, "", "get_size"], [91, 2, 1, "", "get_volume"], [91, 2, 1, "", "integrate"], [91, 2, 1, "", "plot_feature"], [91, 2, 1, "", "recompute_labels"], [91, 2, 1, "", "remove_feature"], [91, 2, 1, "", "remove_roi_feature"], [91, 2, 1, "", "representative_feature"], [91, 2, 1, "", "select_id"], [91, 2, 1, "", "select_roi"], [91, 2, 1, "", "set_feature"], [91, 2, 1, "", "set_roi_feature"], [91, 2, 1, "", "to_image"]], "nipy.labs.spatial_models.parcel_io": [[92, 3, 1, "", "fixed_parcellation"], [92, 3, 1, "", "mask_parcellation"], [92, 3, 1, "", "parcel_input"], [92, 3, 1, "", "parcellation_based_analysis"], [92, 3, 1, "", "write_parcellation_images"]], "nipy.labs.spatial_models.parcellation": [[93, 1, 1, "", "MultiSubjectParcellation"]], "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "check"], [93, 2, 1, "", "copy"], [93, 2, 1, "", "get_feature"], [93, 2, 1, "", "make_feature"], [93, 2, 1, "", "population"], [93, 2, 1, "", "set_feature"], [93, 2, 1, "", "set_individual_labels"], [93, 2, 1, "", "set_template_labels"]], "nipy.labs.spatial_models.structural_bfls": [[94, 1, 1, "", "LandmarkRegions"], [94, 3, 1, "", "build_landmarks"]], "nipy.labs.spatial_models.structural_bfls.LandmarkRegions": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "centers"], [94, 2, 1, "", "kernel_density"], [94, 2, 1, "", "map_label"], [94, 2, 1, "", "roi_prevalence"], [94, 2, 1, "", "show"]], "nipy.labs.statistical_mapping": [[95, 1, 1, "", "LinearModel"], [95, 3, 1, "", "bonferroni"], [95, 3, 1, "", "cluster_stats"], [95, 3, 1, "", "get_3d_peaks"], [95, 3, 1, "", "linear_model_fit"], [95, 3, 1, "", "onesample_test"], [95, 3, 1, "", "prepare_arrays"], [95, 3, 1, "", "simulated_pvalue"], [95, 3, 1, "", "twosample_test"]], "nipy.labs.statistical_mapping.LinearModel": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "contrast"], [95, 5, 1, "", "def_model"], [95, 5, 1, "", "def_niter"], [95, 2, 1, "", "dump"]], "nipy.labs.utils.mask": [[207, 3, 1, "", "compute_mask"], [208, 3, 1, "", "compute_mask_files"], [209, 3, 1, "", "compute_mask_sessions"]], "nipy.labs.utils": [[96, 0, 0, "-", "reproducibility_measures"], [97, 0, 0, "-", "simul_multisubject_fmri_dataset"], [98, 0, 0, "-", "zscore"]], "nipy.labs.utils.reproducibility_measures": [[96, 3, 1, "", "bootstrap_group"], [96, 3, 1, "", "cluster_reproducibility"], [96, 3, 1, "", "cluster_threshold"], [96, 3, 1, "", "conjunction"], [96, 3, 1, "", "coord_bsa"], [96, 3, 1, "", "draw_samples"], [96, 3, 1, "", "fttest"], [96, 3, 1, "", "get_cluster_position_from_thresholded_map"], [96, 3, 1, "", "get_peak_position_from_thresholded_map"], [96, 3, 1, "", "group_reproducibility_metrics"], [96, 3, 1, "", "histo_repro"], [96, 3, 1, "", "map_reproducibility"], [96, 3, 1, "", "mfx_ttest"], [96, 3, 1, "", "peak_reproducibility"], [96, 3, 1, "", "split_group"], [96, 3, 1, "", "statistics_from_position"], [96, 3, 1, "", "ttest"], [96, 3, 1, "", "voxel_reproducibility"], [96, 3, 1, "", "voxel_thresholded_ttest"]], "nipy.labs.utils.simul_multisubject_fmri_dataset": [[97, 3, 1, "", "surrogate_2d_dataset"], [97, 3, 1, "", "surrogate_3d_dataset"], [97, 3, 1, "", "surrogate_4d_dataset"]], "nipy.labs.utils.zscore": [[98, 3, 1, "", "zscore"]], "nipy.labs.viz_tools": [[99, 0, 0, "-", "activation_maps"], [100, 0, 0, "-", "anat_cache"], [101, 0, 0, "-", "cm"], [102, 0, 0, "-", "coord_tools"], [103, 0, 0, "-", "maps_3d"], [104, 0, 0, "-", "slicers"]], "nipy.labs.viz_tools.activation_maps": [[99, 3, 1, "", "demo_plot_map"], [99, 3, 1, "", "plot_anat"], [99, 3, 1, "", "plot_map"]], "nipy.labs.viz_tools.anat_cache": [[100, 3, 1, "", "find_mni_template"]], "nipy.labs.viz_tools.cm": [[101, 3, 1, "", "alpha_cmap"], [101, 3, 1, "", "dim_cmap"], [101, 3, 1, "", "replace_inside"]], "nipy.labs.viz_tools.coord_tools": [[102, 3, 1, "", "coord_transform"], [102, 3, 1, "", "find_cut_coords"], [102, 3, 1, "", "find_maxsep_cut_coords"], [102, 3, 1, "", "get_mask_bounds"]], "nipy.labs.viz_tools.maps_3d": [[103, 3, 1, "", "affine_img_src"], [103, 3, 1, "", "autocrop_img"], [103, 3, 1, "", "demo_plot_map_3d"], [103, 3, 1, "", "m2screenshot"], [103, 3, 1, "", "plot_anat_3d"], [103, 3, 1, "", "plot_map_3d"]], "nipy.labs.viz_tools.slicers": [[104, 1, 1, "", "BaseSlicer"], [104, 1, 1, "", "BaseStackedSlicer"], [104, 1, 1, "", "CutAxes"], [104, 1, 1, "", "OrthoSlicer"], [104, 1, 1, "", "XSlicer"], [104, 1, 1, "", "YSlicer"], [104, 1, 1, "", "ZSlicer"], [104, 3, 1, "", "demo_ortho_slicer"]], "nipy.labs.viz_tools.slicers.BaseSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.slicers.BaseStackedSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "draw_cross"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.slicers.CutAxes": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "do_cut"], [104, 2, 1, "", "draw_cut"], [104, 2, 1, "", "draw_left_right"], [104, 2, 1, "", "draw_position"], [104, 2, 1, "", "get_object_bounds"]], "nipy.labs.viz_tools.slicers.OrthoSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "draw_cross"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.slicers.XSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "draw_cross"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.slicers.YSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "draw_cross"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.slicers.ZSlicer": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "annotate"], [104, 2, 1, "", "contour_map"], [104, 2, 1, "", "draw_cross"], [104, 2, 1, "", "edge_map"], [104, 2, 1, "", "find_cut_coords"], [104, 2, 1, "", "init_with_figure"], [104, 2, 1, "", "plot_map"], [104, 2, 1, "", "title"]], "nipy.labs.viz_tools.test": [[105, 0, 0, "-", "test_activation_maps"], [106, 0, 0, "-", "test_cm"], [107, 0, 0, "-", "test_coord_tools"], [108, 0, 0, "-", "test_edge_detect"], [109, 0, 0, "-", "test_slicers"]], "nipy.labs.viz_tools.test.test_activation_maps": [[105, 3, 1, "", "test_anat_cache"], [105, 3, 1, "", "test_demo_plot_map"], [105, 3, 1, "", "test_plot_anat"], [105, 3, 1, "", "test_plot_anat_kwargs"], [105, 3, 1, "", "test_plot_map_empty"], [105, 3, 1, "", "test_plot_map_with_auto_cut_coords"]], "nipy.labs.viz_tools.test.test_cm": [[106, 3, 1, "", "test_dim_cmap"], [106, 3, 1, "", "test_replace_inside"]], "nipy.labs.viz_tools.test.test_coord_tools": [[107, 3, 1, "", "test_coord_transform_trivial"], [107, 3, 1, "", "test_find_cut_coords"], [107, 3, 1, "", "test_find_maxsep_cut_coords"]], "nipy.labs.viz_tools.test.test_edge_detect": [[108, 3, 1, "", "test_edge_detect"], [108, 3, 1, "", "test_fast_abs_percentile"]], "nipy.labs.viz_tools.test.test_slicers": [[109, 3, 1, "", "test_demo_ortho_slicer"]], "nipy.modalities.fmri": [[110, 0, 0, "-", "design"], [111, 0, 0, "-", "design_matrix"], [112, 0, 0, "-", "experimental_paradigm"], [113, 0, 0, "-", "fmri"], [118, 0, 0, "-", "glm"], [119, 0, 0, "-", "hemodynamic_models"], [120, 0, 0, "-", "hrf"], [121, 0, 0, "-", "realfuncs"], [126, 0, 0, "-", "utils"]], "nipy.modalities.fmri.design": [[110, 3, 1, "", "block_amplitudes"], [110, 3, 1, "", "block_design"], [110, 3, 1, "", "event_design"], [110, 3, 1, "", "fourier_basis"], [110, 3, 1, "", "natural_spline"], [110, 3, 1, "", "openfmri2nipy"], [110, 3, 1, "", "stack2designs"], [110, 3, 1, "", "stack_contrasts"], [110, 3, 1, "", "stack_designs"]], "nipy.modalities.fmri.design_matrix": [[111, 1, 1, "", "DesignMatrix"], [111, 3, 1, "", "dmtx_from_csv"], [111, 3, 1, "", "dmtx_light"], [111, 3, 1, "", "make_dmtx"]], "nipy.modalities.fmri.design_matrix.DesignMatrix": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "show"], [111, 2, 1, "", "show_contrast"], [111, 2, 1, "", "write_csv"]], "nipy.modalities.fmri.experimental_paradigm": [[112, 1, 1, "", "BlockParadigm"], [112, 1, 1, "", "EventRelatedParadigm"], [112, 1, 1, "", "Paradigm"], [112, 3, 1, "", "load_paradigm_from_csv_file"]], "nipy.modalities.fmri.experimental_paradigm.BlockParadigm": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "write_to_csv"]], "nipy.modalities.fmri.experimental_paradigm.EventRelatedParadigm": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "write_to_csv"]], "nipy.modalities.fmri.experimental_paradigm.Paradigm": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "write_to_csv"]], "nipy.modalities.fmri.fmri": [[113, 1, 1, "", "FmriImageList"], [113, 3, 1, "", "axis0_generator"]], "nipy.modalities.fmri.fmri.FmriImageList": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "from_image"], [113, 2, 1, "", "get_list_data"]], "nipy.modalities.fmri.fmristat": [[114, 0, 0, "-", "hrf"], [115, 0, 0, "-", "invert"], [116, 0, 0, "-", "model"], [117, 0, 0, "-", "outputters"]], "nipy.modalities.fmri.fmristat.hrf": [[114, 3, 1, "", "spectral_decomposition"], [114, 3, 1, "", "taylor_approx"]], "nipy.modalities.fmri.fmristat.invert": [[115, 3, 1, "", "invertR"]], "nipy.modalities.fmri.fmristat.model": [[116, 1, 1, "", "AR1"], [116, 1, 1, "", "ModelOutputImage"], [116, 1, 1, "", "OLS"], [116, 3, 1, "", "estimateAR"], [116, 3, 1, "", "generate_output"], [116, 3, 1, "", "model_generator"], [116, 3, 1, "", "output_AR1"], [116, 3, 1, "", "output_F"], [116, 3, 1, "", "output_T"], [116, 3, 1, "", "output_resid"], [116, 3, 1, "", "results_generator"]], "nipy.modalities.fmri.fmristat.model.AR1": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "execute"]], "nipy.modalities.fmri.fmristat.model.ModelOutputImage": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "save"]], "nipy.modalities.fmri.fmristat.model.OLS": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "execute"]], "nipy.modalities.fmri.fmristat.outputters": [[117, 1, 1, "", "RegressionOutput"], [117, 1, 1, "", "RegressionOutputList"], [117, 1, 1, "", "TOutput"], [117, 3, 1, "", "output_AR1"], [117, 3, 1, "", "output_F"], [117, 3, 1, "", "output_T"], [117, 3, 1, "", "output_resid"]], "nipy.modalities.fmri.fmristat.outputters.RegressionOutput": [[117, 2, 1, "", "__init__"]], "nipy.modalities.fmri.fmristat.outputters.RegressionOutputList": [[117, 2, 1, "", "__init__"]], "nipy.modalities.fmri.fmristat.outputters.TOutput": [[117, 2, 1, "", "__init__"]], "nipy.modalities.fmri.glm": [[118, 1, 1, "", "Contrast"], [118, 1, 1, "", "FMRILinearModel"], [118, 1, 1, "", "GeneralLinearModel"], [118, 3, 1, "", "data_scaling"]], "nipy.modalities.fmri.glm.Contrast": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "p_value"], [118, 2, 1, "", "stat"], [118, 2, 1, "", "z_score"]], "nipy.modalities.fmri.glm.FMRILinearModel": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "contrast"], [118, 2, 1, "", "fit"]], "nipy.modalities.fmri.glm.GeneralLinearModel": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "contrast"], [118, 2, 1, "", "fit"], [118, 2, 1, "", "get_beta"], [118, 2, 1, "", "get_logL"], [118, 2, 1, "", "get_mse"]], "nipy.modalities.fmri.hemodynamic_models": [[119, 3, 1, "", "compute_regressor"], [119, 3, 1, "", "glover_hrf"], [119, 3, 1, "", "glover_time_derivative"], [119, 3, 1, "", "spm_dispersion_derivative"], [119, 3, 1, "", "spm_hrf"], [119, 3, 1, "", "spm_time_derivative"]], "nipy.modalities.fmri.hrf": [[120, 3, 1, "", "ddspmt"], [120, 3, 1, "", "dspmt"], [120, 3, 1, "", "gamma_expr"], [120, 3, 1, "", "gamma_params"], [120, 3, 1, "", "spm_hrf_compat"], [120, 3, 1, "", "spmt"]], "nipy.modalities.fmri.realfuncs": [[121, 3, 1, "", "dct_ii_basis"], [121, 3, 1, "", "dct_ii_cut_basis"]], "nipy.modalities.fmri.spm": [[122, 0, 0, "-", "correlation"], [123, 0, 0, "-", "model"], [124, 0, 0, "-", "reml"], [125, 0, 0, "-", "trace"]], "nipy.modalities.fmri.spm.correlation": [[122, 3, 1, "", "ARcomponents"], [122, 3, 1, "", "ARcovariance"]], "nipy.modalities.fmri.spm.model": [[123, 3, 1, "", "Fmask"], [123, 1, 1, "", "SecondStage"], [123, 3, 1, "", "estimate_pooled_covariance"]], "nipy.modalities.fmri.spm.model.SecondStage": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "execute"]], "nipy.modalities.fmri.spm.reml": [[124, 3, 1, "", "orth"], [124, 3, 1, "", "reml"]], "nipy.modalities.fmri.spm.trace": [[125, 3, 1, "", "trRV"]], "nipy.modalities.fmri.utils": [[126, 1, 1, "", "Interp1dNumeric"], [126, 1, 1, "", "TimeConvolver"], [126, 3, 1, "", "blocks"], [126, 3, 1, "", "convolve_functions"], [126, 3, 1, "", "define"], [126, 3, 1, "", "events"], [126, 3, 1, "", "fourier_basis"], [126, 3, 1, "", "interp"], [126, 3, 1, "", "lambdify_t"], [126, 3, 1, "", "linear_interp"], [126, 3, 1, "", "step_function"]], "nipy.modalities.fmri.utils.Interp1dNumeric": [[126, 2, 1, "", "__init__"], [126, 5, 1, "", "dtype"], [126, 4, 1, "", "fill_value"]], "nipy.modalities.fmri.utils.TimeConvolver": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "convolve"]], "nipy.pkg_info": [[127, 3, 1, "", "get_pkg_info"], [127, 3, 1, "", "pkg_commit_hash"]], "nipy.testing": [[128, 0, 0, "-", "decorators"]], "nipy.testing.decorators": [[128, 3, 1, "", "if_datasource"], [128, 3, 1, "", "if_example_data"], [128, 3, 1, "", "if_templates"], [128, 3, 1, "", "make_label_dec"], [128, 3, 1, "", "needs_mpl_agg"], [128, 3, 1, "", "needs_review"]], "nipy.utils": [[129, 1, 1, "", "VisibleDeprecationWarning"], [130, 0, 0, "-", "arrays"], [131, 0, 0, "-", "perlpie"], [132, 0, 0, "-", "utilities"]], "nipy.utils.VisibleDeprecationWarning": [[129, 2, 1, "", "__init__"], [129, 5, 1, "", "args"], [129, 2, 1, "", "with_traceback"]], "nipy.utils.arrays": [[130, 3, 1, "", "strides_from"]], "nipy.utils.perlpie": [[131, 3, 1, "", "check_deps"], [131, 3, 1, "", "main"], [131, 3, 1, "", "perl_dash_pie"], [131, 3, 1, "", "print_extended_help"]], "nipy.utils.utilities": [[132, 3, 1, "", "is_iterable"], [132, 3, 1, "", "is_numlike"], [132, 3, 1, "", "seq_prod"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"algorithm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "cluster": [1, 2, 3, 4, 5, 6, 7], "bgmm": 1, "modul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 177], "class": [1, 2, 3, 4, 5, 7, 12, 13, 14, 16, 19, 21, 23, 24, 29, 34, 38, 39, 40, 41, 42, 43, 45, 47, 48, 50, 61, 64, 65, 66, 68, 71, 74, 78, 83, 84, 88, 90, 91, 95, 104, 111, 112, 116, 117, 118, 123, 126, 177, 201, 202], "vbgmm": 1, "function": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 19, 21, 23, 24, 25, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 47, 48, 49, 50, 51, 53, 54, 56, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 131, 132, 177, 178, 216, 217], "ggmixtur": 2, "gggm": 2, "ggm": 2, "gamma": [2, 41], "gmm": 3, "griddescriptor": 3, "hierarchical_clust": 4, "weightedforest": 4, "imm": 5, "mixedimm": 5, "util": [6, 48, 51, 52, 53, 54, 69, 96, 97, 98, 126, 129, 130, 131, 132, 207, 208, 209, 215, 217], "von_mises_fisher_mixtur": 7, "vonmisesmixtur": 7, "diagnost": [8, 9, 10, 11], "command": [8, 184], "screen": 9, "timediff": 10, "tsdiffplot": 11, "fwhm": 12, "reselimag": 12, "resel": 12, "graph": [13, 14, 15, 16], "bipartite_graph": 13, "bipartitegraph": 13, "field": 14, "forest": 15, "weightedgraph": 16, "group": [17, 84], "parcel_analysi": 17, "parcelanalysi": 17, "interpol": 18, "imageinterpol": 18, "kernel_smooth": 19, "linearfilt": 19, "optim": [20, 25, 176, 185], "registr": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 143], "affin": [21, 149, 229], "affine2d": 21, "rigid": 21, "rigid2d": 21, "similar": 21, "similarity2d": 21, "chain_transform": 22, "chaintransform": 22, "groupwise_registr": 23, "fmrirealign4d": 23, "image4d": 23, "realign4d": [23, 58], "realign4dalgorithm": 23, "spacerealign": 23, "spacetimerealign": 23, "histogram_registr": 24, "histogramregistr": 24, "polyaffin": 26, "resampl": [27, 32, 151], "script": 28, "similarity_measur": 29, "correlationcoeffici": 29, "correlationratio": 29, "correlationratiol1": 29, "discreteparzenmutualinform": 29, "mutualinform": 29, "normalizedmutualinform": 29, "parzenmutualinform": 29, "similaritymeasur": 29, "supervisedlikelihoodratio": 29, "transform": [30, 76, 77, 78, 143, 152], "type_check": 31, "segment": [33, 34], "brain_segment": 33, "braint1segment": 33, "slicetim": 35, "timefunc": 35, "statist": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "bayesian_mixed_effect": 36, "bench": 37, "bench_intvol": 37, "empirical_pvalu": 38, "normalempiricalnul": 38, "formula": [39, 224], "object": [39, 221, 224], "beta": 39, "factor": 39, "factorterm": 39, "randomeffect": 39, "term": 39, "mixed_effects_stat": 40, "mixedeffectsmodel": 40, "model": [41, 42, 43, 44, 45, 46, 47, 48, 116, 123, 149, 224], "famili": [41, 42, 43], "binomi": [41, 43], "gaussian": 41, "inversegaussian": 41, "poisson": 41, "link": [42, 171, 177], "cdflink": 42, "cloglog": 42, "log": [42, 160], "logit": 42, "power": [42, 43], "varfunc": 43, "variancefunct": 43, "glm": [44, 83, 118, 224], "gener": [44, 69, 201, 216, 226], "linear": 44, "fcontrastresult": 45, "likelihoodmodel": 45, "likelihoodmodelresult": 45, "tcontrastresult": 45, "nlsmodel": 46, "regress": 47, "arestim": 47, "armodel": 47, "glsmodel": 47, "olsmodel": 47, "regressionresult": 47, "wlsmodel": 47, "stepfunct": 48, "onesampl": 49, "rft": 50, "chibarsquar": 50, "chisquar": 50, "eccon": 50, "ecquasi": 50, "fstat": 50, "hotel": 50, "intrinsicvolum": 50, "multilinearform": 50, "onesidedf": 50, "roi": 50, "tstat": 50, "fnsum": 50, "fast_dist": 52, "matric": 53, "pca": 54, "cli": [55, 56, 57, 58, 59], "diagnos": 55, "img3dto4d": 56, "img4dto3d": 57, "tsdiffana": 59, "conftest": 60, "core": [61, 62, 63, 64, 65, 66, 67, 68, 69], "imag": [61, 62, 63, 74, 138, 146, 147, 149, 152, 179, 201, 222], "slicemak": 61, "image_list": 62, "imagelist": [62, 141], "image_spac": 63, "refer": [64, 65, 66, 67, 68, 114, 177], "array_coord": 64, "arraycoordmap": 64, "grid": 64, "coordinate_map": 65, "common": 65, "api": [65, 133, 134, 143, 144], "oper": 65, "map": [65, 74, 137, 147, 152, 216, 217, 222, 223, 229], "level": 65, "affinetransform": [65, 76], "axiserror": 65, "coordmapmak": 65, "coordmapmakererror": 65, "coordinatemap": [65, 143], "coordinate_system": 66, "coordsysmak": 66, "coordsysmakererror": 66, "coordinatesystem": 66, "coordinatesystemerror": 66, "slice": [67, 149], "space": 68, "affineerror": 68, "axeserror": 68, "spaceerror": 68, "spacetypeerror": 68, "xyzspac": 68, "interfac": [70, 71], "matlab": 70, "spm": [71, 122, 123, 124, 125], "spminfo": 71, "io": [72, 73, 74, 222], "file": [72, 153, 177, 178, 222, 227], "exampl": [72, 118, 131, 202, 216, 217, 224], "nibcompat": 73, "nifti_ref": 74, "background": [74, 138, 147], "nifti": 74, "input": 74, "coordin": [74, 137, 138, 143, 147, 152, 222, 223, 229], "system": [74, 143, 229], "output": [74, 138, 147, 160, 178, 193], "time": [74, 149], "like": [74, 140], "ax": 74, "doe": [74, 196], "thi": [74, 177], "have": 74, "axi": 74, "what": [74, 134, 136, 140, 179, 196, 219], "we": [74, 195, 227], "do": [74, 161, 174, 196], "about": [74, 134], "all": 74, "niftierror": 74, "lab": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217], "dataset": [75, 76, 77, 78, 79, 80, 81, 82, 136, 203, 204, 205, 206], "convert": 75, "affine_transform": 76, "affine_util": 77, "compositionerror": 78, "volum": [79, 80, 81, 82, 201, 203, 204, 205, 206], "volume_data": 79, "volumedata": 79, "volume_field": [80, 203, 204, 205, 206], "volumefield": [80, 203, 204, 205, 206], "volume_grid": 81, "volumegrid": 81, "volume_img": 82, "volumeimg": [82, 201], "contrast": [83, 118], "permutation_test": 84, "permutation_test_onesampl": 84, "permutation_test_onesample_graph": 84, "permutation_test_twosampl": 84, "mask": [85, 207, 208, 209, 215], "spatial_model": [86, 87, 88, 89, 90, 91, 92, 93, 94], "bayesian_structural_analysi": 86, "bsa_io": 87, "discrete_domain": 88, "discretedomain": 88, "meshdomain": 88, "ndgriddomain": 88, "structureddomain": 88, "hierarchical_parcel": 89, "hroi": 90, "hierarchicalroi": 90, "mroi": 91, "subdomain": 91, "parcel_io": 92, "parcel": 93, "multisubjectparcel": 93, "structural_bfl": 94, "landmarkregion": 94, "statistical_map": 95, "linearmodel": 95, "reproducibility_measur": 96, "simul_multisubject_fmri_dataset": 97, "zscore": 98, "viz_tool": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 210, 211, 212, 213], "activation_map": [99, 210], "anat_cach": 100, "cm": 101, "coord_tool": 102, "maps_3d": [103, 211, 212, 213], "slicer": 104, "baseslic": 104, "basestackedslic": 104, "cutax": 104, "orthoslic": 104, "xslicer": 104, "yslicer": 104, "zslicer": 104, "test": [105, 106, 107, 108, 109, 128, 158, 178], "test_activation_map": 105, "test_cm": 106, "test_coord_tool": 107, "test_edge_detect": 108, "test_slic": 109, "modal": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "fmri": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "design": [110, 135, 143, 145, 186, 224], "design_matrix": 111, "designmatrix": 111, "experimental_paradigm": 112, "note": [112, 137, 157], "blockparadigm": 112, "eventrelatedparadigm": 112, "paradigm": 112, "fmriimagelist": 113, "fmristat": [114, 115, 116, 117], "hrf": [114, 120], "invert": 115, "ar1": 116, "modeloutputimag": 116, "ol": 116, "outputt": 117, "regressionoutput": 117, "regressionoutputlist": 117, "toutput": 117, "fmrilinearmodel": 118, "generallinearmodel": 118, "hemodynamic_model": 119, "realfunc": 121, "correl": 122, "secondstag": 123, "reml": 124, "trace": 125, "interp1dnumer": 126, "timeconvolv": 126, "pkg_info": 127, "decor": 128, "visibledeprecationwarn": 129, "arrai": [130, 138, 147, 222], "perlpi": 131, "paramet": 131, "requir": 131, "can": 134, "nipi": [134, 138, 147, 163, 168, 174, 184, 186, 188, 192, 197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 217, 218, 219, 224, 227], "get": [134, 153, 162, 172, 184], "someth": 134, "interest": 134, "from": [134, 161, 170, 184, 222, 227], "brainvisa": 134, "databas": 134, "introduct": [134, 166, 228], "i": [134, 136, 179, 219], "todai": 134, "A": [134, 136, 169, 174, 199], "few": [134, 169], "thought": [134, 186], "possibl": 134, "repositori": [134, 144, 145, 161, 171], "softwar": [135, 218], "vtk": 136, "structur": [136, 201], "topologi": 136, "geometri": 136, "an": [136, 138, 147, 149, 179, 217, 221, 222, 226], "id": 136, "index": [136, 138, 147], "given": [136, 149], "vector": 136, "ha": 136, "one": [136, 178], "more": [136, 161, 201, 226], "point": [136, 177], "cell": 136, "associ": 136, "data": [136, 149, 153, 178, 201, 221, 222, 226, 227], "attribut": 136, "some": [137, 157, 161], "discuss": [137, 139, 147, 221], "email": [137, 160], "1": [137, 227], "2": [137, 227], "order": [138, 147], "The": [138, 147, 155, 161, 184, 201, 226], "problem": [138, 147, 172], "nativ": 138, "fortran": 138, "c": 138, "For": 138, "against": 138, "potenti": [138, 147], "clash": [138, 147], "between": [138, 147, 190], "default": [138, 147], "numpi": [138, 147, 185, 227, 230], "altern": [138, 147], "propos": [138, 147], "xyz": [138, 147], "code": [139, 153, 156, 159, 162, 168, 186, 190, 227], "would": 140, "pipelin": 140, "look": 140, "refactor": [141, 186], "usecas": 141, "defin": [142, 150], "us": [142, 148, 149, 150, 151, 152, 177, 181, 195, 201, 223, 227], "case": [142, 148, 149, 150, 151, 152], "multipl": 143, "match": 143, "simpl": [146, 149, 226], "viewer": 146, "other": [146, 161, 196, 227], "attempt": 146, "understand": 147, "voxel": 147, "real": [147, 152], "world": [147, 152, 230], "summari": [147, 161, 167, 227], "perform": 147, "penalti": 147, "batch": 148, "take": 149, "mean": 149, "over": 149, "4d": 149, "seri": [149, 169], "3d": [149, 217], "motion": 149, "correct": 149, "creat": [149, 152, 163, 191, 222], "coregistr": 149, "normal": [149, 223], "orient": 152, "compos": 152, "develop": [153, 161, 164, 170, 173, 175, 180, 181, 182, 183, 184, 186, 187, 189], "quickstart": 153, "sourc": [153, 162, 168, 175, 221, 227], "check": [153, 169], "out": [153, 190], "latest": [153, 162, 227], "version": 153, "guidelin": [153, 173], "submit": 153, "patch": [153, 170], "bug": [153, 186], "report": 153, "debug": [154, 159], "build": [154, 172, 184, 185, 227], "failur": 154, "changelog": 155, "commit": [156, 161, 169], "messag": 156, "pull": 156, "request": 156, "compil": [157, 185], "window": [157, 184, 185, 226, 227], "visual": [157, 221], "studio": 157, "coverag": [158, 178], "run": [159, 178, 184], "ipython": [159, 177, 230], "emb": 159, "crash": 159, "configur": [160, 163], "git": [160, 164, 165, 167], "overview": [160, 161, 165, 170, 171, 191], "In": [160, 161, 165, 170, 171], "detail": [160, 161, 165, 170, 171, 227], "user": [160, 225], "name": 160, "alias": 160, "editor": 160, "merg": [160, 161], "fanci": 160, "workflow": [161, 167, 169], "consid": 161, "delet": 161, "your": [161, 163, 171], "main": 161, "branch": 161, "updat": [161, 162], "mirror": 161, "trunk": [161, 169], "make": [161, 163, 170, 174, 177], "new": 161, "featur": [161, 186], "edit": 161, "ask": 161, "chang": [161, 169], "review": [161, 220], "thing": 161, "you": [161, 196], "might": 161, "want": 161, "github": [161, 163], "sever": 161, "peopl": 161, "share": 161, "singl": 161, "explor": 161, "rebas": 161, "recov": 161, "mess": 161, "up": [161, 163, 171, 191], "rewrit": 161, "histori": [161, 169, 199], "follow": 162, "local": 162, "copi": [162, 163], "own": 163, "fork": [163, 171], "set": [163, 171, 191], "account": 163, "_": 163, "instal": [165, 178, 181, 182, 183, 184, 185, 190, 191, 193, 226, 227], "resourc": 167, "tutori": [167, 186, 231], "advanc": 167, "manual": [167, 226], "page": 167, "onlin": 167, "work": 168, "maintain": 169, "integr": 169, "long": 169, "push": 169, "move": 170, "clone": 171, "upstream": 171, "repo": 171, "how": [172, 196], "write": [172, 178, 193], "document": [172, 177, 186, 192, 193, 202, 216, 218], "depend": [172, 181, 227], "view": 172, "syntax": 172, "style": 172, "guid": [174, 180, 225], "releas": 174, "checklist": 174, "open": [175, 221], "sphinx": [177, 193], "cheat": 177, "sheet": 177, "list": 177, "bullet": 177, "enumer": 177, "tabl": 177, "cross": 177, "section": 177, "extern": 177, "session": 177, "format": 177, "text": 177, "math": 177, "insert": 177, "matplotlib": [177, 230], "plot": [177, 217], "emac": [177, 190], "helper": 177, "inherit": 177, "diagram": 177, "autom": 178, "temporari": 178, "mani": 178, "suppress": 178, "warn": 178, "full": 178, "suit": 178, "option": [178, 226, 227], "packag": [178, 184, 191, 226, 227], "individu": 178, "describ": 179, "debian": 181, "ubuntu": 181, "addit": 181, "fedora": 182, "differ": 183, "distribut": 183, "easi": 184, "wai": [184, 226], "super": 184, "hard": 184, "compon": 184, "line": 184, "scipi": [185, 227, 230], "numer": 185, "librari": 185, "prerequisit": 185, "atla": 185, "lapack": 185, "combin": 185, "umfpack": 185, "fftw": 185, "todo": 186, "futur": 186, "plan": 187, "roadmap": 188, "tool": [189, 214], "trick": 190, "python": [190, 197, 227], "rest": [190, 193], "mode": 190, "doctest": 190, "checker": 190, "pycheck": 190, "pylint": 190, "pyflak": 190, "flymak": 190, "snippet": 190, "ropemac": 190, "switch": 190, "browser": 190, "virtualenv": 191, "content": 191, "setup": 191, "activ": [191, 216, 217], "pragmat": 191, "et": 191, "3": [191, 227, 229], "0": 191, "faq": [193, 194], "graphviz": 193, "osx": 193, "error": 193, "gotcha": 193, "docstr": 193, "why": [195, 196, 197], "should": 195, "bsd": [195, 196], "licens": [196, 218], "spell": 196, "licenc": 196, "did": 196, "choos": 196, "affect": 196, "our": 196, "relationship": 196, "project": 196, "nih": 196, "prefer": 196, "glossari": 198, "volumetr": 201, "method": [201, 221], "implement": [201, 229], "abstract": [201, 221], "empir": 202, "null": 202, "as_volume_img": 203, "composed_with_transform": 204, "resampled_to_img": 205, "values_in_world": 206, "compute_mask": 207, "compute_mask_fil": 208, "compute_mask_sess": 209, "plot_map": 210, "affine_img_src": 211, "plot_anat_3d": 212, "plot_map_3d": 213, "neurospin": 214, "extract": 215, "simul": 216, "viz": 217, "inform": [218, 224], "public": 220, "peer": 220, "poster": 220, "brainpi": 221, "hbm": 221, "2005": 221, "environ": 221, "analysi": 221, "human": 221, "brain": 221, "result": 221, "conclus": 221, "basic": [222, 223], "load": 222, "access": 222, "save": 222, "spatial": 223, "mathemat": [223, 229], "definit": 223, "specifi": 224, "experiment": 224, "event": 224, "relat": 224, "categor": 224, "count": 224, "process": 224, "v": 224, "intens": 224, "block": 224, "continu": 224, "stimuli": 224, "amplitud": 224, "random": 224, "neuron": 224, "convolut": 224, "hemodynam": 224, "deriv": 224, "matrix": 224, "drift": 224, "nonlinear": 224, "administr": 226, "non": 226, "ugli": 226, "On": 226, "unix": 226, "download": 227, "pip": 227, "linux": 227, "maco": 227, "anaconda": 227, "standard": 227, "recommend": 227, "procedur": 227, "formul": 229, "manipul": 229, "dimension": 229, "geographi": 230, "cython": 230, "mayavi": 230}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Can NIPY get something interesting from BrainVISA databases?": [[134, "can-nipy-get-something-interesting-from-brainvisa-databases"]], "Introduction": [[134, "introduction"], [166, "introduction"], [228, "introduction"]], "What is a database in BrainVISA today?": [[134, "what-is-a-database-in-brainvisa-today"]], "A few thoughts about a possible API for repositories": [[134, "a-few-thoughts-about-a-possible-api-for-repositories"]], "Software Design": [[135, "software-design"]], "VTK datasets": [[136, "vtk-datasets"]], "What is a VTK dataset?": [[136, "what-is-a-vtk-dataset"]], "Structure: topology / geometry": [[136, "structure-topology-geometry"]], "An id is an index into a given vector": [[136, "an-id-is-an-index-into-a-given-vector"]], "A dataset has one or more points": [[136, "a-dataset-has-one-or-more-points"]], "A dataset has one or more cells": [[136, "a-dataset-has-one-or-more-cells"]], "Associating points and cells": [[136, "associating-points-and-cells"]], "Data attributes": [[136, "data-attributes"]], "Some discussion notes on coordinate maps": [[137, "some-discussion-notes-on-coordinate-maps"]], "Email #1": [[137, "email-1"]], "Email #2": [[137, "email-2"]], "Background": [[138, "background"], [147, "background"], [74, "background"]], "Image index ordering": [[138, "image-index-ordering"], [147, "image-index-ordering"]], "The problem": [[138, "the-problem"], [147, "the-problem"]], "Native fortran or C indexing for images": [[138, "native-fortran-or-c-indexing-for-images"]], "For and against fortran ordering": [[138, "for-and-against-fortran-ordering"]], "Potential problems for fortran ordering": [[138, "potential-problems-for-fortran-ordering"]], "Clash between default ordering of numpy arrays and nipy images": [[138, "clash-between-default-ordering-of-numpy-arrays-and-nipy-images"], [147, "clash-between-default-ordering-of-numpy-arrays-and-nipy-images"]], "An alternative proposal - XYZ ordering of output coordinates": [[138, "an-alternative-proposal-xyz-ordering-of-output-coordinates"], [147, "an-alternative-proposal-xyz-ordering-of-output-coordinates"]], "Code discussions": [[139, "code-discussions"]], "What would pipelining look like?": [[140, "what-would-pipelining-look-like"]], "Refactoring imagelists": [[141, "refactoring-imagelists"]], "Usecases for ImageList": [[141, "usecases-for-imagelist"]], "Defining use cases": [[142, "defining-use-cases"], [150, "defining-use-cases"]], "CoordinateMap": [[143, "coordinatemap"], [65, "coordinatemap"]], "Registration API Design": [[143, "registration-api-design"]], "Transform Multiplication": [[143, "transform-multiplication"]], "Matching Coordinate Systems": [[143, "matching-coordinate-systems"]], "Repository API": [[144, "repository-api"]], "Repository design": [[145, "repository-design"]], "Simple image viewer": [[146, "simple-image-viewer"]], "Other attempts": [[146, "other-attempts"]], "Understanding voxel and real world mappings": [[147, "understanding-voxel-and-real-world-mappings"]], "Voxel coordinates and real-world coordinates": [[147, "voxel-coordinates-and-real-world-coordinates"]], "Voxel coordinates": [[147, "voxel-coordinates"]], "Real-world coordinates": [[147, "real-world-coordinates"]], "The proposal": [[147, "the-proposal"]], "Summary of discussion": [[147, "summary-of-discussion"]], "Potential problems": [[147, "potential-problems"]], "Performance penalties": [[147, "performance-penalties"]], "Batching use cases": [[148, "batching-use-cases"]], "Image model use cases": [[149, "image-model-use-cases"]], "Taking a mean over a 4D image": [[149, "taking-a-mean-over-a-4d-image"]], "Taking mean over series of 3D images": [[149, "taking-mean-over-series-of-3d-images"]], "Simple motion correction": [[149, "simple-motion-correction"]], "Slice timing": [[149, "slice-timing"]], "Creating an image given data and affine": [[149, "creating-an-image-given-data-and-affine"]], "Coregistration / normalization": [[149, "coregistration-normalization"]], "Resampling use cases": [[151, "resampling-use-cases"]], "Transformation use cases": [[152, "transformation-use-cases"]], "Image Orientation": [[152, "image-orientation"]], "Creating transformations / coordinate maps": [[152, "creating-transformations-coordinate-maps"]], "Composing transforms": [[152, "composing-transforms"]], "Real world to real world transform": [[152, "real-world-to-real-world-transform"]], "Development quickstart": [[153, "development-quickstart"]], "Source Code": [[153, "source-code"]], "Checking out the latest version": [[153, "checking-out-the-latest-version"]], "Getting data files": [[153, "getting-data-files"]], "Guidelines": [[153, "guidelines"]], "Submitting a patch": [[153, "submitting-a-patch"]], "Bug reports": [[153, "bug-reports"]], "Debugging the build": [[154, "debugging-the-build"]], "Debug for build failure": [[154, "debug-for-build-failure"]], "The ChangeLog": [[155, "the-changelog"]], "Commit message codes": [[156, "commit-message-codes"]], "Pull request codes": [[156, "pull-request-codes"]], "Some notes on compiling on windows with Visual Studio": [[157, "some-notes-on-compiling-on-windows-with-visual-studio"]], "Coverage Testing": [[158, "coverage-testing"], [178, "coverage-testing"]], "Debugging": [[159, "debugging"]], "Run in ipython": [[159, "run-in-ipython"]], "Embed ipython in crashing code": [[159, "embed-ipython-in-crashing-code"]], "Configure git": [[160, "configure-git"]], "Overview": [[160, "overview"], [161, "overview"], [165, "overview"], [170, "overview"], [171, "overview"], [191, "overview"]], "In detail": [[160, "in-detail"], [165, "in-detail"], [170, "in-detail"], [171, "in-detail"]], "user.name and user.email": [[160, "user-name-and-user-email"]], "Aliases": [[160, "aliases"]], "Editor": [[160, "editor"]], "Merging": [[160, "merging"]], "Fancy log output": [[160, "fancy-log-output"]], "Development workflow": [[161, "development-workflow"]], "Workflow summary": [[161, "workflow-summary"]], "Consider deleting your main branch": [[161, "consider-deleting-your-main-branch"]], "Update the mirror of trunk": [[161, "update-the-mirror-of-trunk"]], "Make a new feature branch": [[161, "make-a-new-feature-branch"]], "The editing workflow": [[161, "the-editing-workflow"]], "In more detail": [[161, "in-more-detail"]], "Ask for your changes to be reviewed or merged": [[161, "ask-for-your-changes-to-be-reviewed-or-merged"]], "Some other things you might want to do": [[161, "some-other-things-you-might-want-to-do"]], "Delete a branch on github": [[161, "delete-a-branch-on-github"]], "Several people sharing a single repository": [[161, "several-people-sharing-a-single-repository"]], "Explore your repository": [[161, "explore-your-repository"]], "Rebasing on trunk": [[161, "rebasing-on-trunk"]], "Recovering from mess-ups": [[161, "recovering-from-mess-ups"]], "Rewriting commit history": [[161, "rewriting-commit-history"]], "Following the latest source": [[162, "following-the-latest-source"]], "Get the local copy of the code": [[162, "get-the-local-copy-of-the-code"]], "Updating the code": [[162, "updating-the-code"]], "Making your own copy (fork) of nipy": [[163, "making-your-own-copy-fork-of-nipy"]], "Set up and configure a github account": [[163, "set-up-and-configure-a-github-account"]], "Create your own forked copy of `nipy`_": [[163, "create-your-own-forked-copy-of-nipy"]], "Git for development": [[164, "git-for-development"]], "Install git": [[165, "install-git"]], "git resources": [[167, "git-resources"]], "Tutorials and summaries": [[167, "tutorials-and-summaries"]], "Advanced git workflow": [[167, "advanced-git-workflow"]], "Manual pages online": [[167, "manual-pages-online"]], "Working with nipy source code": [[168, "working-with-nipy-source-code"]], "Maintainer workflow": [[169, "maintainer-workflow"]], "Integrating changes": [[169, "integrating-changes"]], "A few commits": [[169, "a-few-commits"]], "A long series of commits": [[169, "a-long-series-of-commits"]], "Check the history": [[169, "check-the-history"]], "Push to trunk": [[169, "push-to-trunk"]], "Making a patch": [[170, "making-a-patch"]], "Making patches": [[170, "making-patches"]], "Moving from patching to development": [[170, "moving-from-patching-to-development"]], "Set up your fork": [[171, "set-up-your-fork"]], "Clone your fork": [[171, "clone-your-fork"]], "Linking your repository to the upstream repo": [[171, "linking-your-repository-to-the-upstream-repo"]], "How to write documentation": [[172, "how-to-write-documentation"]], "Getting build dependencies": [[172, "getting-build-dependencies"]], "Building the documentation": [[172, "building-the-documentation"]], "Viewing the documentation": [[172, "viewing-the-documentation"]], "Syntax": [[172, "syntax"]], "Style": [[172, "style"]], "Documentation Problems": [[172, "documentation-problems"]], "Development Guidelines": [[173, "development-guidelines"]], "A guide to making a nipy release": [[174, "a-guide-to-making-a-nipy-release"]], "Release checklist": [[174, "release-checklist"]], "Doing the release": [[174, "doing-the-release"]], "Open Source Development": [[175, "open-source-development"]], "Optimization": [[176, "optimization"]], "Sphinx Cheat Sheet": [[177, "sphinx-cheat-sheet"]], "Making a list": [[177, "making-a-list"]], "Bullet points": [[177, "bullet-points"]], "Enumerated points": [[177, "enumerated-points"]], "Making a table": [[177, "making-a-table"]], "Making links": [[177, "making-links"]], "Cross-references sections and documents": [[177, "cross-references-sections-and-documents"]], "External links": [[177, "external-links"]], "Links to classes, modules and functions": [[177, "links-to-classes-modules-and-functions"]], "ipython sessions": [[177, "ipython-sessions"]], "Formatting text": [[177, "formatting-text"]], "Using math": [[177, "using-math"]], "Inserting matplotlib plots": [[177, "inserting-matplotlib-plots"]], "Emacs helpers": [[177, "emacs-helpers"]], "Inheritance diagrams": [[177, "inheritance-diagrams"]], "This file": [[177, "this-file"]], "Testing": [[178, "testing"]], "Automated testing": [[178, "automated-testing"]], "Writing tests": [[178, "writing-tests"]], "Test files": [[178, "test-files"]], "Temporary files": [[178, "temporary-files"]], "Many tests in one test function": [[178, "many-tests-in-one-test-function"]], "Suppress warnings on test output": [[178, "suppress-warnings-on-test-output"]], "Running tests": [[178, "running-tests"]], "Running the full test suite": [[178, "running-the-full-test-suite"]], "Install optional data packages for testing": [[178, "install-optional-data-packages-for-testing"]], "Running individual tests": [[178, "running-individual-tests"]], "Describing images": [[179, "describing-images"]], "What is an image?": [[179, "what-is-an-image"]], "Developer Guide": [[180, "developer-guide"]], "Debian / Ubuntu developer install": [[181, "debian-ubuntu-developer-install"]], "Dependencies": [[181, "dependencies"]], "Useful additions": [[181, "useful-additions"]], "Fedora developer install": [[182, "fedora-developer-install"]], "Developer installs for different distributions": [[183, "developer-installs-for-different-distributions"]], "Development install on windows": [[184, "development-install-on-windows"]], "The easy way - a super-package": [[184, "the-easy-way-a-super-package"]], "The hard way - by components": [[184, "the-hard-way-by-components"]], "Getting and installing NIPY": [[184, "getting-and-installing-nipy"]], "Running the build / install": [[184, "running-the-build-install"]], "The command line from Windows": [[184, "the-command-line-from-windows"]], "Building Scipy/Numpy on Windows with Optimized Numerical Libraries": [[185, "building-scipy-numpy-on-windows-with-optimized-numerical-libraries"]], "Prerequisites": [[185, "prerequisites"]], "Installation": [[185, "installation"]], "Compiling ATLAS": [[185, "compiling-atlas"]], "Compiling LAPACK": [[185, "compiling-lapack"]], "Combining LAPACK and ATLAS": [[185, "combining-lapack-and-atlas"]], "Compiling UMFPACK": [[185, "compiling-umfpack"]], "Compiling fftw": [[185, "compiling-fftw"]], "Compiling numpy/scipy": [[185, "compiling-numpy-scipy"]], "TODO for nipy development": [[186, "todo-for-nipy-development"]], "Documentation": [[186, "documentation"]], "Tutorials": [[186, "tutorials"], [231, "tutorials"]], "Bugs": [[186, "bugs"]], "Refactorings": [[186, "refactorings"]], "Code Design Thoughts": [[186, "code-design-thoughts"]], "Future Features": [[186, "future-features"]], "Development Planning": [[187, "development-planning"]], "Nipy roadmap": [[188, "nipy-roadmap"]], "Developer Tools": [[189, "developer-tools"]], "Tricked out emacs for python coding": [[190, "tricked-out-emacs-for-python-coding"]], "ReST mode": [[190, "rest-mode"]], "doctest mode": [[190, "doctest-mode"]], "code checkers": [[190, "code-checkers"]], "pychecker": [[190, "pychecker"]], "pylint": [[190, "pylint"]], "pyflakes": [[190, "pyflakes"]], "flymake .emacs snippet": [[190, "flymake-emacs-snippet"]], "ropemacs": [[190, "ropemacs"]], "Install": [[190, "install"]], "Switching between modes": [[190, "switching-between-modes"]], "emacs code browser": [[190, "emacs-code-browser"]], "Setting up virtualenv": [[191, "setting-up-virtualenv"]], "Contents": [[191, "contents"]], "Installing": [[191, "installing"]], "Setup virtualenv": [[191, "setup-virtualenv"]], "Create a virtualenv": [[191, "create-a-virtualenv"]], "Activate a virtualenv": [[191, "activate-a-virtualenv"]], "Install packages into a virtualenv": [[191, "install-packages-into-a-virtualenv"]], "Pragmatic virtualenv": [[191, "pragmatic-virtualenv"]], "Installing ETS 3.0.0": [[191, "installing-ets-3-0-0"]], "NIPY documentation": [[192, "nipy-documentation"]], "Documentation FAQ": [[193, "documentation-faq"]], "Installing graphviz on OSX": [[193, "installing-graphviz-on-osx"]], "Error writing output on OSX": [[193, "error-writing-output-on-osx"]], "Sphinx and reST gotchas": [[193, "sphinx-and-rest-gotchas"]], "Docstrings": [[193, "docstrings"]], "FAQ": [[194, "faq"]], "Why we should be using BSD": [[195, "why-we-should-be-using-bsd"]], "Licensing": [[196, "licensing"]], "How do you spell licence?": [[196, "how-do-you-spell-licence"]], "Why did you choose BSD?": [[196, "why-did-you-choose-bsd"]], "How does the BSD license affect our relationship to other projects?": [[196, "how-does-the-bsd-license-affect-our-relationship-to-other-projects"]], "What license does the NIH prefer?": [[196, "what-license-does-the-nih-prefer"]], "Why \u2026": [[197, "why"]], "Why nipy?": [[197, "why-nipy"]], "Why python?": [[197, "why-python"]], "Glossary": [[198, "glossary"]], "A history of NIPY": [[199, "a-history-of-nipy"]], "NIPY": [[200, "nipy"]], "Volumetric data structures": [[201, "volumetric-data-structures"]], "The image structure: VolumeImg": [[201, "the-image-structure-volumeimg"]], "Useful methods on volume structures": [[201, "useful-methods-on-volume-structures"]], "More general data structures": [[201, "more-general-data-structures"]], "Implemented classes": [[201, "implemented-classes"]], "Abstract classes": [[201, "abstract-classes"]], "Empirical null": [[202, "empirical-null"]], "Example": [[202, "example"], [216, "example"]], "Class documentation": [[202, "class-documentation"]], "nipy.labs.datasets.volumes.volume_field.VolumeField.as_volume_img": [[203, "nipy-labs-datasets-volumes-volume-field-volumefield-as-volume-img"]], "nipy.labs.datasets.volumes.volume_field.VolumeField.composed_with_transform": [[204, "nipy-labs-datasets-volumes-volume-field-volumefield-composed-with-transform"]], "nipy.labs.datasets.volumes.volume_field.VolumeField.resampled_to_img": [[205, "nipy-labs-datasets-volumes-volume-field-volumefield-resampled-to-img"]], "nipy.labs.datasets.volumes.volume_field.VolumeField.values_in_world": [[206, "nipy-labs-datasets-volumes-volume-field-volumefield-values-in-world"]], "nipy.labs.utils.mask.compute_mask": [[207, "nipy-labs-utils-mask-compute-mask"]], "nipy.labs.utils.mask.compute_mask_files": [[208, "nipy-labs-utils-mask-compute-mask-files"]], "nipy.labs.utils.mask.compute_mask_sessions": [[209, "nipy-labs-utils-mask-compute-mask-sessions"]], "nipy.labs.viz_tools.activation_maps.plot_map": [[210, "nipy-labs-viz-tools-activation-maps-plot-map"]], "nipy.labs.viz_tools.maps_3d.affine_img_src": [[211, "nipy-labs-viz-tools-maps-3d-affine-img-src"]], "nipy.labs.viz_tools.maps_3d.plot_anat_3d": [[212, "nipy-labs-viz-tools-maps-3d-plot-anat-3d"]], "nipy.labs.viz_tools.maps_3d.plot_map_3d": [[213, "nipy-labs-viz-tools-maps-3d-plot-map-3d"]], "NeuroSpin tools": [[214, "neurospin-tools"]], "Mask-extraction utilities": [[215, "mask-extraction-utilities"]], "Generating simulated activation maps": [[216, "generating-simulated-activation-maps"]], "Function documentation": [[216, "function-documentation"]], "Plotting of activation maps": [[217, "plotting-of-activation-maps"]], "An example": [[217, "an-example"]], "nipy.labs.viz functions": [[217, "nipy-labs-viz-functions"]], "3D plotting utilities": [[217, "d-plotting-utilities"]], "NIPY License Information": [[218, "nipy-license-information"]], "Software License": [[218, "software-license"]], "Documentation License": [[218, "documentation-license"]], "What is NIPY for?": [[219, "what-is-nipy-for"]], "Publications": [[220, "publications"]], "Peer-reviewed Publications": [[220, "peer-reviewed-publications"]], "Posters": [[220, "posters"]], "BrainPy HBM abstract, 2005": [[221, "brainpy-hbm-abstract-2005"]], "BrainPy: an open source environment for the analysis and visualization of human brain data": [[221, "brainpy-an-open-source-environment-for-the-analysis-and-visualization-of-human-brain-data"]], "Objective": [[221, "objective"]], "Methods": [[221, "methods"]], "Results & Discussion": [[221, "results-discussion"]], "Conclusions": [[221, "conclusions"]], "Basic Data IO": [[222, "basic-data-io"]], "Load Image from File": [[222, "load-image-from-file"]], "Access Data into an Array": [[222, "access-data-into-an-array"]], "Save image to a File": [[222, "save-image-to-a-file"]], "Create Image from an Array": [[222, "create-image-from-an-array"]], "Coordinate map": [[222, "coordinate-map"]], "Basics of the Coordinate Map": [[223, "basics-of-the-coordinate-map"]], "Use of the Coordinate Map for spatial normalization": [[223, "use-of-the-coordinate-map-for-spatial-normalization"]], "Mathematical definition": [[223, "mathematical-definition"]], "Formula objects": [[224, "formula-objects"], [39, "formula-objects"]], "Specifying a GLM in NiPy": [[224, "specifying-a-glm-in-nipy"]], "Experimental model": [[224, "experimental-model"]], "Event-related categorical design": [[224, "event-related-categorical-design"]], "Counting processes vs. intensities": [[224, "counting-processes-vs-intensities"]], "Block categorical design": [[224, "block-categorical-design"]], "Continuous stimuli": [[224, "continuous-stimuli"]], "Events with amplitudes": [[224, "events-with-amplitudes"], [224, "id2"]], "Events with random amplitudes": [[224, "events-with-random-amplitudes"]], "Neuronal model": [[224, "neuronal-model"]], "Convolution": [[224, "convolution"]], "Hemodynamic model": [[224, "hemodynamic-model"]], "Intensities": [[224, "intensities"]], "Derivative information": [[224, "derivative-information"]], "Design matrix": [[224, "design-matrix"]], "Drift": [[224, "drift"]], "Nonlinear example": [[224, "nonlinear-example"]], "User Guide": [[225, "user-guide"]], "Optional data packages": [[226, "optional-data-packages"]], "Data package installation as an administrator": [[226, "data-package-installation-as-an-administrator"]], "Non-administrator data package installation": [[226, "non-administrator-data-package-installation"]], "The simple ugly manual way": [[226, "the-simple-ugly-manual-way"]], "The more general way": [[226, "the-more-general-way"]], "On unix": [[226, "on-unix"]], "On windows": [[226, "on-windows"]], "Download and Install": [[227, "download-and-install"]], "Summary": [[227, "summary"]], "Details": [[227, "details"]], "Install Python, Pip, Numpy and Scipy": [[227, "install-python-pip-numpy-and-scipy"]], "Install Python 3 on Linux": [[227, "install-python-3-on-linux"]], "Install Python 3 on macOS": [[227, "install-python-3-on-macos"]], "Install Pip on Linux or macOS": [[227, "install-pip-on-linux-or-macos"]], "Install Python 3, Pip, NumPy and Scipy on Windows": [[227, "install-python-3-pip-numpy-and-scipy-on-windows"]], "Option 1: Anaconda": [[227, "option-1-anaconda"]], "Option 2: Standard install": [[227, "option-2-standard-install"]], "Install Nipy": [[227, "install-nipy"]], "Other packages we recommend": [[227, "other-packages-we-recommend"]], "Building from latest source code": [[227, "building-from-latest-source-code"]], "Dependencies for build": [[227, "dependencies-for-build"]], "Procedure": [[227, "procedure"]], "Installing useful data files": [[227, "installing-useful-data-files"]], "Mathematical formulation of the Coordinate Map": [[229, "mathematical-formulation-of-the-coordinate-map"]], "Manipulating mappings, coordinate systems and coordinate maps": [[229, "manipulating-mappings-coordinate-systems-and-coordinate-maps"]], "Coordinate systems": [[229, "coordinate-systems"]], "Mappings": [[229, "mappings"]], "Affine mappings": [[229, "affine-mappings"]], "3-dimensional affine mappings": [[229, "dimensional-affine-mappings"]], "Coordinate maps": [[229, "coordinate-maps"]], "Implementation": [[229, "implementation"]], "Geography of the Scipy world": [[230, "geography-of-the-scipy-world"]], "Numpy": [[230, "numpy"]], "SciPy": [[230, "scipy"]], "Matplotlib": [[230, "matplotlib"]], "Ipython": [[230, "ipython"]], "Cython": [[230, "cython"]], "Mayavi": [[230, "mayavi"]], "algorithms.clustering.bgmm": [[1, "algorithms-clustering-bgmm"]], "Module: algorithms.clustering.bgmm": [[1, "module-algorithms-clustering-bgmm"]], "Classes": [[1, "classes"], [2, "classes"], [3, "classes"], [5, "classes"], [12, "classes"], [16, "classes"], [21, "classes"], [23, "classes"], [29, "classes"], [39, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [47, "classes"], [50, "classes"], [61, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [68, "classes"], [78, "classes"], [83, "classes"], [84, "classes"], [88, "classes"], [104, "classes"], [112, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [126, "classes"]], "BGMM": [[1, "bgmm"]], "VBGMM": [[1, "vbgmm"]], "Functions": [[1, "functions"], [3, "functions"], [4, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [8, "functions"], [9, "functions"], [10, "functions"], [11, "functions"], [13, "functions"], [14, "functions"], [16, "functions"], [19, "functions"], [21, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [31, "functions"], [32, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [38, "functions"], [39, "functions"], [40, "functions"], [47, "functions"], [48, "functions"], [49, "functions"], [50, "functions"], [51, "functions"], [53, "functions"], [54, "functions"], [56, "functions"], [60, "functions"], [61, "functions"], [63, "functions"], [65, "functions"], [66, "functions"], [67, "functions"], [68, "functions"], [69, "functions"], [70, "functions"], [71, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [77, "functions"], [83, "functions"], [84, "functions"], [85, "functions"], [88, "functions"], [89, "functions"], [90, "functions"], [91, "functions"], [92, "functions"], [95, "functions"], [96, "functions"], [97, "functions"], [99, "functions"], [101, "functions"], [102, "functions"], [103, "functions"], [105, "functions"], [106, "functions"], [107, "functions"], [108, "functions"], [110, "functions"], [111, "functions"], [114, "functions"], [116, "functions"], [117, "functions"], [119, "functions"], [120, "functions"], [121, "functions"], [122, "functions"], [123, "functions"], [124, "functions"], [126, "functions"], [127, "functions"], [128, "functions"], [131, "functions"], [132, "functions"]], "algorithms.clustering.ggmixture": [[2, "algorithms-clustering-ggmixture"]], "Module: algorithms.clustering.ggmixture": [[2, "module-algorithms-clustering-ggmixture"]], "GGGM": [[2, "gggm"]], "GGM": [[2, "ggm"]], "Gamma": [[2, "gamma"], [41, "gamma"]], "algorithms.clustering.gmm": [[3, "algorithms-clustering-gmm"]], "Module: algorithms.clustering.gmm": [[3, "module-algorithms-clustering-gmm"]], "GMM": [[3, "gmm"]], "GridDescriptor": [[3, "griddescriptor"]], "algorithms.clustering.hierarchical_clustering": [[4, "algorithms-clustering-hierarchical-clustering"]], "Module: algorithms.clustering.hierarchical_clustering": [[4, "module-algorithms-clustering-hierarchical-clustering"]], "Class": [[4, "class"], [7, "class"], [13, "class"], [14, "class"], [19, "class"], [24, "class"], [34, "class"], [38, "class"], [40, "class"], [48, "class"], [71, "class"], [74, "class"], [90, "class"], [91, "class"], [95, "class"], [111, "class"], [123, "class"]], "WeightedForest": [[4, "weightedforest"]], "algorithms.clustering.imm": [[5, "algorithms-clustering-imm"]], "Module: algorithms.clustering.imm": [[5, "module-algorithms-clustering-imm"]], "IMM": [[5, "imm"]], "MixedIMM": [[5, "mixedimm"]], "algorithms.clustering.utils": [[6, "algorithms-clustering-utils"]], "Module: algorithms.clustering.utils": [[6, "module-nipy.algorithms.clustering.utils"]], "algorithms.clustering.von_mises_fisher_mixture": [[7, "algorithms-clustering-von-mises-fisher-mixture"]], "Module: algorithms.clustering.von_mises_fisher_mixture": [[7, "module-algorithms-clustering-von-mises-fisher-mixture"]], "VonMisesMixture": [[7, "vonmisesmixture"]], "algorithms.diagnostics.commands": [[8, "algorithms-diagnostics-commands"]], "Module: algorithms.diagnostics.commands": [[8, "module-nipy.algorithms.diagnostics.commands"]], "algorithms.diagnostics.screens": [[9, "algorithms-diagnostics-screens"]], "Module: algorithms.diagnostics.screens": [[9, "module-nipy.algorithms.diagnostics.screens"]], "algorithms.diagnostics.timediff": [[10, "algorithms-diagnostics-timediff"]], "Module: algorithms.diagnostics.timediff": [[10, "module-nipy.algorithms.diagnostics.timediff"]], "algorithms.diagnostics.tsdiffplot": [[11, "algorithms-diagnostics-tsdiffplot"]], "Module: algorithms.diagnostics.tsdiffplot": [[11, "module-nipy.algorithms.diagnostics.tsdiffplot"]], "algorithms.fwhm": [[12, "algorithms-fwhm"]], "Module: algorithms.fwhm": [[12, "module-algorithms-fwhm"]], "ReselImage": [[12, "reselimage"]], "Resels": [[12, "resels"]], "algorithms.graph.bipartite_graph": [[13, "algorithms-graph-bipartite-graph"]], "Module: algorithms.graph.bipartite_graph": [[13, "module-algorithms-graph-bipartite-graph"]], "BipartiteGraph": [[13, "bipartitegraph"]], "algorithms.graph.field": [[14, "algorithms-graph-field"]], "Module: algorithms.graph.field": [[14, "module-algorithms-graph-field"]], "Field": [[14, "field"]], "algorithms.graph.forest": [[15, "algorithms-graph-forest"]], "Module: algorithms.graph.forest": [[15, "module-algorithms-graph-forest"]], "Forest": [[15, "forest"]], "algorithms.graph.graph": [[16, "algorithms-graph-graph"]], "Module: algorithms.graph.graph": [[16, "module-algorithms-graph-graph"]], "Graph": [[16, "graph"]], "WeightedGraph": [[16, "weightedgraph"]], "algorithms.group.parcel_analysis": [[17, "algorithms-group-parcel-analysis"]], "Module: algorithms.group.parcel_analysis": [[17, "module-algorithms-group-parcel-analysis"]], "ParcelAnalysis": [[17, "parcelanalysis"]], "algorithms.interpolation": [[18, "algorithms-interpolation"]], "Module: algorithms.interpolation": [[18, "module-algorithms-interpolation"]], "ImageInterpolator": [[18, "imageinterpolator"]], "algorithms.kernel_smooth": [[19, "algorithms-kernel-smooth"]], "Module: algorithms.kernel_smooth": [[19, "module-algorithms-kernel-smooth"]], "LinearFilter": [[19, "linearfilter"]], "algorithms.optimize": [[20, "algorithms-optimize"]], "Module: algorithms.optimize": [[20, "module-nipy.algorithms.optimize"]], "algorithms.registration.affine": [[21, "algorithms-registration-affine"]], "Module: algorithms.registration.affine": [[21, "module-algorithms-registration-affine"]], "Affine": [[21, "affine"]], "Affine2D": [[21, "affine2d"]], "Rigid": [[21, "rigid"]], "Rigid2D": [[21, "rigid2d"]], "Similarity": [[21, "similarity"]], "Similarity2D": [[21, "similarity2d"]], "algorithms.registration.chain_transform": [[22, "algorithms-registration-chain-transform"]], "Module: algorithms.registration.chain_transform": [[22, "module-algorithms-registration-chain-transform"]], "ChainTransform": [[22, "chaintransform"]], "algorithms.registration.groupwise_registration": [[23, "algorithms-registration-groupwise-registration"]], "Module: algorithms.registration.groupwise_registration": [[23, "module-algorithms-registration-groupwise-registration"]], "FmriRealign4d": [[23, "fmrirealign4d"]], "Image4d": [[23, "image4d"]], "Realign4d": [[23, "realign4d"]], "Realign4dAlgorithm": [[23, "realign4dalgorithm"]], "SpaceRealign": [[23, "spacerealign"]], "SpaceTimeRealign": [[23, "spacetimerealign"]], "algorithms.registration.histogram_registration": [[24, "algorithms-registration-histogram-registration"]], "Module: algorithms.registration.histogram_registration": [[24, "module-algorithms-registration-histogram-registration"]], "HistogramRegistration": [[24, "histogramregistration"]], "algorithms.registration.optimizer": [[25, "algorithms-registration-optimizer"]], "Module: algorithms.registration.optimizer": [[25, "module-nipy.algorithms.registration.optimizer"]], "algorithms.registration.polyaffine": [[26, "algorithms-registration-polyaffine"]], "Module: algorithms.registration.polyaffine": [[26, "module-algorithms-registration-polyaffine"]], "PolyAffine": [[26, "polyaffine"]], "algorithms.registration.resample": [[27, "algorithms-registration-resample"]], "Module: algorithms.registration.resample": [[27, "module-nipy.algorithms.registration.resample"]], "algorithms.registration.scripting": [[28, "algorithms-registration-scripting"]], "Module: algorithms.registration.scripting": [[28, "module-nipy.algorithms.registration.scripting"]], "algorithms.registration.similarity_measures": [[29, "algorithms-registration-similarity-measures"]], "Module: algorithms.registration.similarity_measures": [[29, "module-algorithms-registration-similarity-measures"]], "CorrelationCoefficient": [[29, "correlationcoefficient"]], "CorrelationRatio": [[29, "correlationratio"]], "CorrelationRatioL1": [[29, "correlationratiol1"]], "DiscreteParzenMutualInformation": [[29, "discreteparzenmutualinformation"]], "MutualInformation": [[29, "mutualinformation"]], "NormalizedMutualInformation": [[29, "normalizedmutualinformation"]], "ParzenMutualInformation": [[29, "parzenmutualinformation"]], "SimilarityMeasure": [[29, "similaritymeasure"]], "SupervisedLikelihoodRatio": [[29, "supervisedlikelihoodratio"]], "algorithms.registration.transform": [[30, "algorithms-registration-transform"]], "Module: algorithms.registration.transform": [[30, "module-algorithms-registration-transform"]], "Transform": [[30, "transform"], [78, "transform"]], "algorithms.registration.type_check": [[31, "algorithms-registration-type-check"]], "Module: algorithms.registration.type_check": [[31, "module-nipy.algorithms.registration.type_check"]], "algorithms.resample": [[32, "algorithms-resample"]], "Module: algorithms.resample": [[32, "module-nipy.algorithms.resample"]], "algorithms.segmentation.brain_segmentation": [[33, "algorithms-segmentation-brain-segmentation"]], "Module: algorithms.segmentation.brain_segmentation": [[33, "module-algorithms-segmentation-brain-segmentation"]], "BrainT1Segmentation": [[33, "braint1segmentation"]], "algorithms.segmentation.segmentation": [[34, "algorithms-segmentation-segmentation"]], "Module: algorithms.segmentation.segmentation": [[34, "module-algorithms-segmentation-segmentation"]], "Segmentation": [[34, "segmentation"]], "algorithms.slicetiming.timefuncs": [[35, "algorithms-slicetiming-timefuncs"]], "Module: algorithms.slicetiming.timefuncs": [[35, "module-nipy.algorithms.slicetiming.timefuncs"]], "algorithms.statistics.bayesian_mixed_effects": [[36, "algorithms-statistics-bayesian-mixed-effects"]], "Module: algorithms.statistics.bayesian_mixed_effects": [[36, "module-nipy.algorithms.statistics.bayesian_mixed_effects"]], "algorithms.statistics.bench.bench_intvol": [[37, "algorithms-statistics-bench-bench-intvol"]], "Module: algorithms.statistics.bench.bench_intvol": [[37, "module-nipy.algorithms.statistics.bench.bench_intvol"]], "algorithms.statistics.empirical_pvalue": [[38, "algorithms-statistics-empirical-pvalue"]], "Module: algorithms.statistics.empirical_pvalue": [[38, "module-algorithms-statistics-empirical-pvalue"]], "NormalEmpiricalNull": [[38, "normalempiricalnull"]], "algorithms.statistics.formula.formulae": [[39, "algorithms-statistics-formula-formulae"]], "Module: algorithms.statistics.formula.formulae": [[39, "module-algorithms-statistics-formula-formulae"]], "Beta": [[39, "beta"]], "Factor": [[39, "factor"]], "FactorTerm": [[39, "factorterm"]], "Formula": [[39, "formula"]], "RandomEffects": [[39, "randomeffects"]], "Term": [[39, "term"]], "algorithms.statistics.mixed_effects_stat": [[40, "algorithms-statistics-mixed-effects-stat"]], "Module: algorithms.statistics.mixed_effects_stat": [[40, "module-algorithms-statistics-mixed-effects-stat"]], "MixedEffectsModel": [[40, "mixedeffectsmodel"]], "algorithms.statistics.models.family.family": [[41, "algorithms-statistics-models-family-family"]], "Module: algorithms.statistics.models.family.family": [[41, "module-algorithms-statistics-models-family-family"]], "Binomial": [[41, "binomial"], [43, "binomial"]], "Family": [[41, "family"]], "Gaussian": [[41, "gaussian"]], "InverseGaussian": [[41, "inversegaussian"]], "Poisson": [[41, "poisson"]], "algorithms.statistics.models.family.links": [[42, "algorithms-statistics-models-family-links"]], "Module: algorithms.statistics.models.family.links": [[42, "module-algorithms-statistics-models-family-links"]], "CDFLink": [[42, "cdflink"]], "CLogLog": [[42, "cloglog"]], "Link": [[42, "link"]], "Log": [[42, "log"]], "Logit": [[42, "logit"]], "Power": [[42, "power"], [43, "power"]], "algorithms.statistics.models.family.varfuncs": [[43, "algorithms-statistics-models-family-varfuncs"]], "Module: algorithms.statistics.models.family.varfuncs": [[43, "module-algorithms-statistics-models-family-varfuncs"]], "VarianceFunction": [[43, "variancefunction"]], "algorithms.statistics.models.glm": [[44, "algorithms-statistics-models-glm"]], "Module: algorithms.statistics.models.glm": [[44, "module-algorithms-statistics-models-glm"]], "General linear models": [[44, "general-linear-models"]], "Model": [[44, "model"], [45, "model"]], "algorithms.statistics.models.model": [[45, "algorithms-statistics-models-model"]], "Module: algorithms.statistics.models.model": [[45, "module-algorithms-statistics-models-model"]], "FContrastResults": [[45, "fcontrastresults"]], "LikelihoodModel": [[45, "likelihoodmodel"]], "LikelihoodModelResults": [[45, "likelihoodmodelresults"]], "TContrastResults": [[45, "tcontrastresults"]], "algorithms.statistics.models.nlsmodel": [[46, "algorithms-statistics-models-nlsmodel"]], "Module: algorithms.statistics.models.nlsmodel": [[46, "module-algorithms-statistics-models-nlsmodel"]], "NLSModel": [[46, "nlsmodel"]], "algorithms.statistics.models.regression": [[47, "algorithms-statistics-models-regression"]], "Module: algorithms.statistics.models.regression": [[47, "module-algorithms-statistics-models-regression"]], "AREstimator": [[47, "arestimator"]], "ARModel": [[47, "armodel"]], "GLSModel": [[47, "glsmodel"]], "OLSModel": [[47, "olsmodel"]], "RegressionResults": [[47, "regressionresults"]], "WLSModel": [[47, "wlsmodel"]], "algorithms.statistics.models.utils": [[48, "algorithms-statistics-models-utils"]], "Module: algorithms.statistics.models.utils": [[48, "module-algorithms-statistics-models-utils"]], "StepFunction": [[48, "stepfunction"]], "algorithms.statistics.onesample": [[49, "algorithms-statistics-onesample"]], "Module: algorithms.statistics.onesample": [[49, "module-nipy.algorithms.statistics.onesample"]], "algorithms.statistics.rft": [[50, "algorithms-statistics-rft"]], "Module: algorithms.statistics.rft": [[50, "module-algorithms-statistics-rft"]], "ChiBarSquared": [[50, "chibarsquared"]], "ChiSquared": [[50, "chisquared"]], "ECcone": [[50, "eccone"]], "ECquasi": [[50, "ecquasi"]], "FStat": [[50, "fstat"]], "Hotelling": [[50, "hotelling"]], "IntrinsicVolumes": [[50, "intrinsicvolumes"]], "MultilinearForm": [[50, "multilinearform"]], "OneSidedF": [[50, "onesidedf"]], "Roy": [[50, "roy"]], "TStat": [[50, "tstat"]], "fnsum": [[50, "fnsum"]], "algorithms.statistics.utils": [[51, "algorithms-statistics-utils"]], "Module: algorithms.statistics.utils": [[51, "module-nipy.algorithms.statistics.utils"]], "algorithms.utils.fast_distance": [[52, "algorithms-utils-fast-distance"]], "Module: algorithms.utils.fast_distance": [[52, "module-nipy.algorithms.utils.fast_distance"]], "algorithms.utils.matrices": [[53, "algorithms-utils-matrices"]], "Module: algorithms.utils.matrices": [[53, "module-nipy.algorithms.utils.matrices"]], "algorithms.utils.pca": [[54, "algorithms-utils-pca"]], "Module: algorithms.utils.pca": [[54, "module-nipy.algorithms.utils.pca"]], "cli.diagnose": [[55, "cli-diagnose"]], "Module: cli.diagnose": [[55, "module-nipy.cli.diagnose"]], "cli.img3dto4d": [[56, "cli-img3dto4d"]], "Module: cli.img3dto4d": [[56, "module-nipy.cli.img3dto4d"]], "cli.img4dto3d": [[57, "cli-img4dto3d"]], "Module: cli.img4dto3d": [[57, "module-nipy.cli.img4dto3d"]], "cli.realign4d": [[58, "cli-realign4d"]], "Module: cli.realign4d": [[58, "module-nipy.cli.realign4d"]], "cli.tsdiffana": [[59, "cli-tsdiffana"]], "Module: cli.tsdiffana": [[59, "module-nipy.cli.tsdiffana"]], "conftest": [[60, "conftest"]], "Module: conftest": [[60, "module-nipy.conftest"]], "core.image.image": [[61, "core-image-image"]], "Module: core.image.image": [[61, "module-core-image-image"]], "Image": [[61, "image"]], "SliceMaker": [[61, "slicemaker"]], "core.image.image_list": [[62, "core-image-image-list"]], "Module: core.image.image_list": [[62, "module-core-image-image-list"]], "ImageList": [[62, "imagelist"]], "core.image.image_spaces": [[63, "core-image-image-spaces"]], "Module: core.image.image_spaces": [[63, "module-nipy.core.image.image_spaces"]], "core.reference.array_coords": [[64, "core-reference-array-coords"]], "Module: core.reference.array_coords": [[64, "module-core-reference-array-coords"]], "ArrayCoordMap": [[64, "arraycoordmap"]], "Grid": [[64, "grid"]], "core.reference.coordinate_map": [[65, "core-reference-coordinate-map"]], "Module: core.reference.coordinate_map": [[65, "module-core-reference-coordinate-map"]], "Common API": [[65, "common-api"]], "Operations on mappings (module level functions)": [[65, "operations-on-mappings-module-level-functions"]], "AffineTransform": [[65, "affinetransform"], [76, "affinetransform"]], "AxisError": [[65, "axiserror"]], "CoordMapMaker": [[65, "coordmapmaker"]], "CoordMapMakerError": [[65, "coordmapmakererror"]], "core.reference.coordinate_system": [[66, "core-reference-coordinate-system"]], "Module: core.reference.coordinate_system": [[66, "module-core-reference-coordinate-system"]], "CoordSysMaker": [[66, "coordsysmaker"]], "CoordSysMakerError": [[66, "coordsysmakererror"]], "CoordinateSystem": [[66, "coordinatesystem"]], "CoordinateSystemError": [[66, "coordinatesystemerror"]], "core.reference.slices": [[67, "core-reference-slices"]], "Module: core.reference.slices": [[67, "module-nipy.core.reference.slices"]], "core.reference.spaces": [[68, "core-reference-spaces"]], "Module: core.reference.spaces": [[68, "module-core-reference-spaces"]], "AffineError": [[68, "affineerror"]], "AxesError": [[68, "axeserror"]], "SpaceError": [[68, "spaceerror"]], "SpaceTypeError": [[68, "spacetypeerror"]], "XYZSpace": [[68, "xyzspace"]], "core.utils.generators": [[69, "core-utils-generators"]], "Module: core.utils.generators": [[69, "module-nipy.core.utils.generators"]], "interfaces.matlab": [[70, "interfaces-matlab"]], "Module: interfaces.matlab": [[70, "module-nipy.interfaces.matlab"]], "interfaces.spm": [[71, "interfaces-spm"]], "Module: interfaces.spm": [[71, "module-interfaces-spm"]], "SpmInfo": [[71, "spminfo"]], "io.files": [[72, "io-files"]], "Module: io.files": [[72, "module-nipy.io.files"]], "Examples": [[72, "examples"], [118, "examples"], [131, "examples"]], "io.nibcompat": [[73, "io-nibcompat"]], "Module: io.nibcompat": [[73, "module-nipy.io.nibcompat"]], "io.nifti_ref": [[74, "io-nifti-ref"]], "Module: io.nifti_ref": [[74, "module-io-nifti-ref"]], "NIFTI input coordinate system": [[74, "nifti-input-coordinate-system"]], "NIFTI output coordinate system": [[74, "nifti-output-coordinate-system"]], "NIFTI input / output mapping": [[74, "nifti-input-output-mapping"]], "Time-like axes": [[74, "time-like-axes"]], "Does this NIFTI image have a time-like axis?": [[74, "does-this-nifti-image-have-a-time-like-axis"]], "What we do about all this": [[74, "what-we-do-about-all-this"]], "NiftiError": [[74, "niftierror"]], "labs.datasets.converters": [[75, "labs-datasets-converters"]], "Module: labs.datasets.converters": [[75, "module-nipy.labs.datasets.converters"]], "labs.datasets.transforms.affine_transform": [[76, "labs-datasets-transforms-affine-transform"]], "Module: labs.datasets.transforms.affine_transform": [[76, "module-labs-datasets-transforms-affine-transform"]], "labs.datasets.transforms.affine_utils": [[77, "labs-datasets-transforms-affine-utils"]], "Module: labs.datasets.transforms.affine_utils": [[77, "module-nipy.labs.datasets.transforms.affine_utils"]], "labs.datasets.transforms.transform": [[78, "labs-datasets-transforms-transform"]], "Module: labs.datasets.transforms.transform": [[78, "module-labs-datasets-transforms-transform"]], "CompositionError": [[78, "compositionerror"]], "labs.datasets.volumes.volume_data": [[79, "labs-datasets-volumes-volume-data"]], "Module: labs.datasets.volumes.volume_data": [[79, "module-labs-datasets-volumes-volume-data"]], "VolumeData": [[79, "volumedata"]], "labs.datasets.volumes.volume_field": [[80, "labs-datasets-volumes-volume-field"]], "Module: labs.datasets.volumes.volume_field": [[80, "module-labs-datasets-volumes-volume-field"]], "VolumeField": [[80, "volumefield"]], "labs.datasets.volumes.volume_grid": [[81, "labs-datasets-volumes-volume-grid"]], "Module: labs.datasets.volumes.volume_grid": [[81, "module-labs-datasets-volumes-volume-grid"]], "VolumeGrid": [[81, "volumegrid"]], "labs.datasets.volumes.volume_img": [[82, "labs-datasets-volumes-volume-img"]], "Module: labs.datasets.volumes.volume_img": [[82, "module-labs-datasets-volumes-volume-img"]], "VolumeImg": [[82, "volumeimg"]], "labs.glm.glm": [[83, "labs-glm-glm"]], "Module: labs.glm.glm": [[83, "module-labs-glm-glm"]], "contrast": [[83, "contrast"]], "glm": [[83, "glm"]], "labs.group.permutation_test": [[84, "labs-group-permutation-test"]], "Module: labs.group.permutation_test": [[84, "module-labs-group-permutation-test"]], "permutation_test": [[84, "permutation-test"]], "permutation_test_onesample": [[84, "permutation-test-onesample"]], "permutation_test_onesample_graph": [[84, "permutation-test-onesample-graph"]], "permutation_test_twosample": [[84, "permutation-test-twosample"]], "labs.mask": [[85, "labs-mask"]], "Module: labs.mask": [[85, "module-nipy.labs.mask"]], "labs.spatial_models.bayesian_structural_analysis": [[86, "labs-spatial-models-bayesian-structural-analysis"]], "Module: labs.spatial_models.bayesian_structural_analysis": [[86, "module-nipy.labs.spatial_models.bayesian_structural_analysis"]], "labs.spatial_models.bsa_io": [[87, "labs-spatial-models-bsa-io"]], "Module: labs.spatial_models.bsa_io": [[87, "module-nipy.labs.spatial_models.bsa_io"]], "labs.spatial_models.discrete_domain": [[88, "labs-spatial-models-discrete-domain"]], "Module: labs.spatial_models.discrete_domain": [[88, "module-labs-spatial-models-discrete-domain"]], "DiscreteDomain": [[88, "discretedomain"]], "MeshDomain": [[88, "meshdomain"]], "NDGridDomain": [[88, "ndgriddomain"]], "StructuredDomain": [[88, "structureddomain"]], "labs.spatial_models.hierarchical_parcellation": [[89, "labs-spatial-models-hierarchical-parcellation"]], "Module: labs.spatial_models.hierarchical_parcellation": [[89, "module-nipy.labs.spatial_models.hierarchical_parcellation"]], "labs.spatial_models.hroi": [[90, "labs-spatial-models-hroi"]], "Module: labs.spatial_models.hroi": [[90, "module-labs-spatial-models-hroi"]], "HierarchicalROI": [[90, "hierarchicalroi"]], "labs.spatial_models.mroi": [[91, "labs-spatial-models-mroi"]], "Module: labs.spatial_models.mroi": [[91, "module-labs-spatial-models-mroi"]], "SubDomains": [[91, "subdomains"]], "labs.spatial_models.parcel_io": [[92, "labs-spatial-models-parcel-io"]], "Module: labs.spatial_models.parcel_io": [[92, "module-nipy.labs.spatial_models.parcel_io"]], "labs.spatial_models.parcellation": [[93, "labs-spatial-models-parcellation"]], "Module: labs.spatial_models.parcellation": [[93, "module-labs-spatial-models-parcellation"]], "MultiSubjectParcellation": [[93, "multisubjectparcellation"]], "labs.spatial_models.structural_bfls": [[94, "labs-spatial-models-structural-bfls"]], "Module: labs.spatial_models.structural_bfls": [[94, "module-labs-spatial-models-structural-bfls"]], "LandmarkRegions": [[94, "landmarkregions"]], "labs.statistical_mapping": [[95, "labs-statistical-mapping"]], "Module: labs.statistical_mapping": [[95, "module-labs-statistical-mapping"]], "LinearModel": [[95, "linearmodel"]], "labs.utils.reproducibility_measures": [[96, "labs-utils-reproducibility-measures"]], "Module: labs.utils.reproducibility_measures": [[96, "module-nipy.labs.utils.reproducibility_measures"]], "labs.utils.simul_multisubject_fmri_dataset": [[97, "labs-utils-simul-multisubject-fmri-dataset"]], "Module: labs.utils.simul_multisubject_fmri_dataset": [[97, "module-nipy.labs.utils.simul_multisubject_fmri_dataset"]], "labs.utils.zscore": [[98, "labs-utils-zscore"]], "Module: labs.utils.zscore": [[98, "module-nipy.labs.utils.zscore"]], "labs.viz_tools.activation_maps": [[99, "labs-viz-tools-activation-maps"]], "Module: labs.viz_tools.activation_maps": [[99, "module-nipy.labs.viz_tools.activation_maps"]], "labs.viz_tools.anat_cache": [[100, "labs-viz-tools-anat-cache"]], "Module: labs.viz_tools.anat_cache": [[100, "module-nipy.labs.viz_tools.anat_cache"]], "labs.viz_tools.cm": [[101, "labs-viz-tools-cm"]], "Module: labs.viz_tools.cm": [[101, "module-nipy.labs.viz_tools.cm"]], "labs.viz_tools.coord_tools": [[102, "labs-viz-tools-coord-tools"]], "Module: labs.viz_tools.coord_tools": [[102, "module-nipy.labs.viz_tools.coord_tools"]], "labs.viz_tools.maps_3d": [[103, "labs-viz-tools-maps-3d"]], "Module: labs.viz_tools.maps_3d": [[103, "module-nipy.labs.viz_tools.maps_3d"]], "labs.viz_tools.slicers": [[104, "labs-viz-tools-slicers"]], "Module: labs.viz_tools.slicers": [[104, "module-labs-viz-tools-slicers"]], "BaseSlicer": [[104, "baseslicer"]], "BaseStackedSlicer": [[104, "basestackedslicer"]], "CutAxes": [[104, "cutaxes"]], "OrthoSlicer": [[104, "orthoslicer"]], "XSlicer": [[104, "xslicer"]], "YSlicer": [[104, "yslicer"]], "ZSlicer": [[104, "zslicer"]], "Function": [[104, "function"], [112, "function"], [118, "function"]], "labs.viz_tools.test.test_activation_maps": [[105, "labs-viz-tools-test-test-activation-maps"]], "Module: labs.viz_tools.test.test_activation_maps": [[105, "module-nipy.labs.viz_tools.test.test_activation_maps"]], "labs.viz_tools.test.test_cm": [[106, "labs-viz-tools-test-test-cm"]], "Module: labs.viz_tools.test.test_cm": [[106, "module-nipy.labs.viz_tools.test.test_cm"]], "labs.viz_tools.test.test_coord_tools": [[107, "labs-viz-tools-test-test-coord-tools"]], "Module: labs.viz_tools.test.test_coord_tools": [[107, "module-nipy.labs.viz_tools.test.test_coord_tools"]], "labs.viz_tools.test.test_edge_detect": [[108, "labs-viz-tools-test-test-edge-detect"]], "Module: labs.viz_tools.test.test_edge_detect": [[108, "module-nipy.labs.viz_tools.test.test_edge_detect"]], "labs.viz_tools.test.test_slicers": [[109, "labs-viz-tools-test-test-slicers"]], "Module: labs.viz_tools.test.test_slicers": [[109, "module-nipy.labs.viz_tools.test.test_slicers"]], "modalities.fmri.design": [[110, "modalities-fmri-design"]], "Module: modalities.fmri.design": [[110, "module-nipy.modalities.fmri.design"]], "modalities.fmri.design_matrix": [[111, "modalities-fmri-design-matrix"]], "Module: modalities.fmri.design_matrix": [[111, "module-modalities-fmri-design-matrix"]], "DesignMatrix": [[111, "designmatrix"]], "modalities.fmri.experimental_paradigm": [[112, "modalities-fmri-experimental-paradigm"]], "Module: modalities.fmri.experimental_paradigm": [[112, "module-modalities-fmri-experimental-paradigm"]], "Notes": [[112, "notes"]], "BlockParadigm": [[112, "blockparadigm"]], "EventRelatedParadigm": [[112, "eventrelatedparadigm"]], "Paradigm": [[112, "paradigm"]], "modalities.fmri.fmri": [[113, "modalities-fmri-fmri"]], "Module: modalities.fmri.fmri": [[113, "module-modalities-fmri-fmri"]], "FmriImageList": [[113, "fmriimagelist"]], "modalities.fmri.fmristat.hrf": [[114, "modalities-fmri-fmristat-hrf"]], "Module: modalities.fmri.fmristat.hrf": [[114, "module-nipy.modalities.fmri.fmristat.hrf"]], "References": [[114, "references"]], "modalities.fmri.fmristat.invert": [[115, "modalities-fmri-fmristat-invert"]], "Module: modalities.fmri.fmristat.invert": [[115, "module-nipy.modalities.fmri.fmristat.invert"]], "modalities.fmri.fmristat.model": [[116, "modalities-fmri-fmristat-model"]], "Module: modalities.fmri.fmristat.model": [[116, "module-modalities-fmri-fmristat-model"]], "AR1": [[116, "ar1"]], "ModelOutputImage": [[116, "modeloutputimage"]], "OLS": [[116, "ols"]], "modalities.fmri.fmristat.outputters": [[117, "modalities-fmri-fmristat-outputters"]], "Module: modalities.fmri.fmristat.outputters": [[117, "module-modalities-fmri-fmristat-outputters"]], "RegressionOutput": [[117, "regressionoutput"]], "RegressionOutputList": [[117, "regressionoutputlist"]], "TOutput": [[117, "toutput"]], "modalities.fmri.glm": [[118, "modalities-fmri-glm"]], "Module: modalities.fmri.glm": [[118, "module-modalities-fmri-glm"]], "Contrast": [[118, "contrast"]], "FMRILinearModel": [[118, "fmrilinearmodel"]], "GeneralLinearModel": [[118, "generallinearmodel"]], "modalities.fmri.hemodynamic_models": [[119, "modalities-fmri-hemodynamic-models"]], "Module: modalities.fmri.hemodynamic_models": [[119, "module-nipy.modalities.fmri.hemodynamic_models"]], "modalities.fmri.hrf": [[120, "modalities-fmri-hrf"]], "Module: modalities.fmri.hrf": [[120, "module-nipy.modalities.fmri.hrf"]], "modalities.fmri.realfuncs": [[121, "modalities-fmri-realfuncs"]], "Module: modalities.fmri.realfuncs": [[121, "module-nipy.modalities.fmri.realfuncs"]], "modalities.fmri.spm.correlation": [[122, "modalities-fmri-spm-correlation"]], "Module: modalities.fmri.spm.correlation": [[122, "module-nipy.modalities.fmri.spm.correlation"]], "modalities.fmri.spm.model": [[123, "modalities-fmri-spm-model"]], "Module: modalities.fmri.spm.model": [[123, "module-modalities-fmri-spm-model"]], "SecondStage": [[123, "secondstage"]], "modalities.fmri.spm.reml": [[124, "modalities-fmri-spm-reml"]], "Module: modalities.fmri.spm.reml": [[124, "module-nipy.modalities.fmri.spm.reml"]], "modalities.fmri.spm.trace": [[125, "modalities-fmri-spm-trace"]], "Module: modalities.fmri.spm.trace": [[125, "module-nipy.modalities.fmri.spm.trace"]], "modalities.fmri.utils": [[126, "modalities-fmri-utils"]], "Module: modalities.fmri.utils": [[126, "module-modalities-fmri-utils"]], "Interp1dNumeric": [[126, "interp1dnumeric"]], "TimeConvolver": [[126, "timeconvolver"]], "pkg_info": [[127, "pkg-info"]], "Module: pkg_info": [[127, "module-nipy.pkg_info"]], "testing.decorators": [[128, "testing-decorators"]], "Module: testing.decorators": [[128, "module-nipy.testing.decorators"]], "utils": [[129, "utils"]], "Module: utils": [[129, "module-utils"]], "VisibleDeprecationWarning": [[129, "visibledeprecationwarning"]], "utils.arrays": [[130, "utils-arrays"]], "Module: utils.arrays": [[130, "module-nipy.utils.arrays"]], "utils.perlpie": [[131, "utils-perlpie"]], "Module: utils.perlpie": [[131, "module-nipy.utils.perlpie"]], "Parameters": [[131, "parameters"]], "Requires": [[131, "requires"]], "utils.utilities": [[132, "utils-utilities"]], "Module: utils.utilities": [[132, "module-nipy.utils.utilities"]], "API": [[133, "api"]]}, "indexentries": {"bgmm (class in nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.BGMM"]], "vbgmm (class in nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM"]], "__init__() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.__init__"]], "__init__() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.__init__"]], "average_log_like() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.average_log_like"]], "average_log_like() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.average_log_like"]], "bayes_factor() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.bayes_factor"]], "bayes_factor() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.bayes_factor"]], "bic() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.bic"]], "bic() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.bic"]], "check() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.check"]], "check() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.check"]], "check_x() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.check_x"]], "check_x() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.check_x"]], "conditional_posterior_proba() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.conditional_posterior_proba"]], "conditional_posterior_proba() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.conditional_posterior_proba"]], "detsh() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.detsh"]], "dirichlet_eval() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.dirichlet_eval"]], "dkl_dirichlet() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.dkl_dirichlet"]], "dkl_gaussian() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.dkl_gaussian"]], "dkl_wishart() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.dkl_wishart"]], "estimate() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.estimate"]], "estimate() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.estimate"]], "evidence() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.evidence"]], "evidence() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.evidence"]], "generate_wishart() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.generate_Wishart"]], "generate_normals() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.generate_normals"]], "generate_perm() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.generate_perm"]], "guess_priors() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.guess_priors"]], "guess_priors() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.guess_priors"]], "guess_regularizing() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.guess_regularizing"]], "guess_regularizing() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.guess_regularizing"]], "initialize() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.initialize"]], "initialize() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.initialize"]], "initialize_and_estimate() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.initialize_and_estimate"]], "initialize_and_estimate() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.initialize_and_estimate"]], "likelihood() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.likelihood"]], "likelihood() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.likelihood"]], "map_label() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.map_label"]], "map_label() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.map_label"]], "mixture_likelihood() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.mixture_likelihood"]], "mixture_likelihood() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.mixture_likelihood"]], "module": [[1, "module-nipy.algorithms.clustering.bgmm"], [2, "module-nipy.algorithms.clustering.ggmixture"], [3, "module-nipy.algorithms.clustering.gmm"], [4, "module-nipy.algorithms.clustering.hierarchical_clustering"], [5, "module-nipy.algorithms.clustering.imm"], [6, "module-nipy.algorithms.clustering.utils"], [7, "module-nipy.algorithms.clustering.von_mises_fisher_mixture"], [8, "module-nipy.algorithms.diagnostics.commands"], [9, "module-nipy.algorithms.diagnostics.screens"], [10, "module-nipy.algorithms.diagnostics.timediff"], [11, "module-nipy.algorithms.diagnostics.tsdiffplot"], [12, "module-nipy.algorithms.fwhm"], [13, "module-nipy.algorithms.graph.bipartite_graph"], [14, "module-nipy.algorithms.graph.field"], [15, "module-nipy.algorithms.graph.forest"], [16, "module-nipy.algorithms.graph.graph"], [17, "module-nipy.algorithms.group.parcel_analysis"], [18, "module-nipy.algorithms.interpolation"], [19, "module-nipy.algorithms.kernel_smooth"], [20, "module-nipy.algorithms.optimize"], [21, "module-nipy.algorithms.registration.affine"], [22, "module-nipy.algorithms.registration.chain_transform"], [23, "module-nipy.algorithms.registration.groupwise_registration"], [24, "module-nipy.algorithms.registration.histogram_registration"], [25, "module-nipy.algorithms.registration.optimizer"], [26, "module-nipy.algorithms.registration.polyaffine"], [27, "module-nipy.algorithms.registration.resample"], [28, "module-nipy.algorithms.registration.scripting"], [29, "module-nipy.algorithms.registration.similarity_measures"], [30, "module-nipy.algorithms.registration.transform"], [31, "module-nipy.algorithms.registration.type_check"], [32, "module-nipy.algorithms.resample"], [33, "module-nipy.algorithms.segmentation.brain_segmentation"], [34, "module-nipy.algorithms.segmentation.segmentation"], [35, "module-nipy.algorithms.slicetiming.timefuncs"], [36, "module-nipy.algorithms.statistics.bayesian_mixed_effects"], [37, "module-nipy.algorithms.statistics.bench.bench_intvol"], [38, "module-nipy.algorithms.statistics.empirical_pvalue"], [39, "module-nipy.algorithms.statistics.formula.formulae"], [40, "module-nipy.algorithms.statistics.mixed_effects_stat"], [41, "module-nipy.algorithms.statistics.models.family.family"], [42, "module-nipy.algorithms.statistics.models.family.links"], [43, "module-nipy.algorithms.statistics.models.family.varfuncs"], [44, "module-nipy.algorithms.statistics.models.glm"], [45, "module-nipy.algorithms.statistics.models.model"], [46, "module-nipy.algorithms.statistics.models.nlsmodel"], [47, "module-nipy.algorithms.statistics.models.regression"], [48, "module-nipy.algorithms.statistics.models.utils"], [49, "module-nipy.algorithms.statistics.onesample"], [50, "module-nipy.algorithms.statistics.rft"], [51, "module-nipy.algorithms.statistics.utils"], [52, "module-nipy.algorithms.utils.fast_distance"], [53, "module-nipy.algorithms.utils.matrices"], [54, "module-nipy.algorithms.utils.pca"], [55, "module-nipy.cli.diagnose"], [56, "module-nipy.cli.img3dto4d"], [57, "module-nipy.cli.img4dto3d"], [58, "module-nipy.cli.realign4d"], [59, "module-nipy.cli.tsdiffana"], [60, "module-nipy.conftest"], [61, "module-nipy.core.image.image"], [62, "module-nipy.core.image.image_list"], [63, "module-nipy.core.image.image_spaces"], [64, "module-nipy.core.reference.array_coords"], [65, "module-nipy.core.reference.coordinate_map"], [66, "module-nipy.core.reference.coordinate_system"], [67, "module-nipy.core.reference.slices"], [68, "module-nipy.core.reference.spaces"], [69, "module-nipy.core.utils.generators"], [70, "module-nipy.interfaces.matlab"], [71, "module-nipy.interfaces.spm"], [72, "module-nipy.io.files"], [73, "module-nipy.io.nibcompat"], [74, "module-nipy.io.nifti_ref"], [75, "module-nipy.labs.datasets.converters"], [76, "module-nipy.labs.datasets.transforms.affine_transform"], [77, "module-nipy.labs.datasets.transforms.affine_utils"], [78, "module-nipy.labs.datasets.transforms.transform"], [79, "module-nipy.labs.datasets.volumes.volume_data"], [80, "module-nipy.labs.datasets.volumes.volume_field"], [81, "module-nipy.labs.datasets.volumes.volume_grid"], [82, "module-nipy.labs.datasets.volumes.volume_img"], [83, "module-nipy.labs.glm.glm"], [84, "module-nipy.labs.group.permutation_test"], [85, "module-nipy.labs.mask"], [86, "module-nipy.labs.spatial_models.bayesian_structural_analysis"], [87, "module-nipy.labs.spatial_models.bsa_io"], [88, "module-nipy.labs.spatial_models.discrete_domain"], [89, "module-nipy.labs.spatial_models.hierarchical_parcellation"], [90, "module-nipy.labs.spatial_models.hroi"], [91, "module-nipy.labs.spatial_models.mroi"], [92, "module-nipy.labs.spatial_models.parcel_io"], [93, "module-nipy.labs.spatial_models.parcellation"], [94, "module-nipy.labs.spatial_models.structural_bfls"], [95, "module-nipy.labs.statistical_mapping"], [96, "module-nipy.labs.utils.reproducibility_measures"], [97, "module-nipy.labs.utils.simul_multisubject_fmri_dataset"], [98, "module-nipy.labs.utils.zscore"], [99, "module-nipy.labs.viz_tools.activation_maps"], [100, "module-nipy.labs.viz_tools.anat_cache"], [101, "module-nipy.labs.viz_tools.cm"], [102, "module-nipy.labs.viz_tools.coord_tools"], [103, "module-nipy.labs.viz_tools.maps_3d"], [104, "module-nipy.labs.viz_tools.slicers"], [105, "module-nipy.labs.viz_tools.test.test_activation_maps"], [106, "module-nipy.labs.viz_tools.test.test_cm"], [107, "module-nipy.labs.viz_tools.test.test_coord_tools"], [108, "module-nipy.labs.viz_tools.test.test_edge_detect"], [109, "module-nipy.labs.viz_tools.test.test_slicers"], [110, "module-nipy.modalities.fmri.design"], [111, "module-nipy.modalities.fmri.design_matrix"], [112, "module-nipy.modalities.fmri.experimental_paradigm"], [113, "module-nipy.modalities.fmri.fmri"], [114, "module-nipy.modalities.fmri.fmristat.hrf"], [115, "module-nipy.modalities.fmri.fmristat.invert"], [116, "module-nipy.modalities.fmri.fmristat.model"], [117, "module-nipy.modalities.fmri.fmristat.outputters"], [118, "module-nipy.modalities.fmri.glm"], [119, "module-nipy.modalities.fmri.hemodynamic_models"], [120, "module-nipy.modalities.fmri.hrf"], [121, "module-nipy.modalities.fmri.realfuncs"], [122, "module-nipy.modalities.fmri.spm.correlation"], [123, "module-nipy.modalities.fmri.spm.model"], [124, "module-nipy.modalities.fmri.spm.reml"], [125, "module-nipy.modalities.fmri.spm.trace"], [126, "module-nipy.modalities.fmri.utils"], [127, "module-nipy.pkg_info"], [128, "module-nipy.testing.decorators"], [129, "module-nipy.utils"], [130, "module-nipy.utils.arrays"], [131, "module-nipy.utils.perlpie"], [132, "module-nipy.utils.utilities"]], "multinomial() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.multinomial"]], "nipy.algorithms.clustering.bgmm": [[1, "module-nipy.algorithms.clustering.bgmm"]], "normal_eval() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.normal_eval"]], "plugin() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.plugin"]], "plugin() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.plugin"]], "pop() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.pop"]], "pop() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.pop"]], "probability_under_prior() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.probability_under_prior"]], "probability_under_prior() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.probability_under_prior"]], "sample() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.sample"]], "sample() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.sample"]], "sample_and_average() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.sample_and_average"]], "sample_and_average() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.sample_and_average"]], "sample_indicator() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.sample_indicator"]], "sample_indicator() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.sample_indicator"]], "set_priors() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.set_priors"]], "set_priors() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.set_priors"]], "show() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.show"]], "show() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.show"]], "show_components() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.show_components"]], "show_components() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.show_components"]], "test() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.test"]], "test() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.test"]], "train() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.train"]], "train() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.train"]], "unweighted_likelihood() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.unweighted_likelihood"]], "unweighted_likelihood() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.unweighted_likelihood"]], "unweighted_likelihood_() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.unweighted_likelihood_"]], "unweighted_likelihood_() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.unweighted_likelihood_"]], "update() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.update"]], "update() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.update"]], "update_means() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.update_means"]], "update_means() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.update_means"]], "update_precisions() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.update_precisions"]], "update_precisions() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.update_precisions"]], "update_weights() (nipy.algorithms.clustering.bgmm.bgmm method)": [[1, "nipy.algorithms.clustering.bgmm.BGMM.update_weights"]], "update_weights() (nipy.algorithms.clustering.bgmm.vbgmm method)": [[1, "nipy.algorithms.clustering.bgmm.VBGMM.update_weights"]], "wishart_eval() (in module nipy.algorithms.clustering.bgmm)": [[1, "nipy.algorithms.clustering.bgmm.wishart_eval"]], "estep() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.Estep"]], "estep() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.Estep"]], "gggm (class in nipy.algorithms.clustering.ggmixture)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM"]], "ggm (class in nipy.algorithms.clustering.ggmixture)": [[2, "nipy.algorithms.clustering.ggmixture.GGM"]], "gamma (class in nipy.algorithms.clustering.ggmixture)": [[2, "nipy.algorithms.clustering.ggmixture.Gamma"]], "mstep() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.Mstep"]], "mstep() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.Mstep"]], "__init__() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.__init__"]], "__init__() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.__init__"]], "__init__() (nipy.algorithms.clustering.ggmixture.gamma method)": [[2, "nipy.algorithms.clustering.ggmixture.Gamma.__init__"]], "check() (nipy.algorithms.clustering.ggmixture.gamma method)": [[2, "nipy.algorithms.clustering.ggmixture.Gamma.check"]], "component_likelihood() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.component_likelihood"]], "estimate() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.estimate"]], "estimate() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.estimate"]], "estimate() (nipy.algorithms.clustering.ggmixture.gamma method)": [[2, "nipy.algorithms.clustering.ggmixture.Gamma.estimate"]], "init() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.init"]], "init_fdr() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.init_fdr"]], "nipy.algorithms.clustering.ggmixture": [[2, "module-nipy.algorithms.clustering.ggmixture"]], "parameters() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.parameters"]], "parameters() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.parameters"]], "parameters() (nipy.algorithms.clustering.ggmixture.gamma method)": [[2, "nipy.algorithms.clustering.ggmixture.Gamma.parameters"]], "posterior() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.posterior"]], "posterior() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.posterior"]], "show() (nipy.algorithms.clustering.ggmixture.gggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGGM.show"]], "show() (nipy.algorithms.clustering.ggmixture.ggm method)": [[2, "nipy.algorithms.clustering.ggmixture.GGM.show"]], "gmm (class in nipy.algorithms.clustering.gmm)": [[3, "nipy.algorithms.clustering.gmm.GMM"]], "griddescriptor (class in nipy.algorithms.clustering.gmm)": [[3, "nipy.algorithms.clustering.gmm.GridDescriptor"]], "__init__() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.__init__"]], "__init__() (nipy.algorithms.clustering.gmm.griddescriptor method)": [[3, "nipy.algorithms.clustering.gmm.GridDescriptor.__init__"]], "average_log_like() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.average_log_like"]], "best_fitting_gmm() (in module nipy.algorithms.clustering.gmm)": [[3, "nipy.algorithms.clustering.gmm.best_fitting_GMM"]], "bic() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.bic"]], "check() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.check"]], "check_x() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.check_x"]], "estimate() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.estimate"]], "evidence() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.evidence"]], "guess_regularizing() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.guess_regularizing"]], "initialize() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.initialize"]], "initialize_and_estimate() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.initialize_and_estimate"]], "likelihood() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.likelihood"]], "make_grid() (nipy.algorithms.clustering.gmm.griddescriptor method)": [[3, "nipy.algorithms.clustering.gmm.GridDescriptor.make_grid"]], "map_label() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.map_label"]], "mixture_likelihood() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.mixture_likelihood"]], "nipy.algorithms.clustering.gmm": [[3, "module-nipy.algorithms.clustering.gmm"]], "plot2d() (in module nipy.algorithms.clustering.gmm)": [[3, "nipy.algorithms.clustering.gmm.plot2D"]], "plugin() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.plugin"]], "pop() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.pop"]], "set() (nipy.algorithms.clustering.gmm.griddescriptor method)": [[3, "nipy.algorithms.clustering.gmm.GridDescriptor.set"]], "show() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.show"]], "show_components() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.show_components"]], "test() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.test"]], "train() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.train"]], "unweighted_likelihood() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.unweighted_likelihood"]], "unweighted_likelihood_() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.unweighted_likelihood_"]], "update() (nipy.algorithms.clustering.gmm.gmm method)": [[3, "nipy.algorithms.clustering.gmm.GMM.update"]], "weightedforest (class in nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest"]], "__init__() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.__init__"]], "adjacency() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.adjacency"]], "all_distances() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.all_distances"]], "anti_symmeterize() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.anti_symmeterize"]], "average_link_graph() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.average_link_graph"]], "average_link_graph_segment() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.average_link_graph_segment"]], "cc() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.cc"]], "check() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.check"]], "check_compatible_height() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.check_compatible_height"]], "cliques() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.cliques"]], "compact_neighb() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.compact_neighb"]], "compute_children() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.compute_children"]], "copy() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.copy"]], "cut_redundancies() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.cut_redundancies"]], "define_graph_attributes() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.define_graph_attributes"]], "degrees() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.degrees"]], "depth_from_leaves() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.depth_from_leaves"]], "dijkstra() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.dijkstra"]], "floyd() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.floyd"]], "from_3d_grid() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.from_3d_grid"]], "fusion() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.fusion"]], "get_e() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_E"]], "get_v() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_V"]], "get_children() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_children"]], "get_descendants() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_descendants"]], "get_edges() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_edges"]], "get_height() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_height"]], "get_vertices() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_vertices"]], "get_weights() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.get_weights"]], "is_connected() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.is_connected"]], "isleaf() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.isleaf"]], "isroot() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.isroot"]], "kruskal() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.kruskal"]], "leaves_of_a_subtree() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.leaves_of_a_subtree"]], "left_incidence() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.left_incidence"]], "list_of_neighbors() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.list_of_neighbors"]], "list_of_subtrees() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.list_of_subtrees"]], "main_cc() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.main_cc"]], "merge_simple_branches() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.merge_simple_branches"]], "nipy.algorithms.clustering.hierarchical_clustering": [[4, "module-nipy.algorithms.clustering.hierarchical_clustering"]], "normalize() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.normalize"]], "partition() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.partition"]], "plot() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.plot"]], "plot_height() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.plot_height"]], "propagate_upward() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.propagate_upward"]], "propagate_upward_and() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.propagate_upward_and"]], "remove_edges() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.remove_edges"]], "remove_trivial_edges() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.remove_trivial_edges"]], "reorder_from_leaves_to_roots() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.reorder_from_leaves_to_roots"]], "right_incidence() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.right_incidence"]], "set_edges() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.set_edges"]], "set_euclidian() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.set_euclidian"]], "set_gaussian() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.set_gaussian"]], "set_height() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.set_height"]], "set_weights() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.set_weights"]], "show() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.show"]], "split() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.split"]], "subforest() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.subforest"]], "subgraph() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.subgraph"]], "symmeterize() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.symmeterize"]], "to_coo_matrix() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.to_coo_matrix"]], "tree_depth() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.tree_depth"]], "voronoi_diagram() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.voronoi_diagram"]], "voronoi_labelling() (nipy.algorithms.clustering.hierarchical_clustering.weightedforest method)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.WeightedForest.voronoi_labelling"]], "ward() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.ward"]], "ward_field_segment() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.ward_field_segment"]], "ward_quick() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.ward_quick"]], "ward_quick_segment() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.ward_quick_segment"]], "ward_segment() (in module nipy.algorithms.clustering.hierarchical_clustering)": [[4, "nipy.algorithms.clustering.hierarchical_clustering.ward_segment"]], "imm (class in nipy.algorithms.clustering.imm)": [[5, "nipy.algorithms.clustering.imm.IMM"]], "mixedimm (class in nipy.algorithms.clustering.imm)": [[5, "nipy.algorithms.clustering.imm.MixedIMM"]], "__init__() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.__init__"]], "__init__() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.__init__"]], "average_log_like() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.average_log_like"]], "average_log_like() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.average_log_like"]], "bayes_factor() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.bayes_factor"]], "bayes_factor() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.bayes_factor"]], "bic() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.bic"]], "bic() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.bic"]], "check() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.check"]], "check() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.check"]], "check_x() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.check_x"]], "check_x() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.check_x"]], "co_labelling() (in module nipy.algorithms.clustering.imm)": [[5, "nipy.algorithms.clustering.imm.co_labelling"]], "conditional_posterior_proba() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.conditional_posterior_proba"]], "conditional_posterior_proba() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.conditional_posterior_proba"]], "cross_validated_update() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.cross_validated_update"]], "cross_validated_update() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.cross_validated_update"]], "estimate() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.estimate"]], "estimate() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.estimate"]], "evidence() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.evidence"]], "evidence() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.evidence"]], "guess_priors() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.guess_priors"]], "guess_priors() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.guess_priors"]], "guess_regularizing() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.guess_regularizing"]], "guess_regularizing() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.guess_regularizing"]], "initialize() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.initialize"]], "initialize() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.initialize"]], "initialize_and_estimate() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.initialize_and_estimate"]], "initialize_and_estimate() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.initialize_and_estimate"]], "likelihood() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.likelihood"]], "likelihood() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.likelihood"]], "likelihood_under_the_prior() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.likelihood_under_the_prior"]], "likelihood_under_the_prior() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.likelihood_under_the_prior"]], "main() (in module nipy.algorithms.clustering.imm)": [[5, "nipy.algorithms.clustering.imm.main"]], "map_label() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.map_label"]], "map_label() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.map_label"]], "mixture_likelihood() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.mixture_likelihood"]], "mixture_likelihood() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.mixture_likelihood"]], "nipy.algorithms.clustering.imm": [[5, "module-nipy.algorithms.clustering.imm"]], "plugin() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.plugin"]], "plugin() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.plugin"]], "pop() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.pop"]], "pop() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.pop"]], "probability_under_prior() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.probability_under_prior"]], "probability_under_prior() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.probability_under_prior"]], "reduce() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.reduce"]], "reduce() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.reduce"]], "sample() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.sample"]], "sample() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.sample"]], "sample_and_average() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.sample_and_average"]], "sample_and_average() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.sample_and_average"]], "sample_indicator() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.sample_indicator"]], "sample_indicator() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.sample_indicator"]], "set_constant_densities() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.set_constant_densities"]], "set_constant_densities() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.set_constant_densities"]], "set_priors() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.set_priors"]], "set_priors() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.set_priors"]], "show() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.show"]], "show() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.show"]], "show_components() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.show_components"]], "show_components() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.show_components"]], "simple_update() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.simple_update"]], "simple_update() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.simple_update"]], "test() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.test"]], "test() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.test"]], "train() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.train"]], "train() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.train"]], "unweighted_likelihood() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.unweighted_likelihood"]], "unweighted_likelihood() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.unweighted_likelihood"]], "unweighted_likelihood_() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.unweighted_likelihood_"]], "unweighted_likelihood_() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.unweighted_likelihood_"]], "update() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.update"]], "update() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.update"]], "update_means() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.update_means"]], "update_means() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.update_means"]], "update_precisions() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.update_precisions"]], "update_precisions() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.update_precisions"]], "update_weights() (nipy.algorithms.clustering.imm.imm method)": [[5, "nipy.algorithms.clustering.imm.IMM.update_weights"]], "update_weights() (nipy.algorithms.clustering.imm.mixedimm method)": [[5, "nipy.algorithms.clustering.imm.MixedIMM.update_weights"]], "kmeans() (in module nipy.algorithms.clustering.utils)": [[6, "nipy.algorithms.clustering.utils.kmeans"]], "nipy.algorithms.clustering.utils": [[6, "module-nipy.algorithms.clustering.utils"]], "voronoi() (in module nipy.algorithms.clustering.utils)": [[6, "nipy.algorithms.clustering.utils.voronoi"]], "vonmisesmixture (class in nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture"]], "__init__() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.__init__"]], "density_per_component() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.density_per_component"]], "estimate() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.estimate"]], "estimate_means() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.estimate_means"]], "estimate_robust_vmm() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.estimate_robust_vmm"]], "estimate_weights() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.estimate_weights"]], "example_cv_nonoise() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.example_cv_nonoise"]], "example_noisy() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.example_noisy"]], "log_density_per_component() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.log_density_per_component"]], "log_weighted_density() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.log_weighted_density"]], "mixture_density() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.mixture_density"]], "nipy.algorithms.clustering.von_mises_fisher_mixture": [[7, "module-nipy.algorithms.clustering.von_mises_fisher_mixture"]], "responsibilities() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.responsibilities"]], "select_vmm() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.select_vmm"]], "select_vmm_cv() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.select_vmm_cv"]], "show() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.show"]], "sphere_density() (in module nipy.algorithms.clustering.von_mises_fisher_mixture)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.sphere_density"]], "weighted_density() (nipy.algorithms.clustering.von_mises_fisher_mixture.vonmisesmixture method)": [[7, "nipy.algorithms.clustering.von_mises_fisher_mixture.VonMisesMixture.weighted_density"]], "diagnose() (in module nipy.algorithms.diagnostics.commands)": [[8, "nipy.algorithms.diagnostics.commands.diagnose"]], "nipy.algorithms.diagnostics.commands": [[8, "module-nipy.algorithms.diagnostics.commands"]], "parse_fname_axes() (in module nipy.algorithms.diagnostics.commands)": [[8, "nipy.algorithms.diagnostics.commands.parse_fname_axes"]], "tsdiffana() (in module nipy.algorithms.diagnostics.commands)": [[8, "nipy.algorithms.diagnostics.commands.tsdiffana"]], "nipy.algorithms.diagnostics.screens": [[9, "module-nipy.algorithms.diagnostics.screens"]], "screen() (in module nipy.algorithms.diagnostics.screens)": [[9, "nipy.algorithms.diagnostics.screens.screen"]], "write_screen_res() (in module nipy.algorithms.diagnostics.screens)": [[9, "nipy.algorithms.diagnostics.screens.write_screen_res"]], "nipy.algorithms.diagnostics.timediff": [[10, "module-nipy.algorithms.diagnostics.timediff"]], "time_slice_diffs() (in module nipy.algorithms.diagnostics.timediff)": [[10, "nipy.algorithms.diagnostics.timediff.time_slice_diffs"]], "time_slice_diffs_image() (in module nipy.algorithms.diagnostics.timediff)": [[10, "nipy.algorithms.diagnostics.timediff.time_slice_diffs_image"]], "nipy.algorithms.diagnostics.tsdiffplot": [[11, "module-nipy.algorithms.diagnostics.tsdiffplot"]], "plot_tsdiffs() (in module nipy.algorithms.diagnostics.tsdiffplot)": [[11, "nipy.algorithms.diagnostics.tsdiffplot.plot_tsdiffs"]], "plot_tsdiffs_image() (in module nipy.algorithms.diagnostics.tsdiffplot)": [[11, "nipy.algorithms.diagnostics.tsdiffplot.plot_tsdiffs_image"]], "reselimage (class in nipy.algorithms.fwhm)": [[12, "nipy.algorithms.fwhm.ReselImage"]], "resels (class in nipy.algorithms.fwhm)": [[12, "nipy.algorithms.fwhm.Resels"]], "__init__() (nipy.algorithms.fwhm.reselimage method)": [[12, "nipy.algorithms.fwhm.ReselImage.__init__"]], "__init__() (nipy.algorithms.fwhm.resels method)": [[12, "nipy.algorithms.fwhm.Resels.__init__"]], "fwhm2resel() (nipy.algorithms.fwhm.reselimage method)": [[12, "nipy.algorithms.fwhm.ReselImage.fwhm2resel"]], "fwhm2resel() (nipy.algorithms.fwhm.resels method)": [[12, "nipy.algorithms.fwhm.Resels.fwhm2resel"]], "integrate() (nipy.algorithms.fwhm.reselimage method)": [[12, "nipy.algorithms.fwhm.ReselImage.integrate"]], "integrate() (nipy.algorithms.fwhm.resels method)": [[12, "nipy.algorithms.fwhm.Resels.integrate"]], "nipy.algorithms.fwhm": [[12, "module-nipy.algorithms.fwhm"]], "resel2fwhm() (nipy.algorithms.fwhm.reselimage method)": [[12, "nipy.algorithms.fwhm.ReselImage.resel2fwhm"]], "resel2fwhm() (nipy.algorithms.fwhm.resels method)": [[12, "nipy.algorithms.fwhm.Resels.resel2fwhm"]], "bipartitegraph (class in nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph"]], "__init__() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.__init__"]], "bipartite_graph_from_adjacency() (in module nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.bipartite_graph_from_adjacency"]], "bipartite_graph_from_coo_matrix() (in module nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.bipartite_graph_from_coo_matrix"]], "check_feature_matrices() (in module nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.check_feature_matrices"]], "copy() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.copy"]], "cross_eps() (in module nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.cross_eps"]], "cross_knn() (in module nipy.algorithms.graph.bipartite_graph)": [[13, "nipy.algorithms.graph.bipartite_graph.cross_knn"]], "nipy.algorithms.graph.bipartite_graph": [[13, "module-nipy.algorithms.graph.bipartite_graph"]], "set_edges() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.set_edges"]], "set_weights() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.set_weights"]], "subgraph_left() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.subgraph_left"]], "subgraph_right() (nipy.algorithms.graph.bipartite_graph.bipartitegraph method)": [[13, "nipy.algorithms.graph.bipartite_graph.BipartiteGraph.subgraph_right"]], "field (class in nipy.algorithms.graph.field)": [[14, "nipy.algorithms.graph.field.Field"]], "__init__() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.__init__"]], "adjacency() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.adjacency"]], "anti_symmeterize() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.anti_symmeterize"]], "cc() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.cc"]], "cliques() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.cliques"]], "closing() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.closing"]], "compact_neighb() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.compact_neighb"]], "constrained_voronoi() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.constrained_voronoi"]], "copy() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.copy"]], "custom_watershed() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.custom_watershed"]], "cut_redundancies() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.cut_redundancies"]], "degrees() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.degrees"]], "diffusion() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.diffusion"]], "dijkstra() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.dijkstra"]], "dilation() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.dilation"]], "erosion() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.erosion"]], "field_from_coo_matrix_and_data() (in module nipy.algorithms.graph.field)": [[14, "nipy.algorithms.graph.field.field_from_coo_matrix_and_data"]], "field_from_graph_and_data() (in module nipy.algorithms.graph.field)": [[14, "nipy.algorithms.graph.field.field_from_graph_and_data"]], "floyd() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.floyd"]], "from_3d_grid() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.from_3d_grid"]], "geodesic_kmeans() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.geodesic_kmeans"]], "get_e() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_E"]], "get_v() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_V"]], "get_edges() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_edges"]], "get_field() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_field"]], "get_local_maxima() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_local_maxima"]], "get_vertices() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_vertices"]], "get_weights() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.get_weights"]], "highest_neighbor() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.highest_neighbor"]], "is_connected() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.is_connected"]], "kruskal() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.kruskal"]], "left_incidence() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.left_incidence"]], "list_of_neighbors() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.list_of_neighbors"]], "local_maxima() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.local_maxima"]], "main_cc() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.main_cc"]], "nipy.algorithms.graph.field": [[14, "module-nipy.algorithms.graph.field"]], "normalize() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.normalize"]], "opening() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.opening"]], "remove_edges() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.remove_edges"]], "remove_trivial_edges() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.remove_trivial_edges"]], "right_incidence() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.right_incidence"]], "set_edges() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.set_edges"]], "set_euclidian() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.set_euclidian"]], "set_field() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.set_field"]], "set_gaussian() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.set_gaussian"]], "set_weights() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.set_weights"]], "show() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.show"]], "subfield() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.subfield"]], "subgraph() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.subgraph"]], "symmeterize() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.symmeterize"]], "threshold_bifurcations() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.threshold_bifurcations"]], "to_coo_matrix() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.to_coo_matrix"]], "voronoi_diagram() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.voronoi_diagram"]], "voronoi_labelling() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.voronoi_labelling"]], "ward() (nipy.algorithms.graph.field.field method)": [[14, "nipy.algorithms.graph.field.Field.ward"]], "forest (class in nipy.algorithms.graph.forest)": [[15, "nipy.algorithms.graph.forest.Forest"]], "__init__() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.__init__"]], "adjacency() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.adjacency"]], "all_distances() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.all_distances"]], "anti_symmeterize() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.anti_symmeterize"]], "cc() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.cc"]], "check() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.check"]], "cliques() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.cliques"]], "compact_neighb() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.compact_neighb"]], "compute_children() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.compute_children"]], "copy() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.copy"]], "cut_redundancies() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.cut_redundancies"]], "define_graph_attributes() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.define_graph_attributes"]], "degrees() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.degrees"]], "depth_from_leaves() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.depth_from_leaves"]], "dijkstra() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.dijkstra"]], "floyd() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.floyd"]], "from_3d_grid() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.from_3d_grid"]], "get_e() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_E"]], "get_v() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_V"]], "get_children() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_children"]], "get_descendants() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_descendants"]], "get_edges() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_edges"]], "get_vertices() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_vertices"]], "get_weights() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.get_weights"]], "is_connected() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.is_connected"]], "isleaf() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.isleaf"]], "isroot() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.isroot"]], "kruskal() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.kruskal"]], "leaves_of_a_subtree() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.leaves_of_a_subtree"]], "left_incidence() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.left_incidence"]], "list_of_neighbors() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.list_of_neighbors"]], "main_cc() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.main_cc"]], "merge_simple_branches() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.merge_simple_branches"]], "nipy.algorithms.graph.forest": [[15, "module-nipy.algorithms.graph.forest"]], "normalize() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.normalize"]], "propagate_upward() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.propagate_upward"]], "propagate_upward_and() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.propagate_upward_and"]], "remove_edges() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.remove_edges"]], "remove_trivial_edges() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.remove_trivial_edges"]], "reorder_from_leaves_to_roots() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.reorder_from_leaves_to_roots"]], "right_incidence() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.right_incidence"]], "set_edges() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.set_edges"]], "set_euclidian() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.set_euclidian"]], "set_gaussian() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.set_gaussian"]], "set_weights() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.set_weights"]], "show() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.show"]], "subforest() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.subforest"]], "subgraph() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.subgraph"]], "symmeterize() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.symmeterize"]], "to_coo_matrix() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.to_coo_matrix"]], "tree_depth() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.tree_depth"]], "voronoi_diagram() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.voronoi_diagram"]], "voronoi_labelling() (nipy.algorithms.graph.forest.forest method)": [[15, "nipy.algorithms.graph.forest.Forest.voronoi_labelling"]], "graph (class in nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.Graph"]], "weightedgraph (class in nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.WeightedGraph"]], "__init__() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.__init__"]], "__init__() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.__init__"]], "adjacency() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.adjacency"]], "adjacency() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.adjacency"]], "anti_symmeterize() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.anti_symmeterize"]], "cc() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.cc"]], "cc() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.cc"]], "cliques() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.cliques"]], "compact_neighb() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.compact_neighb"]], "complete_graph() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.complete_graph"]], "concatenate_graphs() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.concatenate_graphs"]], "copy() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.copy"]], "cut_redundancies() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.cut_redundancies"]], "degrees() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.degrees"]], "degrees() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.degrees"]], "dijkstra() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.dijkstra"]], "eps_nn() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.eps_nn"]], "floyd() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.floyd"]], "from_3d_grid() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.from_3d_grid"]], "get_e() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.get_E"]], "get_e() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.get_E"]], "get_v() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.get_V"]], "get_v() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.get_V"]], "get_edges() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.get_edges"]], "get_edges() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.get_edges"]], "get_vertices() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.get_vertices"]], "get_vertices() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.get_vertices"]], "get_weights() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.get_weights"]], "graph_3d_grid() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.graph_3d_grid"]], "is_connected() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.is_connected"]], "knn() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.knn"]], "kruskal() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.kruskal"]], "left_incidence() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.left_incidence"]], "lil_cc() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.lil_cc"]], "list_of_neighbors() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.list_of_neighbors"]], "main_cc() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.main_cc"]], "main_cc() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.main_cc"]], "mst() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.mst"]], "nipy.algorithms.graph.graph": [[16, "module-nipy.algorithms.graph.graph"]], "normalize() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.normalize"]], "remove_edges() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.remove_edges"]], "remove_trivial_edges() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.remove_trivial_edges"]], "right_incidence() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.right_incidence"]], "set_edges() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.set_edges"]], "set_edges() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.set_edges"]], "set_euclidian() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.set_euclidian"]], "set_gaussian() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.set_gaussian"]], "set_weights() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.set_weights"]], "show() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.show"]], "show() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.show"]], "subgraph() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.subgraph"]], "symmeterize() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.symmeterize"]], "to_coo_matrix() (nipy.algorithms.graph.graph.graph method)": [[16, "nipy.algorithms.graph.graph.Graph.to_coo_matrix"]], "to_coo_matrix() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.to_coo_matrix"]], "voronoi_diagram() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.voronoi_diagram"]], "voronoi_labelling() (nipy.algorithms.graph.graph.weightedgraph method)": [[16, "nipy.algorithms.graph.graph.WeightedGraph.voronoi_labelling"]], "wgraph_from_3d_grid() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.wgraph_from_3d_grid"]], "wgraph_from_adjacency() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.wgraph_from_adjacency"]], "wgraph_from_coo_matrix() (in module nipy.algorithms.graph.graph)": [[16, "nipy.algorithms.graph.graph.wgraph_from_coo_matrix"]], "parcelanalysis (class in nipy.algorithms.group.parcel_analysis)": [[17, "nipy.algorithms.group.parcel_analysis.ParcelAnalysis"]], "__init__() (nipy.algorithms.group.parcel_analysis.parcelanalysis method)": [[17, "nipy.algorithms.group.parcel_analysis.ParcelAnalysis.__init__"]], "dump_results() (nipy.algorithms.group.parcel_analysis.parcelanalysis method)": [[17, "nipy.algorithms.group.parcel_analysis.ParcelAnalysis.dump_results"]], "nipy.algorithms.group.parcel_analysis": [[17, "module-nipy.algorithms.group.parcel_analysis"]], "parcel_analysis() (in module nipy.algorithms.group.parcel_analysis)": [[17, "nipy.algorithms.group.parcel_analysis.parcel_analysis"]], "parcel_maps() (nipy.algorithms.group.parcel_analysis.parcelanalysis method)": [[17, "nipy.algorithms.group.parcel_analysis.ParcelAnalysis.parcel_maps"]], "t_map() (nipy.algorithms.group.parcel_analysis.parcelanalysis method)": [[17, "nipy.algorithms.group.parcel_analysis.ParcelAnalysis.t_map"]], "imageinterpolator (class in nipy.algorithms.interpolation)": [[18, "nipy.algorithms.interpolation.ImageInterpolator"]], "__init__() (nipy.algorithms.interpolation.imageinterpolator method)": [[18, "nipy.algorithms.interpolation.ImageInterpolator.__init__"]], "evaluate() (nipy.algorithms.interpolation.imageinterpolator method)": [[18, "nipy.algorithms.interpolation.ImageInterpolator.evaluate"]], "mode (nipy.algorithms.interpolation.imageinterpolator property)": [[18, "nipy.algorithms.interpolation.ImageInterpolator.mode"]], "n_prepad_if_needed (nipy.algorithms.interpolation.imageinterpolator attribute)": [[18, "nipy.algorithms.interpolation.ImageInterpolator.n_prepad_if_needed"]], "nipy.algorithms.interpolation": [[18, "module-nipy.algorithms.interpolation"]], "order (nipy.algorithms.interpolation.imageinterpolator property)": [[18, "nipy.algorithms.interpolation.ImageInterpolator.order"]], "linearfilter (class in nipy.algorithms.kernel_smooth)": [[19, "nipy.algorithms.kernel_smooth.LinearFilter"]], "__init__() (nipy.algorithms.kernel_smooth.linearfilter method)": [[19, "nipy.algorithms.kernel_smooth.LinearFilter.__init__"]], "fwhm2sigma() (in module nipy.algorithms.kernel_smooth)": [[19, "nipy.algorithms.kernel_smooth.fwhm2sigma"]], "nipy.algorithms.kernel_smooth": [[19, "module-nipy.algorithms.kernel_smooth"]], "normalization (nipy.algorithms.kernel_smooth.linearfilter attribute)": [[19, "nipy.algorithms.kernel_smooth.LinearFilter.normalization"]], "sigma2fwhm() (in module nipy.algorithms.kernel_smooth)": [[19, "nipy.algorithms.kernel_smooth.sigma2fwhm"]], "smooth() (nipy.algorithms.kernel_smooth.linearfilter method)": [[19, "nipy.algorithms.kernel_smooth.LinearFilter.smooth"]], "fmin_steepest() (in module nipy.algorithms.optimize)": [[20, "nipy.algorithms.optimize.fmin_steepest"]], "nipy.algorithms.optimize": [[20, "module-nipy.algorithms.optimize"]], "affine (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Affine"]], "affine2d (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Affine2D"]], "rigid (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Rigid"]], "rigid2d (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Rigid2D"]], "similarity (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Similarity"]], "similarity2d (class in nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.Similarity2D"]], "__init__() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.__init__"]], "__init__() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.__init__"]], "__init__() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.__init__"]], "__init__() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.__init__"]], "__init__() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.__init__"]], "__init__() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.__init__"]], "apply() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.apply"]], "apply() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.apply"]], "apply() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.apply"]], "apply() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.apply"]], "apply() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.apply"]], "apply() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.apply"]], "as_affine() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.as_affine"]], "as_affine() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.as_affine"]], "as_affine() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.as_affine"]], "as_affine() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.as_affine"]], "as_affine() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.as_affine"]], "as_affine() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.as_affine"]], "compose() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.compose"]], "compose() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.compose"]], "compose() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.compose"]], "compose() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.compose"]], "compose() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.compose"]], "compose() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.compose"]], "copy() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.copy"]], "copy() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.copy"]], "copy() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.copy"]], "copy() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.copy"]], "copy() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.copy"]], "copy() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.copy"]], "from_matrix44() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.from_matrix44"]], "from_matrix44() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.from_matrix44"]], "from_matrix44() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.from_matrix44"]], "from_matrix44() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.from_matrix44"]], "from_matrix44() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.from_matrix44"]], "from_matrix44() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.from_matrix44"]], "inv() (nipy.algorithms.registration.affine.affine method)": [[21, "nipy.algorithms.registration.affine.Affine.inv"]], "inv() (nipy.algorithms.registration.affine.affine2d method)": [[21, "nipy.algorithms.registration.affine.Affine2D.inv"]], "inv() (nipy.algorithms.registration.affine.rigid method)": [[21, "nipy.algorithms.registration.affine.Rigid.inv"]], "inv() (nipy.algorithms.registration.affine.rigid2d method)": [[21, "nipy.algorithms.registration.affine.Rigid2D.inv"]], "inv() (nipy.algorithms.registration.affine.similarity method)": [[21, "nipy.algorithms.registration.affine.Similarity.inv"]], "inv() (nipy.algorithms.registration.affine.similarity2d method)": [[21, "nipy.algorithms.registration.affine.Similarity2D.inv"]], "inverse_affine() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.inverse_affine"]], "is_direct (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.is_direct"]], "is_direct (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.is_direct"]], "is_direct (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.is_direct"]], "is_direct (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.is_direct"]], "is_direct (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.is_direct"]], "is_direct (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.is_direct"]], "nipy.algorithms.registration.affine": [[21, "module-nipy.algorithms.registration.affine"]], "param (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.param"]], "param (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.param"]], "param (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.param"]], "param (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.param"]], "param (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.param"]], "param (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.param"]], "param_inds (nipy.algorithms.registration.affine.affine attribute)": [[21, "nipy.algorithms.registration.affine.Affine.param_inds"]], "param_inds (nipy.algorithms.registration.affine.affine2d attribute)": [[21, "nipy.algorithms.registration.affine.Affine2D.param_inds"]], "param_inds (nipy.algorithms.registration.affine.rigid attribute)": [[21, "nipy.algorithms.registration.affine.Rigid.param_inds"]], "param_inds (nipy.algorithms.registration.affine.rigid2d attribute)": [[21, "nipy.algorithms.registration.affine.Rigid2D.param_inds"]], "param_inds (nipy.algorithms.registration.affine.similarity attribute)": [[21, "nipy.algorithms.registration.affine.Similarity.param_inds"]], "param_inds (nipy.algorithms.registration.affine.similarity2d attribute)": [[21, "nipy.algorithms.registration.affine.Similarity2D.param_inds"]], "pre_rotation (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.pre_rotation"]], "pre_rotation (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.pre_rotation"]], "pre_rotation (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.pre_rotation"]], "pre_rotation (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.pre_rotation"]], "pre_rotation (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.pre_rotation"]], "pre_rotation (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.pre_rotation"]], "precond (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.precond"]], "precond (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.precond"]], "precond (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.precond"]], "precond (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.precond"]], "precond (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.precond"]], "precond (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.precond"]], "preconditioner() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.preconditioner"]], "rotation (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.rotation"]], "rotation (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.rotation"]], "rotation (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.rotation"]], "rotation (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.rotation"]], "rotation (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.rotation"]], "rotation (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.rotation"]], "rotation_mat2vec() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.rotation_mat2vec"]], "rotation_vec2mat() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.rotation_vec2mat"]], "scaling (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.scaling"]], "scaling (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.scaling"]], "scaling (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.scaling"]], "scaling (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.scaling"]], "scaling (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.scaling"]], "scaling (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.scaling"]], "slices2aff() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.slices2aff"]], "subgrid_affine() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.subgrid_affine"]], "threshold() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.threshold"]], "to_matrix44() (in module nipy.algorithms.registration.affine)": [[21, "nipy.algorithms.registration.affine.to_matrix44"]], "translation (nipy.algorithms.registration.affine.affine property)": [[21, "nipy.algorithms.registration.affine.Affine.translation"]], "translation (nipy.algorithms.registration.affine.affine2d property)": [[21, "nipy.algorithms.registration.affine.Affine2D.translation"]], "translation (nipy.algorithms.registration.affine.rigid property)": [[21, "nipy.algorithms.registration.affine.Rigid.translation"]], "translation (nipy.algorithms.registration.affine.rigid2d property)": [[21, "nipy.algorithms.registration.affine.Rigid2D.translation"]], "translation (nipy.algorithms.registration.affine.similarity property)": [[21, "nipy.algorithms.registration.affine.Similarity.translation"]], "translation (nipy.algorithms.registration.affine.similarity2d property)": [[21, "nipy.algorithms.registration.affine.Similarity2D.translation"]], "chaintransform (class in nipy.algorithms.registration.chain_transform)": [[22, "nipy.algorithms.registration.chain_transform.ChainTransform"]], "__init__() (nipy.algorithms.registration.chain_transform.chaintransform method)": [[22, "nipy.algorithms.registration.chain_transform.ChainTransform.__init__"]], "apply() (nipy.algorithms.registration.chain_transform.chaintransform method)": [[22, "nipy.algorithms.registration.chain_transform.ChainTransform.apply"]], "nipy.algorithms.registration.chain_transform": [[22, "module-nipy.algorithms.registration.chain_transform"]], "param (nipy.algorithms.registration.chain_transform.chaintransform property)": [[22, "nipy.algorithms.registration.chain_transform.ChainTransform.param"]], "fmrirealign4d (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.FmriRealign4d"]], "image4d (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d"]], "realign4d (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4d"]], "realign4dalgorithm (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm"]], "spacerealign (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceRealign"]], "spacetimerealign (class in nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceTimeRealign"]], "__init__() (nipy.algorithms.registration.groupwise_registration.fmrirealign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.FmriRealign4d.__init__"]], "__init__() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.__init__"]], "__init__() (nipy.algorithms.registration.groupwise_registration.realign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4d.__init__"]], "__init__() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.__init__"]], "__init__() (nipy.algorithms.registration.groupwise_registration.spacerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceRealign.__init__"]], "__init__() (nipy.algorithms.registration.groupwise_registration.spacetimerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceTimeRealign.__init__"]], "adjust_subsampling() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.adjust_subsampling"]], "align_to_refscan() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.align_to_refscan"]], "estimate() (nipy.algorithms.registration.groupwise_registration.fmrirealign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.FmriRealign4d.estimate"]], "estimate() (nipy.algorithms.registration.groupwise_registration.realign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4d.estimate"]], "estimate() (nipy.algorithms.registration.groupwise_registration.spacerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceRealign.estimate"]], "estimate() (nipy.algorithms.registration.groupwise_registration.spacetimerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceTimeRealign.estimate"]], "estimate_instant_motion() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.estimate_instant_motion"]], "estimate_motion() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.estimate_motion"]], "free_data() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.free_data"]], "get_fdata() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.get_fdata"]], "get_shape() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.get_shape"]], "guess_slice_axis_and_direction() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.guess_slice_axis_and_direction"]], "init_instant_motion() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.init_instant_motion"]], "interp_slice_times() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.interp_slice_times"]], "make_grid() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.make_grid"]], "nipy.algorithms.registration.groupwise_registration": [[23, "module-nipy.algorithms.registration.groupwise_registration"]], "realign4d() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.realign4d"]], "resample() (nipy.algorithms.registration.groupwise_registration.fmrirealign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.FmriRealign4d.resample"]], "resample() (nipy.algorithms.registration.groupwise_registration.realign4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4d.resample"]], "resample() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.resample"]], "resample() (nipy.algorithms.registration.groupwise_registration.spacerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceRealign.resample"]], "resample() (nipy.algorithms.registration.groupwise_registration.spacetimerealign method)": [[23, "nipy.algorithms.registration.groupwise_registration.SpaceTimeRealign.resample"]], "resample4d() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.resample4d"]], "resample_full_data() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.resample_full_data"]], "scanner_coords() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.scanner_coords"]], "scanner_time() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.scanner_time"]], "set_fmin() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.set_fmin"]], "set_transform() (nipy.algorithms.registration.groupwise_registration.realign4dalgorithm method)": [[23, "nipy.algorithms.registration.groupwise_registration.Realign4dAlgorithm.set_transform"]], "single_run_realign4d() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.single_run_realign4d"]], "tr_from_header() (in module nipy.algorithms.registration.groupwise_registration)": [[23, "nipy.algorithms.registration.groupwise_registration.tr_from_header"]], "z_to_slice() (nipy.algorithms.registration.groupwise_registration.image4d method)": [[23, "nipy.algorithms.registration.groupwise_registration.Image4d.z_to_slice"]], "histogramregistration (class in nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration"]], "__init__() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.__init__"]], "approx_gradient() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.approx_gradient"]], "approx_hessian() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.approx_hessian"]], "approx_hessian_diag() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.approx_hessian_diag"]], "clamp() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.clamp"]], "eval() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.eval"]], "eval_gradient() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.eval_gradient"]], "eval_hessian() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.eval_hessian"]], "explore() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.explore"]], "ideal_spacing() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.ideal_spacing"]], "interp (nipy.algorithms.registration.histogram_registration.histogramregistration property)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.interp"]], "nipy.algorithms.registration.histogram_registration": [[24, "module-nipy.algorithms.registration.histogram_registration"]], "optimize() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.optimize"]], "set_fov() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.set_fov"]], "similarity (nipy.algorithms.registration.histogram_registration.histogramregistration property)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.similarity"]], "smallest_bounding_box() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.smallest_bounding_box"]], "smooth_image() (in module nipy.algorithms.registration.histogram_registration)": [[24, "nipy.algorithms.registration.histogram_registration.smooth_image"]], "subsample() (nipy.algorithms.registration.histogram_registration.histogramregistration method)": [[24, "nipy.algorithms.registration.histogram_registration.HistogramRegistration.subsample"]], "configure_optimizer() (in module nipy.algorithms.registration.optimizer)": [[25, "nipy.algorithms.registration.optimizer.configure_optimizer"]], "nipy.algorithms.registration.optimizer": [[25, "module-nipy.algorithms.registration.optimizer"]], "subdict() (in module nipy.algorithms.registration.optimizer)": [[25, "nipy.algorithms.registration.optimizer.subdict"]], "use_derivatives() (in module nipy.algorithms.registration.optimizer)": [[25, "nipy.algorithms.registration.optimizer.use_derivatives"]], "polyaffine (class in nipy.algorithms.registration.polyaffine)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine"]], "__init__() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.__init__"]], "affine() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.affine"]], "affines() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.affines"]], "apply() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.apply"]], "compose() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.compose"]], "left_compose() (nipy.algorithms.registration.polyaffine.polyaffine method)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.left_compose"]], "nipy.algorithms.registration.polyaffine": [[26, "module-nipy.algorithms.registration.polyaffine"]], "param (nipy.algorithms.registration.polyaffine.polyaffine property)": [[26, "nipy.algorithms.registration.polyaffine.PolyAffine.param"]], "cast_array() (in module nipy.algorithms.registration.resample)": [[27, "nipy.algorithms.registration.resample.cast_array"]], "nipy.algorithms.registration.resample": [[27, "module-nipy.algorithms.registration.resample"]], "resample() (in module nipy.algorithms.registration.resample)": [[27, "nipy.algorithms.registration.resample.resample"]], "aff2euler() (in module nipy.algorithms.registration.scripting)": [[28, "nipy.algorithms.registration.scripting.aff2euler"]], "aff2rot_zooms() (in module nipy.algorithms.registration.scripting)": [[28, "nipy.algorithms.registration.scripting.aff2rot_zooms"]], "nipy.algorithms.registration.scripting": [[28, "module-nipy.algorithms.registration.scripting"]], "space_time_realign() (in module nipy.algorithms.registration.scripting)": [[28, "nipy.algorithms.registration.scripting.space_time_realign"]], "correlationcoefficient (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationCoefficient"]], "correlationratio (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatio"]], "correlationratiol1 (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatioL1"]], "discreteparzenmutualinformation (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.DiscreteParzenMutualInformation"]], "mutualinformation (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.MutualInformation"]], "normalizedmutualinformation (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.NormalizedMutualInformation"]], "parzenmutualinformation (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.ParzenMutualInformation"]], "similaritymeasure (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.SimilarityMeasure"]], "supervisedlikelihoodratio (class in nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.SupervisedLikelihoodRatio"]], "__init__() (nipy.algorithms.registration.similarity_measures.correlationcoefficient method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationCoefficient.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.correlationratio method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatio.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.correlationratiol1 method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatioL1.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.discreteparzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.DiscreteParzenMutualInformation.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.mutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.MutualInformation.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.normalizedmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.NormalizedMutualInformation.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.parzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.ParzenMutualInformation.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.similaritymeasure method)": [[29, "nipy.algorithms.registration.similarity_measures.SimilarityMeasure.__init__"]], "__init__() (nipy.algorithms.registration.similarity_measures.supervisedlikelihoodratio method)": [[29, "nipy.algorithms.registration.similarity_measures.SupervisedLikelihoodRatio.__init__"]], "correlation2loglikelihood() (in module nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.correlation2loglikelihood"]], "dist2loss() (in module nipy.algorithms.registration.similarity_measures)": [[29, "nipy.algorithms.registration.similarity_measures.dist2loss"]], "loss() (nipy.algorithms.registration.similarity_measures.correlationcoefficient method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationCoefficient.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.correlationratio method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatio.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.correlationratiol1 method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatioL1.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.discreteparzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.DiscreteParzenMutualInformation.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.mutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.MutualInformation.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.normalizedmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.NormalizedMutualInformation.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.parzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.ParzenMutualInformation.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.similaritymeasure method)": [[29, "nipy.algorithms.registration.similarity_measures.SimilarityMeasure.loss"]], "loss() (nipy.algorithms.registration.similarity_measures.supervisedlikelihoodratio method)": [[29, "nipy.algorithms.registration.similarity_measures.SupervisedLikelihoodRatio.loss"]], "nipy.algorithms.registration.similarity_measures": [[29, "module-nipy.algorithms.registration.similarity_measures"]], "npoints() (nipy.algorithms.registration.similarity_measures.correlationcoefficient method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationCoefficient.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.correlationratio method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatio.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.correlationratiol1 method)": [[29, "nipy.algorithms.registration.similarity_measures.CorrelationRatioL1.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.discreteparzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.DiscreteParzenMutualInformation.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.mutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.MutualInformation.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.normalizedmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.NormalizedMutualInformation.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.parzenmutualinformation method)": [[29, "nipy.algorithms.registration.similarity_measures.ParzenMutualInformation.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.similaritymeasure method)": [[29, "nipy.algorithms.registration.similarity_measures.SimilarityMeasure.npoints"]], "npoints() (nipy.algorithms.registration.similarity_measures.supervisedlikelihoodratio method)": [[29, "nipy.algorithms.registration.similarity_measures.SupervisedLikelihoodRatio.npoints"]], "transform (class in nipy.algorithms.registration.transform)": [[30, "nipy.algorithms.registration.transform.Transform"]], "__init__() (nipy.algorithms.registration.transform.transform method)": [[30, "nipy.algorithms.registration.transform.Transform.__init__"]], "apply() (nipy.algorithms.registration.transform.transform method)": [[30, "nipy.algorithms.registration.transform.Transform.apply"]], "compose() (nipy.algorithms.registration.transform.transform method)": [[30, "nipy.algorithms.registration.transform.Transform.compose"]], "nipy.algorithms.registration.transform": [[30, "module-nipy.algorithms.registration.transform"]], "param (nipy.algorithms.registration.transform.transform property)": [[30, "nipy.algorithms.registration.transform.Transform.param"]], "check_type() (in module nipy.algorithms.registration.type_check)": [[31, "nipy.algorithms.registration.type_check.check_type"]], "check_type_and_shape() (in module nipy.algorithms.registration.type_check)": [[31, "nipy.algorithms.registration.type_check.check_type_and_shape"]], "nipy.algorithms.registration.type_check": [[31, "module-nipy.algorithms.registration.type_check"]], "nipy.algorithms.resample": [[32, "module-nipy.algorithms.resample"]], "resample() (in module nipy.algorithms.resample)": [[32, "nipy.algorithms.resample.resample"]], "resample_img2img() (in module nipy.algorithms.resample)": [[32, "nipy.algorithms.resample.resample_img2img"]], "braint1segmentation (class in nipy.algorithms.segmentation.brain_segmentation)": [[33, "nipy.algorithms.segmentation.brain_segmentation.BrainT1Segmentation"]], "__init__() (nipy.algorithms.segmentation.brain_segmentation.braint1segmentation method)": [[33, "nipy.algorithms.segmentation.brain_segmentation.BrainT1Segmentation.__init__"]], "convert() (nipy.algorithms.segmentation.brain_segmentation.braint1segmentation method)": [[33, "nipy.algorithms.segmentation.brain_segmentation.BrainT1Segmentation.convert"]], "nipy.algorithms.segmentation.brain_segmentation": [[33, "module-nipy.algorithms.segmentation.brain_segmentation"]], "segmentation (class in nipy.algorithms.segmentation.segmentation)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation"]], "__init__() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.__init__"]], "binarize_ppm() (in module nipy.algorithms.segmentation.segmentation)": [[34, "nipy.algorithms.segmentation.segmentation.binarize_ppm"]], "free_energy() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.free_energy"]], "log_external_field() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.log_external_field"]], "map() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.map"]], "map_from_ppm() (in module nipy.algorithms.segmentation.segmentation)": [[34, "nipy.algorithms.segmentation.segmentation.map_from_ppm"]], "moment_matching() (in module nipy.algorithms.segmentation.segmentation)": [[34, "nipy.algorithms.segmentation.segmentation.moment_matching"]], "nipy.algorithms.segmentation.segmentation": [[34, "module-nipy.algorithms.segmentation.segmentation"]], "normalized_external_field() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.normalized_external_field"]], "run() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.run"]], "set_markov_prior() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.set_markov_prior"]], "ve_step() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.ve_step"]], "vm_step() (nipy.algorithms.segmentation.segmentation.segmentation method)": [[34, "nipy.algorithms.segmentation.segmentation.Segmentation.vm_step"]], "nipy.algorithms.slicetiming.timefuncs": [[35, "module-nipy.algorithms.slicetiming.timefuncs"]], "st_01234() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_01234"]], "st_02413() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_02413"]], "st_03142() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_03142"]], "st_13024() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_13024"]], "st_41302() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_41302"]], "st_42031() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_42031"]], "st_43210() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_43210"]], "st_odd0_even1() (in module nipy.algorithms.slicetiming.timefuncs)": [[35, "nipy.algorithms.slicetiming.timefuncs.st_odd0_even1"]], "nipy.algorithms.statistics.bayesian_mixed_effects": [[36, "module-nipy.algorithms.statistics.bayesian_mixed_effects"]], "two_level_glm() (in module nipy.algorithms.statistics.bayesian_mixed_effects)": [[36, "nipy.algorithms.statistics.bayesian_mixed_effects.two_level_glm"]], "bench_lips1d() (in module nipy.algorithms.statistics.bench.bench_intvol)": [[37, "nipy.algorithms.statistics.bench.bench_intvol.bench_lips1d"]], "bench_lips2d() (in module nipy.algorithms.statistics.bench.bench_intvol)": [[37, "nipy.algorithms.statistics.bench.bench_intvol.bench_lips2d"]], "bench_lips3d() (in module nipy.algorithms.statistics.bench.bench_intvol)": [[37, "nipy.algorithms.statistics.bench.bench_intvol.bench_lips3d"]], "nipy.algorithms.statistics.bench.bench_intvol": [[37, "module-nipy.algorithms.statistics.bench.bench_intvol"]], "normalempiricalnull (class in nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull"]], "__init__() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.__init__"]], "check_p_values() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.check_p_values"]], "fdr() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.fdr"]], "fdr() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.fdr"]], "fdr_threshold() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.fdr_threshold"]], "fdrcurve() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.fdrcurve"]], "gamma_gaussian_fit() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.gamma_gaussian_fit"]], "gaussian_fdr() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.gaussian_fdr"]], "gaussian_fdr_threshold() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.gaussian_fdr_threshold"]], "learn() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.learn"]], "nipy.algorithms.statistics.empirical_pvalue": [[38, "module-nipy.algorithms.statistics.empirical_pvalue"]], "plot() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.plot"]], "smoothed_histogram_from_samples() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.smoothed_histogram_from_samples"]], "three_classes_gmm_fit() (in module nipy.algorithms.statistics.empirical_pvalue)": [[38, "nipy.algorithms.statistics.empirical_pvalue.three_classes_GMM_fit"]], "threshold() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.threshold"]], "uncorrected_threshold() (nipy.algorithms.statistics.empirical_pvalue.normalempiricalnull method)": [[38, "nipy.algorithms.statistics.empirical_pvalue.NormalEmpiricalNull.uncorrected_threshold"]], "beta (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta"]], "factor (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor"]], "factorterm (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm"]], "formula (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula"]], "randomeffects (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects"]], "term (class in nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.Term"]], "__init__() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.__init__"]], "__init__() (nipy.algorithms.statistics.formula.formulae.factor method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.__init__"]], "__init__() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.__init__"]], "__init__() (nipy.algorithms.statistics.formula.formulae.formula method)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.__init__"]], "__init__() (nipy.algorithms.statistics.formula.formulae.randomeffects method)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.__init__"]], "__init__() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.__init__"]], "adjoint() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.adjoint"]], "adjoint() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.adjoint"]], "adjoint() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.adjoint"]], "apart() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.apart"]], "apart() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.apart"]], "apart() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.apart"]], "args (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.args"]], "args (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.args"]], "args (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.args"]], "args_cnc() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.args_cnc"]], "args_cnc() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.args_cnc"]], "args_cnc() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.args_cnc"]], "as_base_exp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_base_exp"]], "as_base_exp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_base_exp"]], "as_base_exp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_base_exp"]], "as_coeff_add() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coeff_Add"], [39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coeff_add"]], "as_coeff_add() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coeff_Add"], [39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coeff_add"]], "as_coeff_add() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_coeff_Add"], [39, "nipy.algorithms.statistics.formula.formulae.Term.as_coeff_add"]], "as_coeff_mul() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coeff_Mul"], [39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coeff_mul"]], "as_coeff_mul() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coeff_Mul"], [39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coeff_mul"]], "as_coeff_mul() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_coeff_Mul"], [39, "nipy.algorithms.statistics.formula.formulae.Term.as_coeff_mul"]], "as_coeff_exponent() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coeff_exponent"]], "as_coeff_exponent() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coeff_exponent"]], "as_coeff_exponent() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_coeff_exponent"]], "as_coefficient() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coefficient"]], "as_coefficient() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coefficient"]], "as_coefficient() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_coefficient"]], "as_coefficients_dict() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_coefficients_dict"]], "as_coefficients_dict() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_coefficients_dict"]], "as_coefficients_dict() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_coefficients_dict"]], "as_content_primitive() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_content_primitive"]], "as_content_primitive() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_content_primitive"]], "as_content_primitive() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_content_primitive"]], "as_dummy() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_dummy"]], "as_dummy() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_dummy"]], "as_dummy() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_dummy"]], "as_expr() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_expr"]], "as_expr() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_expr"]], "as_expr() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_expr"]], "as_independent() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_independent"]], "as_independent() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_independent"]], "as_independent() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_independent"]], "as_leading_term() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_leading_term"]], "as_leading_term() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_leading_term"]], "as_leading_term() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_leading_term"]], "as_numer_denom() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_numer_denom"]], "as_numer_denom() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_numer_denom"]], "as_numer_denom() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_numer_denom"]], "as_ordered_factors() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_ordered_factors"]], "as_ordered_factors() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_ordered_factors"]], "as_ordered_factors() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_ordered_factors"]], "as_ordered_terms() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_ordered_terms"]], "as_ordered_terms() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_ordered_terms"]], "as_ordered_terms() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_ordered_terms"]], "as_poly() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_poly"]], "as_poly() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_poly"]], "as_poly() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_poly"]], "as_powers_dict() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_powers_dict"]], "as_powers_dict() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_powers_dict"]], "as_powers_dict() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_powers_dict"]], "as_real_imag() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_real_imag"]], "as_real_imag() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_real_imag"]], "as_real_imag() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_real_imag"]], "as_set() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_set"]], "as_set() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_set"]], "as_set() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_set"]], "as_terms() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.as_terms"]], "as_terms() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.as_terms"]], "as_terms() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.as_terms"]], "aseries() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.aseries"]], "aseries() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.aseries"]], "aseries() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.aseries"]], "assumptions0 (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.assumptions0"]], "assumptions0 (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.assumptions0"]], "assumptions0 (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.assumptions0"]], "atoms() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.atoms"]], "atoms() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.atoms"]], "atoms() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.atoms"]], "binary_symbols (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.binary_symbols"]], "binary_symbols (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.binary_symbols"]], "binary_symbols (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.binary_symbols"]], "cancel() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.cancel"]], "cancel() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.cancel"]], "cancel() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.cancel"]], "canonical_variables (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.canonical_variables"]], "canonical_variables (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.canonical_variables"]], "canonical_variables (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.canonical_variables"]], "class_key() (nipy.algorithms.statistics.formula.formulae.beta class method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.class_key"]], "class_key() (nipy.algorithms.statistics.formula.formulae.factorterm class method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.class_key"]], "class_key() (nipy.algorithms.statistics.formula.formulae.term class method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.class_key"]], "coeff() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.coeff"]], "coeff() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.coeff"]], "coeff() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.coeff"]], "coefs (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.coefs"]], "coefs (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.coefs"]], "coefs (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.coefs"]], "collect() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.collect"]], "collect() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.collect"]], "collect() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.collect"]], "combsimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.combsimp"]], "combsimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.combsimp"]], "combsimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.combsimp"]], "compare() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.compare"]], "compare() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.compare"]], "compare() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.compare"]], "compute_leading_term() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.compute_leading_term"]], "compute_leading_term() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.compute_leading_term"]], "compute_leading_term() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.compute_leading_term"]], "conjugate() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.conjugate"]], "conjugate() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.conjugate"]], "conjugate() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.conjugate"]], "contrast_from_cols_or_rows() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.contrast_from_cols_or_rows"]], "copy() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.copy"]], "copy() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.copy"]], "copy() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.copy"]], "could_extract_minus_sign() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.could_extract_minus_sign"]], "could_extract_minus_sign() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.could_extract_minus_sign"]], "could_extract_minus_sign() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.could_extract_minus_sign"]], "count() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.count"]], "count() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.count"]], "count() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.count"]], "count_ops() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.count_ops"]], "count_ops() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.count_ops"]], "count_ops() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.count_ops"]], "cov() (nipy.algorithms.statistics.formula.formulae.randomeffects method)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.cov"]], "default_assumptions (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.default_assumptions"]], "default_assumptions (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.default_assumptions"]], "default_assumptions (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.default_assumptions"]], "define() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.define"]], "design() (nipy.algorithms.statistics.formula.formulae.factor method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.design"]], "design() (nipy.algorithms.statistics.formula.formulae.formula method)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.design"]], "design() (nipy.algorithms.statistics.formula.formulae.randomeffects method)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.design"]], "design_expr (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.design_expr"]], "design_expr (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.design_expr"]], "design_expr (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.design_expr"]], "diff() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.diff"]], "diff() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.diff"]], "diff() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.diff"]], "dir() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.dir"]], "dir() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.dir"]], "dir() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.dir"]], "doit() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.doit"]], "doit() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.doit"]], "doit() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.doit"]], "dtype (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.dtype"]], "dtype (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.dtype"]], "dtype (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.dtype"]], "dummy_eq() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.dummy_eq"]], "dummy_eq() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.dummy_eq"]], "dummy_eq() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.dummy_eq"]], "dummy_index (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.dummy_index"]], "equals() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.equals"]], "equals() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.equals"]], "equals() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.equals"]], "evalf() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.evalf"]], "evalf() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.evalf"]], "evalf() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.evalf"]], "expand() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.expand"]], "expand() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.expand"]], "expand() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.expand"]], "expr_free_symbols (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.expr_free_symbols"]], "expr_free_symbols (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.expr_free_symbols"]], "expr_free_symbols (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.expr_free_symbols"]], "extract_additively() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.extract_additively"]], "extract_additively() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.extract_additively"]], "extract_additively() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.extract_additively"]], "extract_branch_factor() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.extract_branch_factor"]], "extract_branch_factor() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.extract_branch_factor"]], "extract_branch_factor() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.extract_branch_factor"]], "extract_multiplicatively() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.extract_multiplicatively"]], "extract_multiplicatively() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.extract_multiplicatively"]], "extract_multiplicatively() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.extract_multiplicatively"]], "factor() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.factor"]], "factor() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.factor"]], "factor() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.factor"]], "find() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.find"]], "find() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.find"]], "find() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.find"]], "formula (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.formula"]], "formula (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.formula"]], "fourier_series() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.fourier_series"]], "fourier_series() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.fourier_series"]], "fourier_series() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.fourier_series"]], "fps() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.fps"]], "fps() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.fps"]], "fps() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.fps"]], "free_symbols (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.free_symbols"]], "free_symbols (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.free_symbols"]], "free_symbols (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.free_symbols"]], "fromcol() (nipy.algorithms.statistics.formula.formulae.factor static method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.fromcol"]], "fromiter() (nipy.algorithms.statistics.formula.formulae.beta class method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.fromiter"]], "fromiter() (nipy.algorithms.statistics.formula.formulae.factorterm class method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.fromiter"]], "fromiter() (nipy.algorithms.statistics.formula.formulae.term class method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.fromiter"]], "fromrec() (nipy.algorithms.statistics.formula.formulae.factor static method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.fromrec"]], "fromrec() (nipy.algorithms.statistics.formula.formulae.formula static method)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.fromrec"]], "fromrec() (nipy.algorithms.statistics.formula.formulae.randomeffects static method)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.fromrec"]], "func (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.func"]], "func (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.func"]], "func (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.func"]], "gammasimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.gammasimp"]], "gammasimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.gammasimp"]], "gammasimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.gammasimp"]], "geto() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.getO"]], "geto() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.getO"]], "geto() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.getO"]], "get_term() (nipy.algorithms.statistics.formula.formulae.factor method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.get_term"]], "getn() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.getn"]], "getn() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.getn"]], "getn() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.getn"]], "getparams() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.getparams"]], "getterms() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.getterms"]], "has() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.has"]], "has() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.has"]], "has() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.has"]], "has_free() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.has_free"]], "has_free() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.has_free"]], "has_free() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.has_free"]], "has_xfree() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.has_xfree"]], "has_xfree() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.has_xfree"]], "has_xfree() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.has_xfree"]], "integrate() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.integrate"]], "integrate() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.integrate"]], "integrate() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.integrate"]], "invert() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.invert"]], "invert() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.invert"]], "invert() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.invert"]], "is_add (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Add"]], "is_add (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Add"]], "is_add (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Add"]], "is_algebraicnumber (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_AlgebraicNumber"]], "is_algebraicnumber (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_AlgebraicNumber"]], "is_algebraicnumber (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_AlgebraicNumber"]], "is_atom (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Atom"]], "is_atom (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Atom"]], "is_atom (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Atom"]], "is_boolean (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Boolean"]], "is_boolean (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Boolean"]], "is_boolean (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Boolean"]], "is_derivative (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Derivative"]], "is_derivative (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Derivative"]], "is_derivative (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Derivative"]], "is_dummy (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Dummy"]], "is_dummy (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Dummy"]], "is_dummy (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Dummy"]], "is_equality (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Equality"]], "is_equality (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Equality"]], "is_equality (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Equality"]], "is_float (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Float"]], "is_float (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Float"]], "is_float (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Float"]], "is_function (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Function"]], "is_function (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Function"]], "is_function (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Function"]], "is_indexed (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Indexed"]], "is_indexed (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Indexed"]], "is_indexed (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Indexed"]], "is_integer (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Integer"]], "is_integer (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Integer"]], "is_integer (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Integer"]], "is_matadd (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_MatAdd"]], "is_matadd (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_MatAdd"]], "is_matadd (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_MatAdd"]], "is_matmul (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_MatMul"]], "is_matmul (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_MatMul"]], "is_matmul (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_MatMul"]], "is_matrix (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Matrix"]], "is_matrix (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Matrix"]], "is_matrix (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Matrix"]], "is_mul (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Mul"]], "is_mul (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Mul"]], "is_mul (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Mul"]], "is_not (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Not"]], "is_not (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Not"]], "is_not (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Not"]], "is_number (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Number"], [39, "nipy.algorithms.statistics.formula.formulae.Beta.is_number"]], "is_number (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Number"], [39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_number"]], "is_number (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Number"], [39, "nipy.algorithms.statistics.formula.formulae.Term.is_number"]], "is_numbersymbol (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_NumberSymbol"]], "is_numbersymbol (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_NumberSymbol"]], "is_numbersymbol (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_NumberSymbol"]], "is_order (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Order"]], "is_order (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Order"]], "is_order (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Order"]], "is_piecewise (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Piecewise"]], "is_piecewise (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Piecewise"]], "is_piecewise (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Piecewise"]], "is_point (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Point"]], "is_point (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Point"]], "is_point (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Point"]], "is_poly (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Poly"]], "is_poly (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Poly"]], "is_poly (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Poly"]], "is_pow (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Pow"]], "is_pow (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Pow"]], "is_pow (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Pow"]], "is_rational (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Rational"]], "is_rational (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Rational"]], "is_rational (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Rational"]], "is_relational (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Relational"]], "is_relational (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Relational"]], "is_relational (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Relational"]], "is_symbol (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Symbol"], [39, "nipy.algorithms.statistics.formula.formulae.Beta.is_symbol"]], "is_symbol (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Symbol"], [39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_symbol"]], "is_symbol (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Symbol"], [39, "nipy.algorithms.statistics.formula.formulae.Term.is_symbol"]], "is_vector (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Vector"]], "is_vector (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Vector"]], "is_vector (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Vector"]], "is_wild (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_Wild"]], "is_wild (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_Wild"]], "is_wild (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_Wild"]], "is_algebraic (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_algebraic"]], "is_algebraic (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_algebraic"]], "is_algebraic (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_algebraic"]], "is_algebraic_expr() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_algebraic_expr"]], "is_algebraic_expr() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_algebraic_expr"]], "is_algebraic_expr() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_algebraic_expr"]], "is_antihermitian (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_antihermitian"]], "is_antihermitian (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_antihermitian"]], "is_antihermitian (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_antihermitian"]], "is_commutative (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_commutative"]], "is_commutative (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_commutative"]], "is_commutative (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_commutative"]], "is_comparable (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_comparable"]], "is_comparable (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_comparable"]], "is_comparable (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_comparable"]], "is_complex (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_complex"]], "is_complex (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_complex"]], "is_complex (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_complex"]], "is_composite (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_composite"]], "is_composite (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_composite"]], "is_composite (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_composite"]], "is_constant() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_constant"]], "is_constant() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_constant"]], "is_constant() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_constant"]], "is_even (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_even"]], "is_even (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_even"]], "is_even (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_even"]], "is_extended_negative (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_negative"]], "is_extended_negative (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_negative"]], "is_extended_negative (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_negative"]], "is_extended_nonnegative (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_nonnegative"]], "is_extended_nonnegative (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_nonnegative"]], "is_extended_nonnegative (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_nonnegative"]], "is_extended_nonpositive (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_nonpositive"]], "is_extended_nonpositive (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_nonpositive"]], "is_extended_nonpositive (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_nonpositive"]], "is_extended_nonzero (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_nonzero"]], "is_extended_nonzero (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_nonzero"]], "is_extended_nonzero (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_nonzero"]], "is_extended_positive (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_positive"]], "is_extended_positive (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_positive"]], "is_extended_positive (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_positive"]], "is_extended_real (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_extended_real"]], "is_extended_real (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_extended_real"]], "is_extended_real (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_extended_real"]], "is_factor() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.is_factor"]], "is_factor_term() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.is_factor_term"]], "is_finite (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_finite"]], "is_finite (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_finite"]], "is_finite (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_finite"]], "is_formula() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.is_formula"]], "is_hermitian (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_hermitian"]], "is_hermitian (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_hermitian"]], "is_hermitian (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_hermitian"]], "is_hypergeometric() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_hypergeometric"]], "is_hypergeometric() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_hypergeometric"]], "is_hypergeometric() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_hypergeometric"]], "is_imaginary (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_imaginary"]], "is_imaginary (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_imaginary"]], "is_imaginary (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_imaginary"]], "is_infinite (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_infinite"]], "is_infinite (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_infinite"]], "is_infinite (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_infinite"]], "is_integer (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_integer"]], "is_integer (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_integer"]], "is_integer (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_integer"]], "is_irrational (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_irrational"]], "is_irrational (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_irrational"]], "is_irrational (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_irrational"]], "is_meromorphic() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_meromorphic"]], "is_meromorphic() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_meromorphic"]], "is_meromorphic() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_meromorphic"]], "is_negative (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_negative"]], "is_negative (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_negative"]], "is_negative (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_negative"]], "is_noninteger (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_noninteger"]], "is_noninteger (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_noninteger"]], "is_noninteger (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_noninteger"]], "is_nonnegative (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_nonnegative"]], "is_nonnegative (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_nonnegative"]], "is_nonnegative (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_nonnegative"]], "is_nonpositive (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_nonpositive"]], "is_nonpositive (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_nonpositive"]], "is_nonpositive (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_nonpositive"]], "is_nonzero (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_nonzero"]], "is_nonzero (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_nonzero"]], "is_nonzero (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_nonzero"]], "is_odd (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_odd"]], "is_odd (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_odd"]], "is_odd (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_odd"]], "is_polar (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_polar"]], "is_polar (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_polar"]], "is_polar (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_polar"]], "is_polynomial() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_polynomial"]], "is_polynomial() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_polynomial"]], "is_polynomial() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_polynomial"]], "is_positive (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_positive"]], "is_positive (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_positive"]], "is_positive (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_positive"]], "is_prime (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_prime"]], "is_prime (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_prime"]], "is_prime (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_prime"]], "is_rational (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_rational"]], "is_rational (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_rational"]], "is_rational (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_rational"]], "is_rational_function() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_rational_function"]], "is_rational_function() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_rational_function"]], "is_rational_function() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_rational_function"]], "is_real (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_real"]], "is_real (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_real"]], "is_real (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_real"]], "is_scalar (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_scalar"]], "is_scalar (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_scalar"]], "is_scalar (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_scalar"]], "is_term() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.is_term"]], "is_transcendental (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_transcendental"]], "is_transcendental (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_transcendental"]], "is_transcendental (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_transcendental"]], "is_zero (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.is_zero"]], "is_zero (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.is_zero"]], "is_zero (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.is_zero"]], "kind (nipy.algorithms.statistics.formula.formulae.beta property)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.kind"]], "kind (nipy.algorithms.statistics.formula.formulae.factorterm property)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.kind"]], "kind (nipy.algorithms.statistics.formula.formulae.term property)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.kind"]], "leadterm() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.leadterm"]], "leadterm() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.leadterm"]], "leadterm() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.leadterm"]], "limit() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.limit"]], "limit() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.limit"]], "limit() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.limit"]], "lseries() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.lseries"]], "lseries() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.lseries"]], "lseries() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.lseries"]], "main_effect (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.main_effect"]], "make_dummy() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.make_dummy"]], "make_recarray() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.make_recarray"]], "match() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.match"]], "match() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.match"]], "match() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.match"]], "matches() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.matches"]], "matches() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.matches"]], "matches() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.matches"]], "mean (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.mean"]], "mean (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.mean"]], "mean (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.mean"]], "n() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.n"]], "n() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.n"]], "n() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.n"]], "name (nipy.algorithms.statistics.formula.formulae.beta attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.name"]], "name (nipy.algorithms.statistics.formula.formulae.factorterm attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.name"]], "name (nipy.algorithms.statistics.formula.formulae.term attribute)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.name"]], "natural_spline() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.natural_spline"]], "nipy.algorithms.statistics.formula.formulae": [[39, "module-nipy.algorithms.statistics.formula.formulae"]], "normal() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.normal"]], "normal() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.normal"]], "normal() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.normal"]], "nseries() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.nseries"]], "nseries() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.nseries"]], "nseries() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.nseries"]], "nsimplify() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.nsimplify"]], "nsimplify() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.nsimplify"]], "nsimplify() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.nsimplify"]], "params (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.params"]], "params (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.params"]], "params (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.params"]], "powsimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.powsimp"]], "powsimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.powsimp"]], "powsimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.powsimp"]], "primitive() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.primitive"]], "primitive() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.primitive"]], "primitive() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.primitive"]], "radsimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.radsimp"]], "radsimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.radsimp"]], "radsimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.radsimp"]], "ratsimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.ratsimp"]], "ratsimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.ratsimp"]], "ratsimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.ratsimp"]], "rcall() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.rcall"]], "rcall() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.rcall"]], "rcall() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.rcall"]], "refine() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.refine"]], "refine() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.refine"]], "refine() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.refine"]], "removeo() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.removeO"]], "removeo() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.removeO"]], "removeo() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.removeO"]], "replace() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.replace"]], "replace() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.replace"]], "replace() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.replace"]], "rewrite() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.rewrite"]], "rewrite() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.rewrite"]], "rewrite() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.rewrite"]], "round() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.round"]], "round() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.round"]], "round() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.round"]], "separate() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.separate"]], "separate() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.separate"]], "separate() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.separate"]], "series() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.series"]], "series() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.series"]], "series() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.series"]], "simplify() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.simplify"]], "simplify() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.simplify"]], "simplify() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.simplify"]], "sort_key() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.sort_key"]], "sort_key() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.sort_key"]], "sort_key() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.sort_key"]], "stratify() (nipy.algorithms.statistics.formula.formulae.factor method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.stratify"]], "subs() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.subs"]], "subs() (nipy.algorithms.statistics.formula.formulae.factor method)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.subs"]], "subs() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.subs"]], "subs() (nipy.algorithms.statistics.formula.formulae.formula method)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.subs"]], "subs() (nipy.algorithms.statistics.formula.formulae.randomeffects method)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.subs"]], "subs() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.subs"]], "taylor_term() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.taylor_term"]], "taylor_term() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.taylor_term"]], "taylor_term() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.taylor_term"]], "terms (nipy.algorithms.statistics.formula.formulae.factor property)": [[39, "nipy.algorithms.statistics.formula.formulae.Factor.terms"]], "terms (nipy.algorithms.statistics.formula.formulae.formula property)": [[39, "nipy.algorithms.statistics.formula.formulae.Formula.terms"]], "terms (nipy.algorithms.statistics.formula.formulae.randomeffects property)": [[39, "nipy.algorithms.statistics.formula.formulae.RandomEffects.terms"]], "terms() (in module nipy.algorithms.statistics.formula.formulae)": [[39, "nipy.algorithms.statistics.formula.formulae.terms"]], "to_nnf() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.to_nnf"]], "to_nnf() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.to_nnf"]], "to_nnf() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.to_nnf"]], "together() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.together"]], "together() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.together"]], "together() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.together"]], "transpose() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.transpose"]], "transpose() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.transpose"]], "transpose() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.transpose"]], "trigsimp() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.trigsimp"]], "trigsimp() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.trigsimp"]], "trigsimp() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.trigsimp"]], "xreplace() (nipy.algorithms.statistics.formula.formulae.beta method)": [[39, "nipy.algorithms.statistics.formula.formulae.Beta.xreplace"]], "xreplace() (nipy.algorithms.statistics.formula.formulae.factorterm method)": [[39, "nipy.algorithms.statistics.formula.formulae.FactorTerm.xreplace"]], "xreplace() (nipy.algorithms.statistics.formula.formulae.term method)": [[39, "nipy.algorithms.statistics.formula.formulae.Term.xreplace"]], "mixedeffectsmodel (class in nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel"]], "__init__() (nipy.algorithms.statistics.mixed_effects_stat.mixedeffectsmodel method)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel.__init__"]], "check_arrays() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.check_arrays"]], "fit() (nipy.algorithms.statistics.mixed_effects_stat.mixedeffectsmodel method)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel.fit"]], "generate_data() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.generate_data"]], "log_like() (nipy.algorithms.statistics.mixed_effects_stat.mixedeffectsmodel method)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel.log_like"]], "mfx_stat() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.mfx_stat"]], "nipy.algorithms.statistics.mixed_effects_stat": [[40, "module-nipy.algorithms.statistics.mixed_effects_stat"]], "one_sample_ftest() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.one_sample_ftest"]], "one_sample_ttest() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.one_sample_ttest"]], "predict() (nipy.algorithms.statistics.mixed_effects_stat.mixedeffectsmodel method)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel.predict"]], "score() (nipy.algorithms.statistics.mixed_effects_stat.mixedeffectsmodel method)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.MixedEffectsModel.score"]], "t_stat() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.t_stat"]], "two_sample_ftest() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.two_sample_ftest"]], "two_sample_ttest() (in module nipy.algorithms.statistics.mixed_effects_stat)": [[40, "nipy.algorithms.statistics.mixed_effects_stat.two_sample_ttest"]], "binomial (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial"]], "family (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.Family"]], "gamma (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma"]], "gaussian (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian"]], "inversegaussian (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian"]], "poisson (class in nipy.algorithms.statistics.models.family.family)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson"]], "__init__() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.__init__"]], "deviance() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.deviance"]], "deviance() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.deviance"]], "deviance() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.deviance"]], "deviance() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.deviance"]], "deviance() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.deviance"]], "deviance() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.deviance"]], "devresid() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.devresid"]], "devresid() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.devresid"]], "devresid() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.devresid"]], "devresid() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.devresid"]], "devresid() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.devresid"]], "devresid() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.devresid"]], "fitted() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.fitted"]], "fitted() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.fitted"]], "fitted() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.fitted"]], "fitted() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.fitted"]], "fitted() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.fitted"]], "fitted() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.fitted"]], "link (nipy.algorithms.statistics.models.family.family.binomial property)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.link"]], "link (nipy.algorithms.statistics.models.family.family.family property)": [[41, "nipy.algorithms.statistics.models.family.family.Family.link"]], "link (nipy.algorithms.statistics.models.family.family.gamma property)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.link"]], "link (nipy.algorithms.statistics.models.family.family.gaussian property)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.link"]], "link (nipy.algorithms.statistics.models.family.family.inversegaussian property)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.link"]], "link (nipy.algorithms.statistics.models.family.family.poisson property)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.link"]], "links (nipy.algorithms.statistics.models.family.family.binomial attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.links"]], "links (nipy.algorithms.statistics.models.family.family.family attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Family.links"]], "links (nipy.algorithms.statistics.models.family.family.gamma attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.links"]], "links (nipy.algorithms.statistics.models.family.family.gaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.links"]], "links (nipy.algorithms.statistics.models.family.family.inversegaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.links"]], "links (nipy.algorithms.statistics.models.family.family.poisson attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.links"]], "nipy.algorithms.statistics.models.family.family": [[41, "module-nipy.algorithms.statistics.models.family.family"]], "predict() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.predict"]], "predict() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.predict"]], "predict() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.predict"]], "predict() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.predict"]], "predict() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.predict"]], "predict() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.predict"]], "tol (nipy.algorithms.statistics.models.family.family.binomial attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.tol"]], "tol (nipy.algorithms.statistics.models.family.family.family attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Family.tol"]], "tol (nipy.algorithms.statistics.models.family.family.gamma attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.tol"]], "tol (nipy.algorithms.statistics.models.family.family.gaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.tol"]], "tol (nipy.algorithms.statistics.models.family.family.inversegaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.tol"]], "tol (nipy.algorithms.statistics.models.family.family.poisson attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.tol"]], "valid (nipy.algorithms.statistics.models.family.family.binomial attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.valid"]], "valid (nipy.algorithms.statistics.models.family.family.family attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Family.valid"]], "valid (nipy.algorithms.statistics.models.family.family.gamma attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.valid"]], "valid (nipy.algorithms.statistics.models.family.family.gaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.valid"]], "valid (nipy.algorithms.statistics.models.family.family.inversegaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.valid"]], "valid (nipy.algorithms.statistics.models.family.family.poisson attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.valid"]], "variance (nipy.algorithms.statistics.models.family.family.binomial attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.variance"]], "variance (nipy.algorithms.statistics.models.family.family.gamma attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.variance"]], "variance (nipy.algorithms.statistics.models.family.family.gaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.variance"]], "variance (nipy.algorithms.statistics.models.family.family.inversegaussian attribute)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.variance"]], "variance (nipy.algorithms.statistics.models.family.family.poisson attribute)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.variance"]], "weights() (nipy.algorithms.statistics.models.family.family.binomial method)": [[41, "nipy.algorithms.statistics.models.family.family.Binomial.weights"]], "weights() (nipy.algorithms.statistics.models.family.family.family method)": [[41, "nipy.algorithms.statistics.models.family.family.Family.weights"]], "weights() (nipy.algorithms.statistics.models.family.family.gamma method)": [[41, "nipy.algorithms.statistics.models.family.family.Gamma.weights"]], "weights() (nipy.algorithms.statistics.models.family.family.gaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.Gaussian.weights"]], "weights() (nipy.algorithms.statistics.models.family.family.inversegaussian method)": [[41, "nipy.algorithms.statistics.models.family.family.InverseGaussian.weights"]], "weights() (nipy.algorithms.statistics.models.family.family.poisson method)": [[41, "nipy.algorithms.statistics.models.family.family.Poisson.weights"]], "cdflink (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink"]], "cloglog (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog"]], "link (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.Link"]], "log (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.Log"]], "logit (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.Logit"]], "power (class in nipy.algorithms.statistics.models.family.links)": [[42, "nipy.algorithms.statistics.models.family.links.Power"]], "__init__() (nipy.algorithms.statistics.models.family.links.cdflink method)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.links.cloglog method)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.links.link method)": [[42, "nipy.algorithms.statistics.models.family.links.Link.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.links.log method)": [[42, "nipy.algorithms.statistics.models.family.links.Log.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.links.logit method)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.links.power method)": [[42, "nipy.algorithms.statistics.models.family.links.Power.__init__"]], "clean() (nipy.algorithms.statistics.models.family.links.cdflink method)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.clean"]], "clean() (nipy.algorithms.statistics.models.family.links.cloglog method)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.clean"]], "clean() (nipy.algorithms.statistics.models.family.links.log method)": [[42, "nipy.algorithms.statistics.models.family.links.Log.clean"]], "clean() (nipy.algorithms.statistics.models.family.links.logit method)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.clean"]], "deriv() (nipy.algorithms.statistics.models.family.links.cdflink method)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.deriv"]], "deriv() (nipy.algorithms.statistics.models.family.links.cloglog method)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.deriv"]], "deriv() (nipy.algorithms.statistics.models.family.links.link method)": [[42, "nipy.algorithms.statistics.models.family.links.Link.deriv"]], "deriv() (nipy.algorithms.statistics.models.family.links.log method)": [[42, "nipy.algorithms.statistics.models.family.links.Log.deriv"]], "deriv() (nipy.algorithms.statistics.models.family.links.logit method)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.deriv"]], "deriv() (nipy.algorithms.statistics.models.family.links.power method)": [[42, "nipy.algorithms.statistics.models.family.links.Power.deriv"]], "initialize() (nipy.algorithms.statistics.models.family.links.cdflink method)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.initialize"]], "initialize() (nipy.algorithms.statistics.models.family.links.cloglog method)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.initialize"]], "initialize() (nipy.algorithms.statistics.models.family.links.link method)": [[42, "nipy.algorithms.statistics.models.family.links.Link.initialize"]], "initialize() (nipy.algorithms.statistics.models.family.links.log method)": [[42, "nipy.algorithms.statistics.models.family.links.Log.initialize"]], "initialize() (nipy.algorithms.statistics.models.family.links.logit method)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.initialize"]], "initialize() (nipy.algorithms.statistics.models.family.links.power method)": [[42, "nipy.algorithms.statistics.models.family.links.Power.initialize"]], "inverse() (nipy.algorithms.statistics.models.family.links.cdflink method)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.inverse"]], "inverse() (nipy.algorithms.statistics.models.family.links.cloglog method)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.inverse"]], "inverse() (nipy.algorithms.statistics.models.family.links.link method)": [[42, "nipy.algorithms.statistics.models.family.links.Link.inverse"]], "inverse() (nipy.algorithms.statistics.models.family.links.log method)": [[42, "nipy.algorithms.statistics.models.family.links.Log.inverse"]], "inverse() (nipy.algorithms.statistics.models.family.links.logit method)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.inverse"]], "inverse() (nipy.algorithms.statistics.models.family.links.power method)": [[42, "nipy.algorithms.statistics.models.family.links.Power.inverse"]], "nipy.algorithms.statistics.models.family.links": [[42, "module-nipy.algorithms.statistics.models.family.links"]], "tol (nipy.algorithms.statistics.models.family.links.cdflink attribute)": [[42, "nipy.algorithms.statistics.models.family.links.CDFLink.tol"]], "tol (nipy.algorithms.statistics.models.family.links.cloglog attribute)": [[42, "nipy.algorithms.statistics.models.family.links.CLogLog.tol"]], "tol (nipy.algorithms.statistics.models.family.links.log attribute)": [[42, "nipy.algorithms.statistics.models.family.links.Log.tol"]], "tol (nipy.algorithms.statistics.models.family.links.logit attribute)": [[42, "nipy.algorithms.statistics.models.family.links.Logit.tol"]], "binomial (class in nipy.algorithms.statistics.models.family.varfuncs)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Binomial"]], "power (class in nipy.algorithms.statistics.models.family.varfuncs)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Power"]], "variancefunction (class in nipy.algorithms.statistics.models.family.varfuncs)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.VarianceFunction"]], "__init__() (nipy.algorithms.statistics.models.family.varfuncs.binomial method)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Binomial.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.varfuncs.power method)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Power.__init__"]], "__init__() (nipy.algorithms.statistics.models.family.varfuncs.variancefunction method)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.VarianceFunction.__init__"]], "clean() (nipy.algorithms.statistics.models.family.varfuncs.binomial method)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Binomial.clean"]], "nipy.algorithms.statistics.models.family.varfuncs": [[43, "module-nipy.algorithms.statistics.models.family.varfuncs"]], "tol (nipy.algorithms.statistics.models.family.varfuncs.binomial attribute)": [[43, "nipy.algorithms.statistics.models.family.varfuncs.Binomial.tol"]], "model (class in nipy.algorithms.statistics.models.glm)": [[44, "nipy.algorithms.statistics.models.glm.Model"]], "__init__() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.__init__"]], "cont() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.cont"]], "deviance() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.deviance"]], "estimate_scale() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.estimate_scale"]], "fit() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.fit"]], "has_intercept() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.has_intercept"]], "information() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.information"]], "initialize() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.initialize"]], "logl() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.logL"]], "nipy.algorithms.statistics.models.glm": [[44, "module-nipy.algorithms.statistics.models.glm"]], "niter (nipy.algorithms.statistics.models.glm.model attribute)": [[44, "nipy.algorithms.statistics.models.glm.Model.niter"]], "predict() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.predict"]], "rank() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.rank"]], "score() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.score"]], "whiten() (nipy.algorithms.statistics.models.glm.model method)": [[44, "nipy.algorithms.statistics.models.glm.Model.whiten"]], "aic() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.AIC"]], "bic() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.BIC"]], "fcontrastresults (class in nipy.algorithms.statistics.models.model)": [[45, "nipy.algorithms.statistics.models.model.FContrastResults"]], "fcontrast() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.Fcontrast"]], "likelihoodmodel (class in nipy.algorithms.statistics.models.model)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel"]], "likelihoodmodelresults (class in nipy.algorithms.statistics.models.model)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults"]], "model (class in nipy.algorithms.statistics.models.model)": [[45, "nipy.algorithms.statistics.models.model.Model"]], "tcontrastresults (class in nipy.algorithms.statistics.models.model)": [[45, "nipy.algorithms.statistics.models.model.TContrastResults"]], "tcontrast() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.Tcontrast"]], "__init__() (nipy.algorithms.statistics.models.model.fcontrastresults method)": [[45, "nipy.algorithms.statistics.models.model.FContrastResults.__init__"]], "__init__() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.__init__"]], "__init__() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.__init__"]], "__init__() (nipy.algorithms.statistics.models.model.model method)": [[45, "nipy.algorithms.statistics.models.model.Model.__init__"]], "__init__() (nipy.algorithms.statistics.models.model.tcontrastresults method)": [[45, "nipy.algorithms.statistics.models.model.TContrastResults.__init__"]], "conf_int() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.conf_int"]], "fit() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.fit"]], "fit() (nipy.algorithms.statistics.models.model.model method)": [[45, "nipy.algorithms.statistics.models.model.Model.fit"]], "information() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.information"]], "initialize() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.initialize"]], "initialize() (nipy.algorithms.statistics.models.model.model method)": [[45, "nipy.algorithms.statistics.models.model.Model.initialize"]], "logl() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.logL"]], "logl() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.logL"]], "nipy.algorithms.statistics.models.model": [[45, "module-nipy.algorithms.statistics.models.model"]], "predict() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.predict"]], "predict() (nipy.algorithms.statistics.models.model.model method)": [[45, "nipy.algorithms.statistics.models.model.Model.predict"]], "score() (nipy.algorithms.statistics.models.model.likelihoodmodel method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModel.score"]], "t() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.t"]], "vcov() (nipy.algorithms.statistics.models.model.likelihoodmodelresults method)": [[45, "nipy.algorithms.statistics.models.model.LikelihoodModelResults.vcov"]], "nlsmodel (class in nipy.algorithms.statistics.models.nlsmodel)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel"]], "sse() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.SSE"]], "__init__() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.__init__"]], "fit() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.fit"]], "getz() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.getZ"]], "getomega() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.getomega"]], "initialize() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.initialize"]], "nipy.algorithms.statistics.models.nlsmodel": [[46, "module-nipy.algorithms.statistics.models.nlsmodel"]], "predict() (nipy.algorithms.statistics.models.nlsmodel.nlsmodel method)": [[46, "nipy.algorithms.statistics.models.nlsmodel.NLSModel.predict"]], "aic() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.AIC"]], "arestimator (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.AREstimator"]], "armodel (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.ARModel"]], "bic() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.BIC"]], "f_overall() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.F_overall"]], "fcontrast() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.Fcontrast"]], "glsmodel (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel"]], "mse() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.MSE"]], "msr() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.MSR"]], "mst() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.MST"]], "olsmodel (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel"]], "r2() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.R2"]], "r2_adj() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.R2_adj"]], "regressionresults (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults"]], "sse() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.SSE"]], "ssr() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.SSR"]], "sst() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.SST"]], "tcontrast() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.Tcontrast"]], "wlsmodel (class in nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel"]], "__init__() (nipy.algorithms.statistics.models.regression.arestimator method)": [[47, "nipy.algorithms.statistics.models.regression.AREstimator.__init__"]], "__init__() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.__init__"]], "__init__() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.__init__"]], "__init__() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.__init__"]], "__init__() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.__init__"]], "__init__() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.__init__"]], "ar_bias_correct() (in module nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.ar_bias_correct"]], "ar_bias_corrector() (in module nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.ar_bias_corrector"]], "conf_int() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.conf_int"]], "fit() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.fit"]], "fit() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.fit"]], "fit() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.fit"]], "fit() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.fit"]], "has_intercept() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.has_intercept"]], "has_intercept() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.has_intercept"]], "has_intercept() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.has_intercept"]], "has_intercept() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.has_intercept"]], "information() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.information"]], "information() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.information"]], "information() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.information"]], "information() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.information"]], "initialize() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.initialize"]], "initialize() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.initialize"]], "initialize() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.initialize"]], "initialize() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.initialize"]], "isestimable() (in module nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.isestimable"]], "iterative_fit() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.iterative_fit"]], "logl() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.logL"]], "logl() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.logL"]], "logl() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.logL"]], "logl() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.logL"]], "logl() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.logL"]], "nipy.algorithms.statistics.models.regression": [[47, "module-nipy.algorithms.statistics.models.regression"]], "norm_resid() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.norm_resid"]], "predict() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.predict"]], "predict() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.predict"]], "predict() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.predict"]], "predict() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.predict"]], "predicted() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.predicted"]], "rank() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.rank"]], "rank() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.rank"]], "rank() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.rank"]], "rank() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.rank"]], "resid() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.resid"]], "score() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.score"]], "score() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.score"]], "score() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.score"]], "score() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.score"]], "t() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.t"]], "vcov() (nipy.algorithms.statistics.models.regression.regressionresults method)": [[47, "nipy.algorithms.statistics.models.regression.RegressionResults.vcov"]], "whiten() (nipy.algorithms.statistics.models.regression.armodel method)": [[47, "nipy.algorithms.statistics.models.regression.ARModel.whiten"]], "whiten() (nipy.algorithms.statistics.models.regression.glsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.GLSModel.whiten"]], "whiten() (nipy.algorithms.statistics.models.regression.olsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.OLSModel.whiten"]], "whiten() (nipy.algorithms.statistics.models.regression.wlsmodel method)": [[47, "nipy.algorithms.statistics.models.regression.WLSModel.whiten"]], "yule_walker() (in module nipy.algorithms.statistics.models.regression)": [[47, "nipy.algorithms.statistics.models.regression.yule_walker"]], "ecdf() (in module nipy.algorithms.statistics.models.utils)": [[48, "nipy.algorithms.statistics.models.utils.ECDF"]], "stepfunction (class in nipy.algorithms.statistics.models.utils)": [[48, "nipy.algorithms.statistics.models.utils.StepFunction"]], "__init__() (nipy.algorithms.statistics.models.utils.stepfunction method)": [[48, "nipy.algorithms.statistics.models.utils.StepFunction.__init__"]], "mad() (in module nipy.algorithms.statistics.models.utils)": [[48, "nipy.algorithms.statistics.models.utils.mad"]], "monotone_fn_inverter() (in module nipy.algorithms.statistics.models.utils)": [[48, "nipy.algorithms.statistics.models.utils.monotone_fn_inverter"]], "nipy.algorithms.statistics.models.utils": [[48, "module-nipy.algorithms.statistics.models.utils"]], "estimate_mean() (in module nipy.algorithms.statistics.onesample)": [[49, "nipy.algorithms.statistics.onesample.estimate_mean"]], "estimate_varatio() (in module nipy.algorithms.statistics.onesample)": [[49, "nipy.algorithms.statistics.onesample.estimate_varatio"]], "nipy.algorithms.statistics.onesample": [[49, "module-nipy.algorithms.statistics.onesample"]], "chibarsquared (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared"]], "chisquared (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.ChiSquared"]], "eccone (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.ECcone"]], "ecquasi (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.ECquasi"]], "fstat (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.FStat"]], "hotelling (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.Hotelling"]], "intrinsicvolumes (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.IntrinsicVolumes"]], "multilinearform (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm"]], "onesidedf (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.OneSidedF"]], "q() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.Q"]], "roy (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.Roy"]], "tstat (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.TStat"]], "__init__() (nipy.algorithms.statistics.rft.chibarsquared method)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared.__init__"]], "__init__() (nipy.algorithms.statistics.rft.chisquared method)": [[50, "nipy.algorithms.statistics.rft.ChiSquared.__init__"]], "__init__() (nipy.algorithms.statistics.rft.eccone method)": [[50, "nipy.algorithms.statistics.rft.ECcone.__init__"]], "__init__() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.__init__"]], "__init__() (nipy.algorithms.statistics.rft.fstat method)": [[50, "nipy.algorithms.statistics.rft.FStat.__init__"]], "__init__() (nipy.algorithms.statistics.rft.hotelling method)": [[50, "nipy.algorithms.statistics.rft.Hotelling.__init__"]], "__init__() (nipy.algorithms.statistics.rft.intrinsicvolumes method)": [[50, "nipy.algorithms.statistics.rft.IntrinsicVolumes.__init__"]], "__init__() (nipy.algorithms.statistics.rft.multilinearform method)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm.__init__"]], "__init__() (nipy.algorithms.statistics.rft.onesidedf method)": [[50, "nipy.algorithms.statistics.rft.OneSidedF.__init__"]], "__init__() (nipy.algorithms.statistics.rft.roy method)": [[50, "nipy.algorithms.statistics.rft.Roy.__init__"]], "__init__() (nipy.algorithms.statistics.rft.tstat method)": [[50, "nipy.algorithms.statistics.rft.TStat.__init__"]], "__init__() (nipy.algorithms.statistics.rft.fnsum method)": [[50, "nipy.algorithms.statistics.rft.fnsum.__init__"]], "ball_search() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.ball_search"]], "binomial() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.binomial"]], "c (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.c"]], "change_exponent() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.change_exponent"]], "coef (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.coef"]], "coefficients (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.coefficients"]], "coeffs (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.coeffs"]], "compatible() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.compatible"]], "denom_poly() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.denom_poly"]], "density() (nipy.algorithms.statistics.rft.chibarsquared method)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared.density"]], "density() (nipy.algorithms.statistics.rft.chisquared method)": [[50, "nipy.algorithms.statistics.rft.ChiSquared.density"]], "density() (nipy.algorithms.statistics.rft.eccone method)": [[50, "nipy.algorithms.statistics.rft.ECcone.density"]], "density() (nipy.algorithms.statistics.rft.fstat method)": [[50, "nipy.algorithms.statistics.rft.FStat.density"]], "density() (nipy.algorithms.statistics.rft.hotelling method)": [[50, "nipy.algorithms.statistics.rft.Hotelling.density"]], "density() (nipy.algorithms.statistics.rft.multilinearform method)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm.density"]], "density() (nipy.algorithms.statistics.rft.onesidedf method)": [[50, "nipy.algorithms.statistics.rft.OneSidedF.density"]], "density() (nipy.algorithms.statistics.rft.roy method)": [[50, "nipy.algorithms.statistics.rft.Roy.density"]], "density() (nipy.algorithms.statistics.rft.tstat method)": [[50, "nipy.algorithms.statistics.rft.TStat.density"]], "deriv() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.deriv"]], "fnsum (class in nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.fnsum"]], "integ() (nipy.algorithms.statistics.rft.chibarsquared method)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared.integ"]], "integ() (nipy.algorithms.statistics.rft.chisquared method)": [[50, "nipy.algorithms.statistics.rft.ChiSquared.integ"]], "integ() (nipy.algorithms.statistics.rft.eccone method)": [[50, "nipy.algorithms.statistics.rft.ECcone.integ"]], "integ() (nipy.algorithms.statistics.rft.ecquasi method)": [[50, "nipy.algorithms.statistics.rft.ECquasi.integ"]], "integ() (nipy.algorithms.statistics.rft.fstat method)": [[50, "nipy.algorithms.statistics.rft.FStat.integ"]], "integ() (nipy.algorithms.statistics.rft.hotelling method)": [[50, "nipy.algorithms.statistics.rft.Hotelling.integ"]], "integ() (nipy.algorithms.statistics.rft.multilinearform method)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm.integ"]], "integ() (nipy.algorithms.statistics.rft.onesidedf method)": [[50, "nipy.algorithms.statistics.rft.OneSidedF.integ"]], "integ() (nipy.algorithms.statistics.rft.roy method)": [[50, "nipy.algorithms.statistics.rft.Roy.integ"]], "integ() (nipy.algorithms.statistics.rft.tstat method)": [[50, "nipy.algorithms.statistics.rft.TStat.integ"]], "mu_ball() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.mu_ball"]], "mu_sphere() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.mu_sphere"]], "nipy.algorithms.statistics.rft": [[50, "module-nipy.algorithms.statistics.rft"]], "o (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.o"]], "order (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.order"]], "pvalue() (nipy.algorithms.statistics.rft.chibarsquared method)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.chisquared method)": [[50, "nipy.algorithms.statistics.rft.ChiSquared.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.eccone method)": [[50, "nipy.algorithms.statistics.rft.ECcone.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.fstat method)": [[50, "nipy.algorithms.statistics.rft.FStat.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.hotelling method)": [[50, "nipy.algorithms.statistics.rft.Hotelling.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.multilinearform method)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.onesidedf method)": [[50, "nipy.algorithms.statistics.rft.OneSidedF.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.roy method)": [[50, "nipy.algorithms.statistics.rft.Roy.pvalue"]], "pvalue() (nipy.algorithms.statistics.rft.tstat method)": [[50, "nipy.algorithms.statistics.rft.TStat.pvalue"]], "quasi() (nipy.algorithms.statistics.rft.chibarsquared method)": [[50, "nipy.algorithms.statistics.rft.ChiBarSquared.quasi"]], "quasi() (nipy.algorithms.statistics.rft.chisquared method)": [[50, "nipy.algorithms.statistics.rft.ChiSquared.quasi"]], "quasi() (nipy.algorithms.statistics.rft.eccone method)": [[50, "nipy.algorithms.statistics.rft.ECcone.quasi"]], "quasi() (nipy.algorithms.statistics.rft.fstat method)": [[50, "nipy.algorithms.statistics.rft.FStat.quasi"]], "quasi() (nipy.algorithms.statistics.rft.hotelling method)": [[50, "nipy.algorithms.statistics.rft.Hotelling.quasi"]], "quasi() (nipy.algorithms.statistics.rft.multilinearform method)": [[50, "nipy.algorithms.statistics.rft.MultilinearForm.quasi"]], "quasi() (nipy.algorithms.statistics.rft.onesidedf method)": [[50, "nipy.algorithms.statistics.rft.OneSidedF.quasi"]], "quasi() (nipy.algorithms.statistics.rft.roy method)": [[50, "nipy.algorithms.statistics.rft.Roy.quasi"]], "quasi() (nipy.algorithms.statistics.rft.tstat method)": [[50, "nipy.algorithms.statistics.rft.TStat.quasi"]], "r (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.r"]], "roots (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.roots"]], "scale_space() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.scale_space"]], "spherical_search() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.spherical_search"]], "variable (nipy.algorithms.statistics.rft.ecquasi property)": [[50, "nipy.algorithms.statistics.rft.ECquasi.variable"]], "volume2ball() (in module nipy.algorithms.statistics.rft)": [[50, "nipy.algorithms.statistics.rft.volume2ball"]], "check_cast_bin8() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.check_cast_bin8"]], "complex() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.complex"]], "cube_with_strides_center() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.cube_with_strides_center"]], "decompose2d() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.decompose2d"]], "decompose3d() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.decompose3d"]], "join_complexes() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.join_complexes"]], "multiple_fast_inv() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.multiple_fast_inv"]], "multiple_mahalanobis() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.multiple_mahalanobis"]], "nipy.algorithms.statistics.utils": [[51, "module-nipy.algorithms.statistics.utils"]], "test_ec2() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.test_EC2"]], "test_ec3() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.test_EC3"]], "z_score() (in module nipy.algorithms.statistics.utils)": [[51, "nipy.algorithms.statistics.utils.z_score"]], "euclidean_distance() (in module nipy.algorithms.utils.fast_distance)": [[52, "nipy.algorithms.utils.fast_distance.euclidean_distance"]], "nipy.algorithms.utils.fast_distance": [[52, "module-nipy.algorithms.utils.fast_distance"]], "full_rank() (in module nipy.algorithms.utils.matrices)": [[53, "nipy.algorithms.utils.matrices.full_rank"]], "matrix_rank() (in module nipy.algorithms.utils.matrices)": [[53, "nipy.algorithms.utils.matrices.matrix_rank"]], "nipy.algorithms.utils.matrices": [[53, "module-nipy.algorithms.utils.matrices"]], "pos_recipr() (in module nipy.algorithms.utils.matrices)": [[53, "nipy.algorithms.utils.matrices.pos_recipr"]], "recipr0() (in module nipy.algorithms.utils.matrices)": [[53, "nipy.algorithms.utils.matrices.recipr0"]], "nipy.algorithms.utils.pca": [[54, "module-nipy.algorithms.utils.pca"]], "pca() (in module nipy.algorithms.utils.pca)": [[54, "nipy.algorithms.utils.pca.pca"]], "pca_image() (in module nipy.algorithms.utils.pca)": [[54, "nipy.algorithms.utils.pca.pca_image"]], "main() (in module nipy.cli.diagnose)": [[55, "nipy.cli.diagnose.main"]], "nipy.cli.diagnose": [[55, "module-nipy.cli.diagnose"]], "do_3d_to_4d() (in module nipy.cli.img3dto4d)": [[56, "nipy.cli.img3dto4d.do_3d_to_4d"]], "main() (in module nipy.cli.img3dto4d)": [[56, "nipy.cli.img3dto4d.main"]], "nipy.cli.img3dto4d": [[56, "module-nipy.cli.img3dto4d"]], "main() (in module nipy.cli.img4dto3d)": [[57, "nipy.cli.img4dto3d.main"]], "nipy.cli.img4dto3d": [[57, "module-nipy.cli.img4dto3d"]], "main() (in module nipy.cli.realign4d)": [[58, "nipy.cli.realign4d.main"]], "nipy.cli.realign4d": [[58, "module-nipy.cli.realign4d"]], "main() (in module nipy.cli.tsdiffana)": [[59, "nipy.cli.tsdiffana.main"]], "nipy.cli.tsdiffana": [[59, "module-nipy.cli.tsdiffana"]], "add_np() (in module nipy.conftest)": [[60, "nipy.conftest.add_np"]], "in_tmp_path() (in module nipy.conftest)": [[60, "nipy.conftest.in_tmp_path"]], "mpl_imports() (in module nipy.conftest)": [[60, "nipy.conftest.mpl_imports"]], "nipy.conftest": [[60, "module-nipy.conftest"]], "image (class in nipy.core.image.image)": [[61, "nipy.core.image.image.Image"]], "slicemaker (class in nipy.core.image.image)": [[61, "nipy.core.image.image.SliceMaker"]], "__init__() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.__init__"]], "__init__() (nipy.core.image.image.slicemaker method)": [[61, "nipy.core.image.image.SliceMaker.__init__"]], "affine() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.affine"]], "axes() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.axes"]], "coordmap (nipy.core.image.image.image attribute)": [[61, "nipy.core.image.image.Image.coordmap"]], "from_image() (nipy.core.image.image.image class method)": [[61, "nipy.core.image.image.Image.from_image"]], "fromarray() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.fromarray"]], "get_fdata() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.get_fdata"]], "header (nipy.core.image.image.image property)": [[61, "nipy.core.image.image.Image.header"]], "is_image() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.is_image"]], "iter_axis() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.iter_axis"]], "metadata (nipy.core.image.image.image attribute)": [[61, "nipy.core.image.image.Image.metadata"]], "ndim() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.ndim"]], "nipy.core.image.image": [[61, "module-nipy.core.image.image"]], "reference() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.reference"]], "renamed_axes() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.renamed_axes"]], "renamed_reference() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.renamed_reference"]], "reordered_axes() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.reordered_axes"]], "reordered_reference() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.reordered_reference"]], "rollaxis() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.rollaxis"]], "rollimg() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.rollimg"]], "shape() (nipy.core.image.image.image method)": [[61, "nipy.core.image.image.Image.shape"]], "subsample() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.subsample"]], "synchronized_order() (in module nipy.core.image.image)": [[61, "nipy.core.image.image.synchronized_order"]], "imagelist (class in nipy.core.image.image_list)": [[62, "nipy.core.image.image_list.ImageList"]], "__init__() (nipy.core.image.image_list.imagelist method)": [[62, "nipy.core.image.image_list.ImageList.__init__"]], "from_image() (nipy.core.image.image_list.imagelist class method)": [[62, "nipy.core.image.image_list.ImageList.from_image"]], "get_list_data() (nipy.core.image.image_list.imagelist method)": [[62, "nipy.core.image.image_list.ImageList.get_list_data"]], "nipy.core.image.image_list": [[62, "module-nipy.core.image.image_list"]], "as_xyz_image() (in module nipy.core.image.image_spaces)": [[63, "nipy.core.image.image_spaces.as_xyz_image"]], "is_xyz_affable() (in module nipy.core.image.image_spaces)": [[63, "nipy.core.image.image_spaces.is_xyz_affable"]], "make_xyz_image() (in module nipy.core.image.image_spaces)": [[63, "nipy.core.image.image_spaces.make_xyz_image"]], "nipy.core.image.image_spaces": [[63, "module-nipy.core.image.image_spaces"]], "xyz_affine() (in module nipy.core.image.image_spaces)": [[63, "nipy.core.image.image_spaces.xyz_affine"]], "arraycoordmap (class in nipy.core.reference.array_coords)": [[64, "nipy.core.reference.array_coords.ArrayCoordMap"]], "grid (class in nipy.core.reference.array_coords)": [[64, "nipy.core.reference.array_coords.Grid"]], "__init__() (nipy.core.reference.array_coords.arraycoordmap method)": [[64, "nipy.core.reference.array_coords.ArrayCoordMap.__init__"]], "__init__() (nipy.core.reference.array_coords.grid method)": [[64, "nipy.core.reference.array_coords.Grid.__init__"]], "from_shape() (nipy.core.reference.array_coords.arraycoordmap static method)": [[64, "nipy.core.reference.array_coords.ArrayCoordMap.from_shape"]], "nipy.core.reference.array_coords": [[64, "module-nipy.core.reference.array_coords"]], "transposed_values (nipy.core.reference.array_coords.arraycoordmap property)": [[64, "nipy.core.reference.array_coords.ArrayCoordMap.transposed_values"]], "values (nipy.core.reference.array_coords.arraycoordmap property)": [[64, "nipy.core.reference.array_coords.ArrayCoordMap.values"]], "affinetransform (class in nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.AffineTransform"]], "axiserror (class in nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.AxisError"]], "coordmapmaker (class in nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker"]], "coordmapmakererror (class in nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.CoordMapMakerError"]], "coordinatemap (class in nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap"]], "__init__() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.__init__"]], "__init__() (nipy.core.reference.coordinate_map.axiserror method)": [[65, "nipy.core.reference.coordinate_map.AxisError.__init__"]], "__init__() (nipy.core.reference.coordinate_map.coordmapmaker method)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker.__init__"]], "__init__() (nipy.core.reference.coordinate_map.coordmapmakererror method)": [[65, "nipy.core.reference.coordinate_map.CoordMapMakerError.__init__"]], "__init__() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.__init__"]], "affine (nipy.core.reference.coordinate_map.affinetransform attribute)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.affine"]], "affine_maker (nipy.core.reference.coordinate_map.coordmapmaker attribute)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker.affine_maker"]], "append_io_dim() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.append_io_dim"]], "args (nipy.core.reference.coordinate_map.axiserror attribute)": [[65, "nipy.core.reference.coordinate_map.AxisError.args"]], "args (nipy.core.reference.coordinate_map.coordmapmakererror attribute)": [[65, "nipy.core.reference.coordinate_map.CoordMapMakerError.args"]], "axmap() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.axmap"]], "compose() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.compose"]], "drop_io_dim() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.drop_io_dim"]], "equivalent() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.equivalent"]], "from_params() (nipy.core.reference.coordinate_map.affinetransform static method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.from_params"]], "from_start_step() (nipy.core.reference.coordinate_map.affinetransform static method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.from_start_step"]], "function (nipy.core.reference.coordinate_map.coordinatemap attribute)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.function"]], "function_domain (nipy.core.reference.coordinate_map.affinetransform attribute)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.function_domain"]], "function_domain (nipy.core.reference.coordinate_map.coordinatemap attribute)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.function_domain"]], "function_range (nipy.core.reference.coordinate_map.affinetransform attribute)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.function_range"]], "function_range (nipy.core.reference.coordinate_map.coordinatemap attribute)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.function_range"]], "generic_maker (nipy.core.reference.coordinate_map.coordmapmaker attribute)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker.generic_maker"]], "identity() (nipy.core.reference.coordinate_map.affinetransform static method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.identity"]], "input_axis_index() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.input_axis_index"]], "inverse() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.inverse"]], "inverse() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.inverse"]], "inverse_function (nipy.core.reference.coordinate_map.coordinatemap attribute)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.inverse_function"]], "io_axis_indices() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.io_axis_indices"]], "make_affine() (nipy.core.reference.coordinate_map.coordmapmaker method)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker.make_affine"]], "make_cmap() (nipy.core.reference.coordinate_map.coordmapmaker method)": [[65, "nipy.core.reference.coordinate_map.CoordMapMaker.make_cmap"]], "ndims (nipy.core.reference.coordinate_map.affinetransform attribute)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.ndims"]], "ndims (nipy.core.reference.coordinate_map.coordinatemap attribute)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.ndims"]], "nipy.core.reference.coordinate_map": [[65, "module-nipy.core.reference.coordinate_map"]], "orth_axes() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.orth_axes"]], "product() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.product"]], "renamed_domain() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.renamed_domain"]], "renamed_domain() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.renamed_domain"]], "renamed_domain() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.renamed_domain"]], "renamed_range() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.renamed_range"]], "renamed_range() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.renamed_range"]], "renamed_range() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.renamed_range"]], "reordered_domain() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.reordered_domain"]], "reordered_domain() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.reordered_domain"]], "reordered_domain() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.reordered_domain"]], "reordered_range() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.reordered_range"]], "reordered_range() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.reordered_range"]], "reordered_range() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.reordered_range"]], "shifted_domain_origin() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.shifted_domain_origin"]], "shifted_range_origin() (in module nipy.core.reference.coordinate_map)": [[65, "nipy.core.reference.coordinate_map.shifted_range_origin"]], "similar_to() (nipy.core.reference.coordinate_map.affinetransform method)": [[65, "nipy.core.reference.coordinate_map.AffineTransform.similar_to"]], "similar_to() (nipy.core.reference.coordinate_map.coordinatemap method)": [[65, "nipy.core.reference.coordinate_map.CoordinateMap.similar_to"]], "with_traceback() (nipy.core.reference.coordinate_map.axiserror method)": [[65, "nipy.core.reference.coordinate_map.AxisError.with_traceback"]], "with_traceback() (nipy.core.reference.coordinate_map.coordmapmakererror method)": [[65, "nipy.core.reference.coordinate_map.CoordMapMakerError.with_traceback"]], "coordsysmaker (class in nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.CoordSysMaker"]], "coordsysmakererror (class in nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.CoordSysMakerError"]], "coordinatesystem (class in nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem"]], "coordinatesystemerror (class in nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystemError"]], "__init__() (nipy.core.reference.coordinate_system.coordsysmaker method)": [[66, "nipy.core.reference.coordinate_system.CoordSysMaker.__init__"]], "__init__() (nipy.core.reference.coordinate_system.coordsysmakererror method)": [[66, "nipy.core.reference.coordinate_system.CoordSysMakerError.__init__"]], "__init__() (nipy.core.reference.coordinate_system.coordinatesystem method)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.__init__"]], "__init__() (nipy.core.reference.coordinate_system.coordinatesystemerror method)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystemError.__init__"]], "args (nipy.core.reference.coordinate_system.coordsysmakererror attribute)": [[66, "nipy.core.reference.coordinate_system.CoordSysMakerError.args"]], "args (nipy.core.reference.coordinate_system.coordinatesystemerror attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystemError.args"]], "coord_dtype (nipy.core.reference.coordinate_system.coordinatesystem attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.coord_dtype"]], "coord_names (nipy.core.reference.coordinate_system.coordinatesystem attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.coord_names"]], "coord_sys_klass (nipy.core.reference.coordinate_system.coordsysmaker attribute)": [[66, "nipy.core.reference.coordinate_system.CoordSysMaker.coord_sys_klass"]], "dtype (nipy.core.reference.coordinate_system.coordinatesystem attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.dtype"]], "index() (nipy.core.reference.coordinate_system.coordinatesystem method)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.index"]], "is_coordsys() (in module nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.is_coordsys"]], "is_coordsys_maker() (in module nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.is_coordsys_maker"]], "name (nipy.core.reference.coordinate_system.coordinatesystem attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.name"]], "ndim (nipy.core.reference.coordinate_system.coordinatesystem attribute)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.ndim"]], "nipy.core.reference.coordinate_system": [[66, "module-nipy.core.reference.coordinate_system"]], "product() (in module nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.product"]], "safe_dtype() (in module nipy.core.reference.coordinate_system)": [[66, "nipy.core.reference.coordinate_system.safe_dtype"]], "similar_to() (nipy.core.reference.coordinate_system.coordinatesystem method)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystem.similar_to"]], "with_traceback() (nipy.core.reference.coordinate_system.coordsysmakererror method)": [[66, "nipy.core.reference.coordinate_system.CoordSysMakerError.with_traceback"]], "with_traceback() (nipy.core.reference.coordinate_system.coordinatesystemerror method)": [[66, "nipy.core.reference.coordinate_system.CoordinateSystemError.with_traceback"]], "bounding_box() (in module nipy.core.reference.slices)": [[67, "nipy.core.reference.slices.bounding_box"]], "nipy.core.reference.slices": [[67, "module-nipy.core.reference.slices"]], "xslice() (in module nipy.core.reference.slices)": [[67, "nipy.core.reference.slices.xslice"]], "yslice() (in module nipy.core.reference.slices)": [[67, "nipy.core.reference.slices.yslice"]], "zslice() (in module nipy.core.reference.slices)": [[67, "nipy.core.reference.slices.zslice"]], "affineerror (class in nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.AffineError"]], "axeserror (class in nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.AxesError"]], "spaceerror (class in nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.SpaceError"]], "spacetypeerror (class in nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.SpaceTypeError"]], "xyzspace (class in nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.XYZSpace"]], "__init__() (nipy.core.reference.spaces.affineerror method)": [[68, "nipy.core.reference.spaces.AffineError.__init__"]], "__init__() (nipy.core.reference.spaces.axeserror method)": [[68, "nipy.core.reference.spaces.AxesError.__init__"]], "__init__() (nipy.core.reference.spaces.spaceerror method)": [[68, "nipy.core.reference.spaces.SpaceError.__init__"]], "__init__() (nipy.core.reference.spaces.spacetypeerror method)": [[68, "nipy.core.reference.spaces.SpaceTypeError.__init__"]], "__init__() (nipy.core.reference.spaces.xyzspace method)": [[68, "nipy.core.reference.spaces.XYZSpace.__init__"]], "args (nipy.core.reference.spaces.affineerror attribute)": [[68, "nipy.core.reference.spaces.AffineError.args"]], "args (nipy.core.reference.spaces.axeserror attribute)": [[68, "nipy.core.reference.spaces.AxesError.args"]], "args (nipy.core.reference.spaces.spaceerror attribute)": [[68, "nipy.core.reference.spaces.SpaceError.args"]], "args (nipy.core.reference.spaces.spacetypeerror attribute)": [[68, "nipy.core.reference.spaces.SpaceTypeError.args"]], "as_map() (nipy.core.reference.spaces.xyzspace method)": [[68, "nipy.core.reference.spaces.XYZSpace.as_map"]], "as_tuple() (nipy.core.reference.spaces.xyzspace method)": [[68, "nipy.core.reference.spaces.XYZSpace.as_tuple"]], "get_world_cs() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.get_world_cs"]], "is_xyz_affable() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.is_xyz_affable"]], "is_xyz_space() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.is_xyz_space"]], "known_space() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.known_space"]], "nipy.core.reference.spaces": [[68, "module-nipy.core.reference.spaces"]], "register_to() (nipy.core.reference.spaces.xyzspace method)": [[68, "nipy.core.reference.spaces.XYZSpace.register_to"]], "to_coordsys_maker() (nipy.core.reference.spaces.xyzspace method)": [[68, "nipy.core.reference.spaces.XYZSpace.to_coordsys_maker"]], "with_traceback() (nipy.core.reference.spaces.affineerror method)": [[68, "nipy.core.reference.spaces.AffineError.with_traceback"]], "with_traceback() (nipy.core.reference.spaces.axeserror method)": [[68, "nipy.core.reference.spaces.AxesError.with_traceback"]], "with_traceback() (nipy.core.reference.spaces.spaceerror method)": [[68, "nipy.core.reference.spaces.SpaceError.with_traceback"]], "with_traceback() (nipy.core.reference.spaces.spacetypeerror method)": [[68, "nipy.core.reference.spaces.SpaceTypeError.with_traceback"]], "x (nipy.core.reference.spaces.xyzspace property)": [[68, "nipy.core.reference.spaces.XYZSpace.x"]], "x_suffix (nipy.core.reference.spaces.xyzspace attribute)": [[68, "nipy.core.reference.spaces.XYZSpace.x_suffix"]], "xyz_affine() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.xyz_affine"]], "xyz_order() (in module nipy.core.reference.spaces)": [[68, "nipy.core.reference.spaces.xyz_order"]], "y (nipy.core.reference.spaces.xyzspace property)": [[68, "nipy.core.reference.spaces.XYZSpace.y"]], "y_suffix (nipy.core.reference.spaces.xyzspace attribute)": [[68, "nipy.core.reference.spaces.XYZSpace.y_suffix"]], "z (nipy.core.reference.spaces.xyzspace property)": [[68, "nipy.core.reference.spaces.XYZSpace.z"]], "z_suffix (nipy.core.reference.spaces.xyzspace attribute)": [[68, "nipy.core.reference.spaces.XYZSpace.z_suffix"]], "data_generator() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.data_generator"]], "f_generator() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.f_generator"]], "matrix_generator() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.matrix_generator"]], "nipy.core.utils.generators": [[69, "module-nipy.core.utils.generators"]], "parcels() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.parcels"]], "shape_generator() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.shape_generator"]], "slice_generator() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.slice_generator"]], "slice_parcels() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.slice_parcels"]], "write_data() (in module nipy.core.utils.generators)": [[69, "nipy.core.utils.generators.write_data"]], "mlab_tempfile() (in module nipy.interfaces.matlab)": [[70, "nipy.interfaces.matlab.mlab_tempfile"]], "nipy.interfaces.matlab": [[70, "module-nipy.interfaces.matlab"]], "run_matlab() (in module nipy.interfaces.matlab)": [[70, "nipy.interfaces.matlab.run_matlab"]], "run_matlab_script() (in module nipy.interfaces.matlab)": [[70, "nipy.interfaces.matlab.run_matlab_script"]], "spminfo (class in nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.SpmInfo"]], "__init__() (nipy.interfaces.spm.spminfo method)": [[71, "nipy.interfaces.spm.SpmInfo.__init__"]], "fltcols() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.fltcols"]], "fname_presuffix() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.fname_presuffix"]], "fnames_presuffix() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.fnames_presuffix"]], "make_job() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.make_job"]], "nipy.interfaces.spm": [[71, "module-nipy.interfaces.spm"]], "run_jobdef() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.run_jobdef"]], "scans_for_fname() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.scans_for_fname"]], "scans_for_fnames() (in module nipy.interfaces.spm)": [[71, "nipy.interfaces.spm.scans_for_fnames"]], "spm_path (nipy.interfaces.spm.spminfo property)": [[71, "nipy.interfaces.spm.SpmInfo.spm_path"]], "spm_ver (nipy.interfaces.spm.spminfo property)": [[71, "nipy.interfaces.spm.SpmInfo.spm_ver"]], "as_image() (in module nipy.io.files)": [[72, "nipy.io.files.as_image"]], "load() (in module nipy.io.files)": [[72, "nipy.io.files.load"]], "nipy.io.files": [[72, "module-nipy.io.files"]], "save() (in module nipy.io.files)": [[72, "nipy.io.files.save"]], "get_affine() (in module nipy.io.nibcompat)": [[73, "nipy.io.nibcompat.get_affine"]], "get_dataobj() (in module nipy.io.nibcompat)": [[73, "nipy.io.nibcompat.get_dataobj"]], "get_header() (in module nipy.io.nibcompat)": [[73, "nipy.io.nibcompat.get_header"]], "get_unscaled_data() (in module nipy.io.nibcompat)": [[73, "nipy.io.nibcompat.get_unscaled_data"]], "nipy.io.nibcompat": [[73, "module-nipy.io.nibcompat"]], "niftierror (class in nipy.io.nifti_ref)": [[74, "nipy.io.nifti_ref.NiftiError"]], "__init__() (nipy.io.nifti_ref.niftierror method)": [[74, "nipy.io.nifti_ref.NiftiError.__init__"]], "args (nipy.io.nifti_ref.niftierror attribute)": [[74, "nipy.io.nifti_ref.NiftiError.args"]], "nifti2nipy() (in module nipy.io.nifti_ref)": [[74, "nipy.io.nifti_ref.nifti2nipy"]], "nipy.io.nifti_ref": [[74, "module-nipy.io.nifti_ref"]], "nipy2nifti() (in module nipy.io.nifti_ref)": [[74, "nipy.io.nifti_ref.nipy2nifti"]], "with_traceback() (nipy.io.nifti_ref.niftierror method)": [[74, "nipy.io.nifti_ref.NiftiError.with_traceback"]], "as_volume_img() (in module nipy.labs.datasets.converters)": [[75, "nipy.labs.datasets.converters.as_volume_img"]], "nipy.labs.datasets.converters": [[75, "module-nipy.labs.datasets.converters"]], "save() (in module nipy.labs.datasets.converters)": [[75, "nipy.labs.datasets.converters.save"]], "affinetransform (class in nipy.labs.datasets.transforms.affine_transform)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform"]], "__init__() (nipy.labs.datasets.transforms.affine_transform.affinetransform method)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.__init__"]], "affine (nipy.labs.datasets.transforms.affine_transform.affinetransform attribute)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.affine"]], "composed_with() (nipy.labs.datasets.transforms.affine_transform.affinetransform method)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.composed_with"]], "get_inverse() (nipy.labs.datasets.transforms.affine_transform.affinetransform method)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.get_inverse"]], "input_space (nipy.labs.datasets.transforms.affine_transform.affinetransform attribute)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.input_space"]], "inverse_mapping() (nipy.labs.datasets.transforms.affine_transform.affinetransform method)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.inverse_mapping"]], "mapping() (nipy.labs.datasets.transforms.affine_transform.affinetransform method)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.mapping"]], "nipy.labs.datasets.transforms.affine_transform": [[76, "module-nipy.labs.datasets.transforms.affine_transform"]], "output_space (nipy.labs.datasets.transforms.affine_transform.affinetransform attribute)": [[76, "nipy.labs.datasets.transforms.affine_transform.AffineTransform.output_space"]], "apply_affine() (in module nipy.labs.datasets.transforms.affine_utils)": [[77, "nipy.labs.datasets.transforms.affine_utils.apply_affine"]], "from_matrix_vector() (in module nipy.labs.datasets.transforms.affine_utils)": [[77, "nipy.labs.datasets.transforms.affine_utils.from_matrix_vector"]], "get_bounds() (in module nipy.labs.datasets.transforms.affine_utils)": [[77, "nipy.labs.datasets.transforms.affine_utils.get_bounds"]], "nipy.labs.datasets.transforms.affine_utils": [[77, "module-nipy.labs.datasets.transforms.affine_utils"]], "to_matrix_vector() (in module nipy.labs.datasets.transforms.affine_utils)": [[77, "nipy.labs.datasets.transforms.affine_utils.to_matrix_vector"]], "compositionerror (class in nipy.labs.datasets.transforms.transform)": [[78, "nipy.labs.datasets.transforms.transform.CompositionError"]], "transform (class in nipy.labs.datasets.transforms.transform)": [[78, "nipy.labs.datasets.transforms.transform.Transform"]], "__init__() (nipy.labs.datasets.transforms.transform.compositionerror method)": [[78, "nipy.labs.datasets.transforms.transform.CompositionError.__init__"]], "__init__() (nipy.labs.datasets.transforms.transform.transform method)": [[78, "nipy.labs.datasets.transforms.transform.Transform.__init__"]], "args (nipy.labs.datasets.transforms.transform.compositionerror attribute)": [[78, "nipy.labs.datasets.transforms.transform.CompositionError.args"]], "composed_with() (nipy.labs.datasets.transforms.transform.transform method)": [[78, "nipy.labs.datasets.transforms.transform.Transform.composed_with"]], "get_inverse() (nipy.labs.datasets.transforms.transform.transform method)": [[78, "nipy.labs.datasets.transforms.transform.Transform.get_inverse"]], "input_space (nipy.labs.datasets.transforms.transform.transform attribute)": [[78, "nipy.labs.datasets.transforms.transform.Transform.input_space"]], "inverse_mapping (nipy.labs.datasets.transforms.transform.transform attribute)": [[78, "nipy.labs.datasets.transforms.transform.Transform.inverse_mapping"]], "mapping (nipy.labs.datasets.transforms.transform.transform attribute)": [[78, "nipy.labs.datasets.transforms.transform.Transform.mapping"]], "nipy.labs.datasets.transforms.transform": [[78, "module-nipy.labs.datasets.transforms.transform"]], "output_space (nipy.labs.datasets.transforms.transform.transform attribute)": [[78, "nipy.labs.datasets.transforms.transform.Transform.output_space"]], "with_traceback() (nipy.labs.datasets.transforms.transform.compositionerror method)": [[78, "nipy.labs.datasets.transforms.transform.CompositionError.with_traceback"]], "volumedata (class in nipy.labs.datasets.volumes.volume_data)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData"]], "__init__() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.__init__"]], "as_volume_img() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.as_volume_img"]], "composed_with_transform() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.composed_with_transform"]], "get_fdata() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.get_fdata"]], "get_transform() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.get_transform"]], "interpolation (nipy.labs.datasets.volumes.volume_data.volumedata attribute)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.interpolation"]], "like_from_data() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.like_from_data"]], "metadata (nipy.labs.datasets.volumes.volume_data.volumedata attribute)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.metadata"]], "nipy.labs.datasets.volumes.volume_data": [[79, "module-nipy.labs.datasets.volumes.volume_data"]], "resampled_to_img() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.resampled_to_img"]], "values_in_world() (nipy.labs.datasets.volumes.volume_data.volumedata method)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.values_in_world"]], "world_space (nipy.labs.datasets.volumes.volume_data.volumedata attribute)": [[79, "nipy.labs.datasets.volumes.volume_data.VolumeData.world_space"]], "volumefield (class in nipy.labs.datasets.volumes.volume_field)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField"]], "__init__() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.__init__"]], "as_volume_img() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.as_volume_img"]], "composed_with_transform() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.composed_with_transform"]], "get_transform() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.get_transform"]], "metadata (nipy.labs.datasets.volumes.volume_field.volumefield attribute)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.metadata"]], "nipy.labs.datasets.volumes.volume_field": [[80, "module-nipy.labs.datasets.volumes.volume_field"]], "resampled_to_img() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.resampled_to_img"]], "values_in_world() (nipy.labs.datasets.volumes.volume_field.volumefield method)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.values_in_world"]], "world_space (nipy.labs.datasets.volumes.volume_field.volumefield attribute)": [[80, "nipy.labs.datasets.volumes.volume_field.VolumeField.world_space"]], "volumegrid (class in nipy.labs.datasets.volumes.volume_grid)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid"]], "__init__() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.__init__"]], "as_volume_img() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.as_volume_img"]], "composed_with_transform() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.composed_with_transform"]], "get_fdata() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.get_fdata"]], "get_transform() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.get_transform"]], "get_world_coords() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.get_world_coords"]], "interpolation (nipy.labs.datasets.volumes.volume_grid.volumegrid attribute)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.interpolation"]], "like_from_data() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.like_from_data"]], "metadata (nipy.labs.datasets.volumes.volume_grid.volumegrid attribute)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.metadata"]], "nipy.labs.datasets.volumes.volume_grid": [[81, "module-nipy.labs.datasets.volumes.volume_grid"]], "resampled_to_img() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.resampled_to_img"]], "values_in_world() (nipy.labs.datasets.volumes.volume_grid.volumegrid method)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.values_in_world"]], "world_space (nipy.labs.datasets.volumes.volume_grid.volumegrid attribute)": [[81, "nipy.labs.datasets.volumes.volume_grid.VolumeGrid.world_space"]], "volumeimg (class in nipy.labs.datasets.volumes.volume_img)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg"]], "__init__() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.__init__"]], "affine (nipy.labs.datasets.volumes.volume_img.volumeimg attribute)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.affine"]], "as_volume_img() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.as_volume_img"]], "composed_with_transform() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.composed_with_transform"]], "get_affine() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.get_affine"]], "get_fdata() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.get_fdata"]], "get_transform() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.get_transform"]], "get_world_coords() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.get_world_coords"]], "interpolation (nipy.labs.datasets.volumes.volume_img.volumeimg attribute)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.interpolation"]], "like_from_data() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.like_from_data"]], "metadata (nipy.labs.datasets.volumes.volume_img.volumeimg attribute)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.metadata"]], "nipy.labs.datasets.volumes.volume_img": [[82, "module-nipy.labs.datasets.volumes.volume_img"]], "resampled_to_img() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.resampled_to_img"]], "values_in_world() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.values_in_world"]], "world_space (nipy.labs.datasets.volumes.volume_img.volumeimg attribute)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.world_space"]], "xyz_ordered() (nipy.labs.datasets.volumes.volume_img.volumeimg method)": [[82, "nipy.labs.datasets.volumes.volume_img.VolumeImg.xyz_ordered"]], "__init__() (nipy.labs.glm.glm.contrast method)": [[83, "nipy.labs.glm.glm.contrast.__init__"]], "__init__() (nipy.labs.glm.glm.glm method)": [[83, "nipy.labs.glm.glm.glm.__init__"]], "contrast (class in nipy.labs.glm.glm)": [[83, "nipy.labs.glm.glm.contrast"]], "contrast() (nipy.labs.glm.glm.glm method)": [[83, "nipy.labs.glm.glm.glm.contrast"]], "fit() (nipy.labs.glm.glm.glm method)": [[83, "nipy.labs.glm.glm.glm.fit"]], "glm (class in nipy.labs.glm.glm)": [[83, "nipy.labs.glm.glm.glm"]], "load() (in module nipy.labs.glm.glm)": [[83, "nipy.labs.glm.glm.load"]], "nipy.labs.glm.glm": [[83, "module-nipy.labs.glm.glm"]], "ols() (in module nipy.labs.glm.glm)": [[83, "nipy.labs.glm.glm.ols"]], "pvalue() (nipy.labs.glm.glm.contrast method)": [[83, "nipy.labs.glm.glm.contrast.pvalue"]], "save() (nipy.labs.glm.glm.glm method)": [[83, "nipy.labs.glm.glm.glm.save"]], "stat() (nipy.labs.glm.glm.contrast method)": [[83, "nipy.labs.glm.glm.contrast.stat"]], "summary() (nipy.labs.glm.glm.contrast method)": [[83, "nipy.labs.glm.glm.contrast.summary"]], "zscore() (nipy.labs.glm.glm.contrast method)": [[83, "nipy.labs.glm.glm.contrast.zscore"]], "__init__() (nipy.labs.group.permutation_test.permutation_test method)": [[84, "nipy.labs.group.permutation_test.permutation_test.__init__"]], "__init__() (nipy.labs.group.permutation_test.permutation_test_onesample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample.__init__"]], "__init__() (nipy.labs.group.permutation_test.permutation_test_onesample_graph method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph.__init__"]], "__init__() (nipy.labs.group.permutation_test.permutation_test_twosample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample.__init__"]], "calibrate() (nipy.labs.group.permutation_test.permutation_test method)": [[84, "nipy.labs.group.permutation_test.permutation_test.calibrate"]], "calibrate() (nipy.labs.group.permutation_test.permutation_test_onesample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample.calibrate"]], "calibrate() (nipy.labs.group.permutation_test.permutation_test_onesample_graph method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph.calibrate"]], "calibrate() (nipy.labs.group.permutation_test.permutation_test_twosample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample.calibrate"]], "compute_cluster_stats() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.compute_cluster_stats"]], "compute_region_stat() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.compute_region_stat"]], "extract_clusters_from_diam() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.extract_clusters_from_diam"]], "extract_clusters_from_graph() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.extract_clusters_from_graph"]], "extract_clusters_from_thresh() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.extract_clusters_from_thresh"]], "height_threshold() (nipy.labs.group.permutation_test.permutation_test method)": [[84, "nipy.labs.group.permutation_test.permutation_test.height_threshold"]], "height_threshold() (nipy.labs.group.permutation_test.permutation_test_onesample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample.height_threshold"]], "height_threshold() (nipy.labs.group.permutation_test.permutation_test_onesample_graph method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph.height_threshold"]], "height_threshold() (nipy.labs.group.permutation_test.permutation_test_twosample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample.height_threshold"]], "max_dist() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.max_dist"]], "nipy.labs.group.permutation_test": [[84, "module-nipy.labs.group.permutation_test"]], "onesample_stat() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.onesample_stat"]], "peak_xyz() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.peak_XYZ"]], "permutation_test (class in nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.permutation_test"]], "permutation_test_onesample (class in nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample"]], "permutation_test_onesample_graph (class in nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph"]], "permutation_test_twosample (class in nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample"]], "pvalue() (nipy.labs.group.permutation_test.permutation_test method)": [[84, "nipy.labs.group.permutation_test.permutation_test.pvalue"]], "pvalue() (nipy.labs.group.permutation_test.permutation_test_onesample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample.pvalue"]], "pvalue() (nipy.labs.group.permutation_test.permutation_test_onesample_graph method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph.pvalue"]], "pvalue() (nipy.labs.group.permutation_test.permutation_test_twosample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample.pvalue"]], "sorted_values() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.sorted_values"]], "twosample_stat() (in module nipy.labs.group.permutation_test)": [[84, "nipy.labs.group.permutation_test.twosample_stat"]], "zscore() (nipy.labs.group.permutation_test.permutation_test method)": [[84, "nipy.labs.group.permutation_test.permutation_test.zscore"]], "zscore() (nipy.labs.group.permutation_test.permutation_test_onesample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample.zscore"]], "zscore() (nipy.labs.group.permutation_test.permutation_test_onesample_graph method)": [[84, "nipy.labs.group.permutation_test.permutation_test_onesample_graph.zscore"]], "zscore() (nipy.labs.group.permutation_test.permutation_test_twosample method)": [[84, "nipy.labs.group.permutation_test.permutation_test_twosample.zscore"]], "compute_mask() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.compute_mask"]], "compute_mask_files() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.compute_mask_files"]], "compute_mask_sessions() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.compute_mask_sessions"]], "intersect_masks() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.intersect_masks"]], "largest_cc() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.largest_cc"]], "nipy.labs.mask": [[85, "module-nipy.labs.mask"]], "series_from_mask() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.series_from_mask"]], "threshold_connect_components() (in module nipy.labs.mask)": [[85, "nipy.labs.mask.threshold_connect_components"]], "compute_landmarks() (in module nipy.labs.spatial_models.bayesian_structural_analysis)": [[86, "nipy.labs.spatial_models.bayesian_structural_analysis.compute_landmarks"]], "nipy.labs.spatial_models.bayesian_structural_analysis": [[86, "module-nipy.labs.spatial_models.bayesian_structural_analysis"]], "make_bsa_image() (in module nipy.labs.spatial_models.bsa_io)": [[87, "nipy.labs.spatial_models.bsa_io.make_bsa_image"]], "nipy.labs.spatial_models.bsa_io": [[87, "module-nipy.labs.spatial_models.bsa_io"]], "discretedomain (class in nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain"]], "meshdomain (class in nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.MeshDomain"]], "ndgriddomain (class in nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain"]], "structureddomain (class in nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain"]], "__init__() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.__init__"]], "__init__() (nipy.labs.spatial_models.discrete_domain.meshdomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.MeshDomain.__init__"]], "__init__() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.__init__"]], "__init__() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.__init__"]], "area() (nipy.labs.spatial_models.discrete_domain.meshdomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.MeshDomain.area"]], "array_affine_coord() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.array_affine_coord"]], "connected_components() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.connected_components"]], "connected_components() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.connected_components"]], "connected_components() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.connected_components"]], "copy() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.copy"]], "copy() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.copy"]], "copy() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.copy"]], "domain_from_binary_array() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.domain_from_binary_array"]], "domain_from_image() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.domain_from_image"]], "domain_from_mesh() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.domain_from_mesh"]], "get_coord() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.get_coord"]], "get_coord() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.get_coord"]], "get_coord() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.get_coord"]], "get_feature() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.get_feature"]], "get_feature() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.get_feature"]], "get_feature() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.get_feature"]], "get_volume() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.get_volume"]], "get_volume() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.get_volume"]], "get_volume() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.get_volume"]], "grid_domain_from_binary_array() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.grid_domain_from_binary_array"]], "grid_domain_from_image() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.grid_domain_from_image"]], "grid_domain_from_shape() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.grid_domain_from_shape"]], "idx_affine_coord() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.idx_affine_coord"]], "integrate() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.integrate"]], "integrate() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.integrate"]], "integrate() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.integrate"]], "make_feature_from_image() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.make_feature_from_image"]], "mask() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.mask"]], "mask() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.mask"]], "mask() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.mask"]], "nipy.labs.spatial_models.discrete_domain": [[88, "module-nipy.labs.spatial_models.discrete_domain"]], "reduce_coo_matrix() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.reduce_coo_matrix"]], "representative_feature() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.representative_feature"]], "representative_feature() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.representative_feature"]], "representative_feature() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.representative_feature"]], "set_feature() (nipy.labs.spatial_models.discrete_domain.discretedomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.DiscreteDomain.set_feature"]], "set_feature() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.set_feature"]], "set_feature() (nipy.labs.spatial_models.discrete_domain.structureddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.StructuredDomain.set_feature"]], "smatrix_from_3d_array() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.smatrix_from_3d_array"]], "smatrix_from_3d_idx() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.smatrix_from_3d_idx"]], "smatrix_from_nd_array() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.smatrix_from_nd_array"]], "smatrix_from_nd_idx() (in module nipy.labs.spatial_models.discrete_domain)": [[88, "nipy.labs.spatial_models.discrete_domain.smatrix_from_nd_idx"]], "to_image() (nipy.labs.spatial_models.discrete_domain.ndgriddomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.NDGridDomain.to_image"]], "topology() (nipy.labs.spatial_models.discrete_domain.meshdomain method)": [[88, "nipy.labs.spatial_models.discrete_domain.MeshDomain.topology"]], "hparcel() (in module nipy.labs.spatial_models.hierarchical_parcellation)": [[89, "nipy.labs.spatial_models.hierarchical_parcellation.hparcel"]], "nipy.labs.spatial_models.hierarchical_parcellation": [[89, "module-nipy.labs.spatial_models.hierarchical_parcellation"]], "perm_prfx() (in module nipy.labs.spatial_models.hierarchical_parcellation)": [[89, "nipy.labs.spatial_models.hierarchical_parcellation.perm_prfx"]], "hroi_as_discrete_domain_blobs() (in module nipy.labs.spatial_models.hroi)": [[90, "nipy.labs.spatial_models.hroi.HROI_as_discrete_domain_blobs"]], "hroi_from_watershed() (in module nipy.labs.spatial_models.hroi)": [[90, "nipy.labs.spatial_models.hroi.HROI_from_watershed"]], "hierarchicalroi (class in nipy.labs.spatial_models.hroi)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI"]], "__init__() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.__init__"]], "copy() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.copy"]], "feature_to_voxel_map() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.feature_to_voxel_map"]], "get_coord() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_coord"]], "get_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_feature"]], "get_id() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_id"]], "get_leaves_id() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_leaves_id"]], "get_local_volume() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_local_volume"]], "get_parents() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_parents"]], "get_roi_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_roi_feature"]], "get_size() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_size"]], "get_volume() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.get_volume"]], "hroi_agglomeration() (in module nipy.labs.spatial_models.hroi)": [[90, "nipy.labs.spatial_models.hroi.hroi_agglomeration"]], "integrate() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.integrate"]], "make_forest() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.make_forest"]], "make_graph() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.make_graph"]], "make_hroi_from_subdomain() (in module nipy.labs.spatial_models.hroi)": [[90, "nipy.labs.spatial_models.hroi.make_hroi_from_subdomain"]], "merge_ascending() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.merge_ascending"]], "merge_descending() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.merge_descending"]], "nipy.labs.spatial_models.hroi": [[90, "module-nipy.labs.spatial_models.hroi"]], "plot_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.plot_feature"]], "recompute_labels() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.recompute_labels"]], "reduce_to_leaves() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.reduce_to_leaves"]], "remove_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.remove_feature"]], "remove_roi_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.remove_roi_feature"]], "representative_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.representative_feature"]], "select_id() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.select_id"]], "select_roi() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.select_roi"]], "set_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.set_feature"]], "set_roi_feature() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.set_roi_feature"]], "to_image() (nipy.labs.spatial_models.hroi.hierarchicalroi method)": [[90, "nipy.labs.spatial_models.hroi.HierarchicalROI.to_image"]], "subdomains (class in nipy.labs.spatial_models.mroi)": [[91, "nipy.labs.spatial_models.mroi.SubDomains"]], "__init__() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.__init__"]], "copy() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.copy"]], "feature_to_voxel_map() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.feature_to_voxel_map"]], "get_coord() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_coord"]], "get_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_feature"]], "get_id() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_id"]], "get_local_volume() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_local_volume"]], "get_roi_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_roi_feature"]], "get_size() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_size"]], "get_volume() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.get_volume"]], "integrate() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.integrate"]], "nipy.labs.spatial_models.mroi": [[91, "module-nipy.labs.spatial_models.mroi"]], "plot_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.plot_feature"]], "recompute_labels() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.recompute_labels"]], "remove_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.remove_feature"]], "remove_roi_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.remove_roi_feature"]], "representative_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.representative_feature"]], "select_id() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.select_id"]], "select_roi() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.select_roi"]], "set_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.set_feature"]], "set_roi_feature() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.set_roi_feature"]], "subdomain_from_array() (in module nipy.labs.spatial_models.mroi)": [[91, "nipy.labs.spatial_models.mroi.subdomain_from_array"]], "subdomain_from_balls() (in module nipy.labs.spatial_models.mroi)": [[91, "nipy.labs.spatial_models.mroi.subdomain_from_balls"]], "subdomain_from_image() (in module nipy.labs.spatial_models.mroi)": [[91, "nipy.labs.spatial_models.mroi.subdomain_from_image"]], "subdomain_from_position_and_image() (in module nipy.labs.spatial_models.mroi)": [[91, "nipy.labs.spatial_models.mroi.subdomain_from_position_and_image"]], "to_image() (nipy.labs.spatial_models.mroi.subdomains method)": [[91, "nipy.labs.spatial_models.mroi.SubDomains.to_image"]], "fixed_parcellation() (in module nipy.labs.spatial_models.parcel_io)": [[92, "nipy.labs.spatial_models.parcel_io.fixed_parcellation"]], "mask_parcellation() (in module nipy.labs.spatial_models.parcel_io)": [[92, "nipy.labs.spatial_models.parcel_io.mask_parcellation"]], "nipy.labs.spatial_models.parcel_io": [[92, "module-nipy.labs.spatial_models.parcel_io"]], "parcel_input() (in module nipy.labs.spatial_models.parcel_io)": [[92, "nipy.labs.spatial_models.parcel_io.parcel_input"]], "parcellation_based_analysis() (in module nipy.labs.spatial_models.parcel_io)": [[92, "nipy.labs.spatial_models.parcel_io.parcellation_based_analysis"]], "write_parcellation_images() (in module nipy.labs.spatial_models.parcel_io)": [[92, "nipy.labs.spatial_models.parcel_io.write_parcellation_images"]], "multisubjectparcellation (class in nipy.labs.spatial_models.parcellation)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation"]], "__init__() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.__init__"]], "check() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.check"]], "copy() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.copy"]], "get_feature() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.get_feature"]], "make_feature() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.make_feature"]], "nipy.labs.spatial_models.parcellation": [[93, "module-nipy.labs.spatial_models.parcellation"]], "population() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.population"]], "set_feature() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.set_feature"]], "set_individual_labels() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.set_individual_labels"]], "set_template_labels() (nipy.labs.spatial_models.parcellation.multisubjectparcellation method)": [[93, "nipy.labs.spatial_models.parcellation.MultiSubjectParcellation.set_template_labels"]], "landmarkregions (class in nipy.labs.spatial_models.structural_bfls)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions"]], "__init__() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.__init__"]], "build_landmarks() (in module nipy.labs.spatial_models.structural_bfls)": [[94, "nipy.labs.spatial_models.structural_bfls.build_landmarks"]], "centers() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.centers"]], "kernel_density() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.kernel_density"]], "map_label() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.map_label"]], "nipy.labs.spatial_models.structural_bfls": [[94, "module-nipy.labs.spatial_models.structural_bfls"]], "roi_prevalence() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.roi_prevalence"]], "show() (nipy.labs.spatial_models.structural_bfls.landmarkregions method)": [[94, "nipy.labs.spatial_models.structural_bfls.LandmarkRegions.show"]], "linearmodel (class in nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.LinearModel"]], "__init__() (nipy.labs.statistical_mapping.linearmodel method)": [[95, "nipy.labs.statistical_mapping.LinearModel.__init__"]], "bonferroni() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.bonferroni"]], "cluster_stats() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.cluster_stats"]], "contrast() (nipy.labs.statistical_mapping.linearmodel method)": [[95, "nipy.labs.statistical_mapping.LinearModel.contrast"]], "def_model (nipy.labs.statistical_mapping.linearmodel attribute)": [[95, "nipy.labs.statistical_mapping.LinearModel.def_model"]], "def_niter (nipy.labs.statistical_mapping.linearmodel attribute)": [[95, "nipy.labs.statistical_mapping.LinearModel.def_niter"]], "dump() (nipy.labs.statistical_mapping.linearmodel method)": [[95, "nipy.labs.statistical_mapping.LinearModel.dump"]], "get_3d_peaks() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.get_3d_peaks"]], "linear_model_fit() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.linear_model_fit"]], "nipy.labs.statistical_mapping": [[95, "module-nipy.labs.statistical_mapping"]], "onesample_test() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.onesample_test"]], "prepare_arrays() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.prepare_arrays"]], "simulated_pvalue() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.simulated_pvalue"]], "twosample_test() (in module nipy.labs.statistical_mapping)": [[95, "nipy.labs.statistical_mapping.twosample_test"]], "bootstrap_group() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.bootstrap_group"]], "cluster_reproducibility() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.cluster_reproducibility"]], "cluster_threshold() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.cluster_threshold"]], "conjunction() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.conjunction"]], "coord_bsa() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.coord_bsa"]], "draw_samples() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.draw_samples"]], "fttest() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.fttest"]], "get_cluster_position_from_thresholded_map() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.get_cluster_position_from_thresholded_map"]], "get_peak_position_from_thresholded_map() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.get_peak_position_from_thresholded_map"]], "group_reproducibility_metrics() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.group_reproducibility_metrics"]], "histo_repro() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.histo_repro"]], "map_reproducibility() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.map_reproducibility"]], "mfx_ttest() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.mfx_ttest"]], "nipy.labs.utils.reproducibility_measures": [[96, "module-nipy.labs.utils.reproducibility_measures"]], "peak_reproducibility() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.peak_reproducibility"]], "split_group() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.split_group"]], "statistics_from_position() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.statistics_from_position"]], "ttest() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.ttest"]], "voxel_reproducibility() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.voxel_reproducibility"]], "voxel_thresholded_ttest() (in module nipy.labs.utils.reproducibility_measures)": [[96, "nipy.labs.utils.reproducibility_measures.voxel_thresholded_ttest"]], "nipy.labs.utils.simul_multisubject_fmri_dataset": [[97, "module-nipy.labs.utils.simul_multisubject_fmri_dataset"]], "surrogate_2d_dataset() (in module nipy.labs.utils.simul_multisubject_fmri_dataset)": [[97, "nipy.labs.utils.simul_multisubject_fmri_dataset.surrogate_2d_dataset"]], "surrogate_3d_dataset() (in module nipy.labs.utils.simul_multisubject_fmri_dataset)": [[97, "nipy.labs.utils.simul_multisubject_fmri_dataset.surrogate_3d_dataset"]], "surrogate_4d_dataset() (in module nipy.labs.utils.simul_multisubject_fmri_dataset)": [[97, "nipy.labs.utils.simul_multisubject_fmri_dataset.surrogate_4d_dataset"]], "nipy.labs.utils.zscore": [[98, "module-nipy.labs.utils.zscore"]], "zscore() (in module nipy.labs.utils.zscore)": [[98, "nipy.labs.utils.zscore.zscore"]], "demo_plot_map() (in module nipy.labs.viz_tools.activation_maps)": [[99, "nipy.labs.viz_tools.activation_maps.demo_plot_map"]], "nipy.labs.viz_tools.activation_maps": [[99, "module-nipy.labs.viz_tools.activation_maps"]], "plot_anat() (in module nipy.labs.viz_tools.activation_maps)": [[99, "nipy.labs.viz_tools.activation_maps.plot_anat"]], "plot_map() (in module nipy.labs.viz_tools.activation_maps)": [[99, "nipy.labs.viz_tools.activation_maps.plot_map"]], "find_mni_template() (in module nipy.labs.viz_tools.anat_cache)": [[100, "nipy.labs.viz_tools.anat_cache.find_mni_template"]], "nipy.labs.viz_tools.anat_cache": [[100, "module-nipy.labs.viz_tools.anat_cache"]], "alpha_cmap() (in module nipy.labs.viz_tools.cm)": [[101, "nipy.labs.viz_tools.cm.alpha_cmap"]], "dim_cmap() (in module nipy.labs.viz_tools.cm)": [[101, "nipy.labs.viz_tools.cm.dim_cmap"]], "nipy.labs.viz_tools.cm": [[101, "module-nipy.labs.viz_tools.cm"]], "replace_inside() (in module nipy.labs.viz_tools.cm)": [[101, "nipy.labs.viz_tools.cm.replace_inside"]], "coord_transform() (in module nipy.labs.viz_tools.coord_tools)": [[102, "nipy.labs.viz_tools.coord_tools.coord_transform"]], "find_cut_coords() (in module nipy.labs.viz_tools.coord_tools)": [[102, "nipy.labs.viz_tools.coord_tools.find_cut_coords"]], "find_maxsep_cut_coords() (in module nipy.labs.viz_tools.coord_tools)": [[102, "nipy.labs.viz_tools.coord_tools.find_maxsep_cut_coords"]], "get_mask_bounds() (in module nipy.labs.viz_tools.coord_tools)": [[102, "nipy.labs.viz_tools.coord_tools.get_mask_bounds"]], "nipy.labs.viz_tools.coord_tools": [[102, "module-nipy.labs.viz_tools.coord_tools"]], "affine_img_src() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.affine_img_src"]], "autocrop_img() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.autocrop_img"]], "demo_plot_map_3d() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.demo_plot_map_3d"]], "m2screenshot() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.m2screenshot"]], "nipy.labs.viz_tools.maps_3d": [[103, "module-nipy.labs.viz_tools.maps_3d"]], "plot_anat_3d() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.plot_anat_3d"]], "plot_map_3d() (in module nipy.labs.viz_tools.maps_3d)": [[103, "nipy.labs.viz_tools.maps_3d.plot_map_3d"]], "baseslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer"]], "basestackedslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer"]], "cutaxes (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.CutAxes"]], "orthoslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer"]], "xslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.XSlicer"]], "yslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.YSlicer"]], "zslicer (class in nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer"]], "__init__() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.__init__"]], "__init__() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.__init__"]], "annotate() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.annotate"]], "annotate() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.annotate"]], "annotate() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.annotate"]], "annotate() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.annotate"]], "annotate() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.annotate"]], "annotate() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.annotate"]], "contour_map() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.contour_map"]], "contour_map() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.contour_map"]], "contour_map() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.contour_map"]], "contour_map() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.contour_map"]], "contour_map() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.contour_map"]], "contour_map() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.contour_map"]], "demo_ortho_slicer() (in module nipy.labs.viz_tools.slicers)": [[104, "nipy.labs.viz_tools.slicers.demo_ortho_slicer"]], "do_cut() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.do_cut"]], "draw_cross() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.draw_cross"]], "draw_cross() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.draw_cross"]], "draw_cross() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.draw_cross"]], "draw_cross() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.draw_cross"]], "draw_cross() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.draw_cross"]], "draw_cut() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.draw_cut"]], "draw_left_right() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.draw_left_right"]], "draw_position() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.draw_position"]], "edge_map() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.edge_map"]], "edge_map() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.edge_map"]], "edge_map() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.edge_map"]], "edge_map() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.edge_map"]], "edge_map() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.edge_map"]], "edge_map() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.edge_map"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.baseslicer static method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.find_cut_coords"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.basestackedslicer class method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.find_cut_coords"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.orthoslicer static method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.find_cut_coords"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.xslicer class method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.find_cut_coords"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.yslicer class method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.find_cut_coords"]], "find_cut_coords() (nipy.labs.viz_tools.slicers.zslicer class method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.find_cut_coords"]], "get_object_bounds() (nipy.labs.viz_tools.slicers.cutaxes method)": [[104, "nipy.labs.viz_tools.slicers.CutAxes.get_object_bounds"]], "init_with_figure() (nipy.labs.viz_tools.slicers.baseslicer class method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.init_with_figure"]], "init_with_figure() (nipy.labs.viz_tools.slicers.basestackedslicer class method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.init_with_figure"]], "init_with_figure() (nipy.labs.viz_tools.slicers.orthoslicer class method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.init_with_figure"]], "init_with_figure() (nipy.labs.viz_tools.slicers.xslicer class method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.init_with_figure"]], "init_with_figure() (nipy.labs.viz_tools.slicers.yslicer class method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.init_with_figure"]], "init_with_figure() (nipy.labs.viz_tools.slicers.zslicer class method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.init_with_figure"]], "nipy.labs.viz_tools.slicers": [[104, "module-nipy.labs.viz_tools.slicers"]], "plot_map() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.plot_map"]], "plot_map() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.plot_map"]], "plot_map() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.plot_map"]], "plot_map() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.plot_map"]], "plot_map() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.plot_map"]], "plot_map() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.plot_map"]], "title() (nipy.labs.viz_tools.slicers.baseslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseSlicer.title"]], "title() (nipy.labs.viz_tools.slicers.basestackedslicer method)": [[104, "nipy.labs.viz_tools.slicers.BaseStackedSlicer.title"]], "title() (nipy.labs.viz_tools.slicers.orthoslicer method)": [[104, "nipy.labs.viz_tools.slicers.OrthoSlicer.title"]], "title() (nipy.labs.viz_tools.slicers.xslicer method)": [[104, "nipy.labs.viz_tools.slicers.XSlicer.title"]], "title() (nipy.labs.viz_tools.slicers.yslicer method)": [[104, "nipy.labs.viz_tools.slicers.YSlicer.title"]], "title() (nipy.labs.viz_tools.slicers.zslicer method)": [[104, "nipy.labs.viz_tools.slicers.ZSlicer.title"]], "nipy.labs.viz_tools.test.test_activation_maps": [[105, "module-nipy.labs.viz_tools.test.test_activation_maps"]], "test_anat_cache() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_anat_cache"]], "test_demo_plot_map() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_demo_plot_map"]], "test_plot_anat() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_plot_anat"]], "test_plot_anat_kwargs() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_plot_anat_kwargs"]], "test_plot_map_empty() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_plot_map_empty"]], "test_plot_map_with_auto_cut_coords() (in module nipy.labs.viz_tools.test.test_activation_maps)": [[105, "nipy.labs.viz_tools.test.test_activation_maps.test_plot_map_with_auto_cut_coords"]], "nipy.labs.viz_tools.test.test_cm": [[106, "module-nipy.labs.viz_tools.test.test_cm"]], "test_dim_cmap() (in module nipy.labs.viz_tools.test.test_cm)": [[106, "nipy.labs.viz_tools.test.test_cm.test_dim_cmap"]], "test_replace_inside() (in module nipy.labs.viz_tools.test.test_cm)": [[106, "nipy.labs.viz_tools.test.test_cm.test_replace_inside"]], "nipy.labs.viz_tools.test.test_coord_tools": [[107, "module-nipy.labs.viz_tools.test.test_coord_tools"]], "test_coord_transform_trivial() (in module nipy.labs.viz_tools.test.test_coord_tools)": [[107, "nipy.labs.viz_tools.test.test_coord_tools.test_coord_transform_trivial"]], "test_find_cut_coords() (in module nipy.labs.viz_tools.test.test_coord_tools)": [[107, "nipy.labs.viz_tools.test.test_coord_tools.test_find_cut_coords"]], "test_find_maxsep_cut_coords() (in module nipy.labs.viz_tools.test.test_coord_tools)": [[107, "nipy.labs.viz_tools.test.test_coord_tools.test_find_maxsep_cut_coords"]], "nipy.labs.viz_tools.test.test_edge_detect": [[108, "module-nipy.labs.viz_tools.test.test_edge_detect"]], "test_edge_detect() (in module nipy.labs.viz_tools.test.test_edge_detect)": [[108, "nipy.labs.viz_tools.test.test_edge_detect.test_edge_detect"]], "test_fast_abs_percentile() (in module nipy.labs.viz_tools.test.test_edge_detect)": [[108, "nipy.labs.viz_tools.test.test_edge_detect.test_fast_abs_percentile"]], "nipy.labs.viz_tools.test.test_slicers": [[109, "module-nipy.labs.viz_tools.test.test_slicers"]], "test_demo_ortho_slicer() (in module nipy.labs.viz_tools.test.test_slicers)": [[109, "nipy.labs.viz_tools.test.test_slicers.test_demo_ortho_slicer"]], "block_amplitudes() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.block_amplitudes"]], "block_design() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.block_design"]], "event_design() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.event_design"]], "fourier_basis() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.fourier_basis"]], "natural_spline() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.natural_spline"]], "nipy.modalities.fmri.design": [[110, "module-nipy.modalities.fmri.design"]], "openfmri2nipy() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.openfmri2nipy"]], "stack2designs() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.stack2designs"]], "stack_contrasts() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.stack_contrasts"]], "stack_designs() (in module nipy.modalities.fmri.design)": [[110, "nipy.modalities.fmri.design.stack_designs"]], "designmatrix (class in nipy.modalities.fmri.design_matrix)": [[111, "nipy.modalities.fmri.design_matrix.DesignMatrix"]], "__init__() (nipy.modalities.fmri.design_matrix.designmatrix method)": [[111, "nipy.modalities.fmri.design_matrix.DesignMatrix.__init__"]], "dmtx_from_csv() (in module nipy.modalities.fmri.design_matrix)": [[111, "nipy.modalities.fmri.design_matrix.dmtx_from_csv"]], "dmtx_light() (in module nipy.modalities.fmri.design_matrix)": [[111, "nipy.modalities.fmri.design_matrix.dmtx_light"]], "make_dmtx() (in module nipy.modalities.fmri.design_matrix)": [[111, "nipy.modalities.fmri.design_matrix.make_dmtx"]], "nipy.modalities.fmri.design_matrix": [[111, "module-nipy.modalities.fmri.design_matrix"]], "show() (nipy.modalities.fmri.design_matrix.designmatrix method)": [[111, "nipy.modalities.fmri.design_matrix.DesignMatrix.show"]], "show_contrast() (nipy.modalities.fmri.design_matrix.designmatrix method)": [[111, "nipy.modalities.fmri.design_matrix.DesignMatrix.show_contrast"]], "write_csv() (nipy.modalities.fmri.design_matrix.designmatrix method)": [[111, "nipy.modalities.fmri.design_matrix.DesignMatrix.write_csv"]], "blockparadigm (class in nipy.modalities.fmri.experimental_paradigm)": [[112, "nipy.modalities.fmri.experimental_paradigm.BlockParadigm"]], "eventrelatedparadigm (class in nipy.modalities.fmri.experimental_paradigm)": [[112, "nipy.modalities.fmri.experimental_paradigm.EventRelatedParadigm"]], "paradigm (class in nipy.modalities.fmri.experimental_paradigm)": [[112, "nipy.modalities.fmri.experimental_paradigm.Paradigm"]], "__init__() (nipy.modalities.fmri.experimental_paradigm.blockparadigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.BlockParadigm.__init__"]], "__init__() (nipy.modalities.fmri.experimental_paradigm.eventrelatedparadigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.EventRelatedParadigm.__init__"]], "__init__() (nipy.modalities.fmri.experimental_paradigm.paradigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.Paradigm.__init__"]], "load_paradigm_from_csv_file() (in module nipy.modalities.fmri.experimental_paradigm)": [[112, "nipy.modalities.fmri.experimental_paradigm.load_paradigm_from_csv_file"]], "nipy.modalities.fmri.experimental_paradigm": [[112, "module-nipy.modalities.fmri.experimental_paradigm"]], "write_to_csv() (nipy.modalities.fmri.experimental_paradigm.blockparadigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.BlockParadigm.write_to_csv"]], "write_to_csv() (nipy.modalities.fmri.experimental_paradigm.eventrelatedparadigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.EventRelatedParadigm.write_to_csv"]], "write_to_csv() (nipy.modalities.fmri.experimental_paradigm.paradigm method)": [[112, "nipy.modalities.fmri.experimental_paradigm.Paradigm.write_to_csv"]], "fmriimagelist (class in nipy.modalities.fmri.fmri)": [[113, "nipy.modalities.fmri.fmri.FmriImageList"]], "__init__() (nipy.modalities.fmri.fmri.fmriimagelist method)": [[113, "nipy.modalities.fmri.fmri.FmriImageList.__init__"]], "axis0_generator() (in module nipy.modalities.fmri.fmri)": [[113, "nipy.modalities.fmri.fmri.axis0_generator"]], "from_image() (nipy.modalities.fmri.fmri.fmriimagelist class method)": [[113, "nipy.modalities.fmri.fmri.FmriImageList.from_image"]], "get_list_data() (nipy.modalities.fmri.fmri.fmriimagelist method)": [[113, "nipy.modalities.fmri.fmri.FmriImageList.get_list_data"]], "nipy.modalities.fmri.fmri": [[113, "module-nipy.modalities.fmri.fmri"]], "nipy.modalities.fmri.fmristat.hrf": [[114, "module-nipy.modalities.fmri.fmristat.hrf"]], "spectral_decomposition() (in module nipy.modalities.fmri.fmristat.hrf)": [[114, "nipy.modalities.fmri.fmristat.hrf.spectral_decomposition"]], "taylor_approx() (in module nipy.modalities.fmri.fmristat.hrf)": [[114, "nipy.modalities.fmri.fmristat.hrf.taylor_approx"]], "invertr() (in module nipy.modalities.fmri.fmristat.invert)": [[115, "nipy.modalities.fmri.fmristat.invert.invertR"]], "nipy.modalities.fmri.fmristat.invert": [[115, "module-nipy.modalities.fmri.fmristat.invert"]], "ar1 (class in nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.AR1"]], "modeloutputimage (class in nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.ModelOutputImage"]], "ols (class in nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.OLS"]], "__init__() (nipy.modalities.fmri.fmristat.model.ar1 method)": [[116, "nipy.modalities.fmri.fmristat.model.AR1.__init__"]], "__init__() (nipy.modalities.fmri.fmristat.model.modeloutputimage method)": [[116, "nipy.modalities.fmri.fmristat.model.ModelOutputImage.__init__"]], "__init__() (nipy.modalities.fmri.fmristat.model.ols method)": [[116, "nipy.modalities.fmri.fmristat.model.OLS.__init__"]], "estimatear() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.estimateAR"]], "execute() (nipy.modalities.fmri.fmristat.model.ar1 method)": [[116, "nipy.modalities.fmri.fmristat.model.AR1.execute"]], "execute() (nipy.modalities.fmri.fmristat.model.ols method)": [[116, "nipy.modalities.fmri.fmristat.model.OLS.execute"]], "generate_output() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.generate_output"]], "model_generator() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.model_generator"]], "nipy.modalities.fmri.fmristat.model": [[116, "module-nipy.modalities.fmri.fmristat.model"]], "output_ar1() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.output_AR1"]], "output_f() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.output_F"]], "output_t() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.output_T"]], "output_resid() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.output_resid"]], "results_generator() (in module nipy.modalities.fmri.fmristat.model)": [[116, "nipy.modalities.fmri.fmristat.model.results_generator"]], "save() (nipy.modalities.fmri.fmristat.model.modeloutputimage method)": [[116, "nipy.modalities.fmri.fmristat.model.ModelOutputImage.save"]], "regressionoutput (class in nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.RegressionOutput"]], "regressionoutputlist (class in nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.RegressionOutputList"]], "toutput (class in nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.TOutput"]], "__init__() (nipy.modalities.fmri.fmristat.outputters.regressionoutput method)": [[117, "nipy.modalities.fmri.fmristat.outputters.RegressionOutput.__init__"]], "__init__() (nipy.modalities.fmri.fmristat.outputters.regressionoutputlist method)": [[117, "nipy.modalities.fmri.fmristat.outputters.RegressionOutputList.__init__"]], "__init__() (nipy.modalities.fmri.fmristat.outputters.toutput method)": [[117, "nipy.modalities.fmri.fmristat.outputters.TOutput.__init__"]], "nipy.modalities.fmri.fmristat.outputters": [[117, "module-nipy.modalities.fmri.fmristat.outputters"]], "output_ar1() (in module nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.output_AR1"]], "output_f() (in module nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.output_F"]], "output_t() (in module nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.output_T"]], "output_resid() (in module nipy.modalities.fmri.fmristat.outputters)": [[117, "nipy.modalities.fmri.fmristat.outputters.output_resid"]], "contrast (class in nipy.modalities.fmri.glm)": [[118, "nipy.modalities.fmri.glm.Contrast"]], "fmrilinearmodel (class in nipy.modalities.fmri.glm)": [[118, "nipy.modalities.fmri.glm.FMRILinearModel"]], "generallinearmodel (class in nipy.modalities.fmri.glm)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel"]], "__init__() (nipy.modalities.fmri.glm.contrast method)": [[118, "nipy.modalities.fmri.glm.Contrast.__init__"]], "__init__() (nipy.modalities.fmri.glm.fmrilinearmodel method)": [[118, "nipy.modalities.fmri.glm.FMRILinearModel.__init__"]], "__init__() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.__init__"]], "contrast() (nipy.modalities.fmri.glm.fmrilinearmodel method)": [[118, "nipy.modalities.fmri.glm.FMRILinearModel.contrast"]], "contrast() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.contrast"]], "data_scaling() (in module nipy.modalities.fmri.glm)": [[118, "nipy.modalities.fmri.glm.data_scaling"]], "fit() (nipy.modalities.fmri.glm.fmrilinearmodel method)": [[118, "nipy.modalities.fmri.glm.FMRILinearModel.fit"]], "fit() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.fit"]], "get_beta() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.get_beta"]], "get_logl() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.get_logL"]], "get_mse() (nipy.modalities.fmri.glm.generallinearmodel method)": [[118, "nipy.modalities.fmri.glm.GeneralLinearModel.get_mse"]], "nipy.modalities.fmri.glm": [[118, "module-nipy.modalities.fmri.glm"]], "p_value() (nipy.modalities.fmri.glm.contrast method)": [[118, "nipy.modalities.fmri.glm.Contrast.p_value"]], "stat() (nipy.modalities.fmri.glm.contrast method)": [[118, "nipy.modalities.fmri.glm.Contrast.stat"]], "z_score() (nipy.modalities.fmri.glm.contrast method)": [[118, "nipy.modalities.fmri.glm.Contrast.z_score"]], "compute_regressor() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.compute_regressor"]], "glover_hrf() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.glover_hrf"]], "glover_time_derivative() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.glover_time_derivative"]], "nipy.modalities.fmri.hemodynamic_models": [[119, "module-nipy.modalities.fmri.hemodynamic_models"]], "spm_dispersion_derivative() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.spm_dispersion_derivative"]], "spm_hrf() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.spm_hrf"]], "spm_time_derivative() (in module nipy.modalities.fmri.hemodynamic_models)": [[119, "nipy.modalities.fmri.hemodynamic_models.spm_time_derivative"]], "ddspmt() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.ddspmt"]], "dspmt() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.dspmt"]], "gamma_expr() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.gamma_expr"]], "gamma_params() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.gamma_params"]], "nipy.modalities.fmri.hrf": [[120, "module-nipy.modalities.fmri.hrf"]], "spm_hrf_compat() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.spm_hrf_compat"]], "spmt() (in module nipy.modalities.fmri.hrf)": [[120, "nipy.modalities.fmri.hrf.spmt"]], "dct_ii_basis() (in module nipy.modalities.fmri.realfuncs)": [[121, "nipy.modalities.fmri.realfuncs.dct_ii_basis"]], "dct_ii_cut_basis() (in module nipy.modalities.fmri.realfuncs)": [[121, "nipy.modalities.fmri.realfuncs.dct_ii_cut_basis"]], "nipy.modalities.fmri.realfuncs": [[121, "module-nipy.modalities.fmri.realfuncs"]], "arcomponents() (in module nipy.modalities.fmri.spm.correlation)": [[122, "nipy.modalities.fmri.spm.correlation.ARcomponents"]], "arcovariance() (in module nipy.modalities.fmri.spm.correlation)": [[122, "nipy.modalities.fmri.spm.correlation.ARcovariance"]], "nipy.modalities.fmri.spm.correlation": [[122, "module-nipy.modalities.fmri.spm.correlation"]], "fmask() (in module nipy.modalities.fmri.spm.model)": [[123, "nipy.modalities.fmri.spm.model.Fmask"]], "secondstage (class in nipy.modalities.fmri.spm.model)": [[123, "nipy.modalities.fmri.spm.model.SecondStage"]], "__init__() (nipy.modalities.fmri.spm.model.secondstage method)": [[123, "nipy.modalities.fmri.spm.model.SecondStage.__init__"]], "estimate_pooled_covariance() (in module nipy.modalities.fmri.spm.model)": [[123, "nipy.modalities.fmri.spm.model.estimate_pooled_covariance"]], "execute() (nipy.modalities.fmri.spm.model.secondstage method)": [[123, "nipy.modalities.fmri.spm.model.SecondStage.execute"]], "nipy.modalities.fmri.spm.model": [[123, "module-nipy.modalities.fmri.spm.model"]], "nipy.modalities.fmri.spm.reml": [[124, "module-nipy.modalities.fmri.spm.reml"]], "orth() (in module nipy.modalities.fmri.spm.reml)": [[124, "nipy.modalities.fmri.spm.reml.orth"]], "reml() (in module nipy.modalities.fmri.spm.reml)": [[124, "nipy.modalities.fmri.spm.reml.reml"]], "nipy.modalities.fmri.spm.trace": [[125, "module-nipy.modalities.fmri.spm.trace"]], "trrv() (in module nipy.modalities.fmri.spm.trace)": [[125, "nipy.modalities.fmri.spm.trace.trRV"]], "interp1dnumeric (class in nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.Interp1dNumeric"]], "timeconvolver (class in nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.TimeConvolver"]], "__init__() (nipy.modalities.fmri.utils.interp1dnumeric method)": [[126, "nipy.modalities.fmri.utils.Interp1dNumeric.__init__"]], "__init__() (nipy.modalities.fmri.utils.timeconvolver method)": [[126, "nipy.modalities.fmri.utils.TimeConvolver.__init__"]], "blocks() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.blocks"]], "convolve() (nipy.modalities.fmri.utils.timeconvolver method)": [[126, "nipy.modalities.fmri.utils.TimeConvolver.convolve"]], "convolve_functions() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.convolve_functions"]], "define() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.define"]], "dtype (nipy.modalities.fmri.utils.interp1dnumeric attribute)": [[126, "nipy.modalities.fmri.utils.Interp1dNumeric.dtype"]], "events() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.events"]], "fill_value (nipy.modalities.fmri.utils.interp1dnumeric property)": [[126, "nipy.modalities.fmri.utils.Interp1dNumeric.fill_value"]], "fourier_basis() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.fourier_basis"]], "interp() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.interp"]], "lambdify_t() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.lambdify_t"]], "linear_interp() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.linear_interp"]], "nipy.modalities.fmri.utils": [[126, "module-nipy.modalities.fmri.utils"]], "step_function() (in module nipy.modalities.fmri.utils)": [[126, "nipy.modalities.fmri.utils.step_function"]], "get_pkg_info() (in module nipy.pkg_info)": [[127, "nipy.pkg_info.get_pkg_info"]], "nipy.pkg_info": [[127, "module-nipy.pkg_info"]], "pkg_commit_hash() (in module nipy.pkg_info)": [[127, "nipy.pkg_info.pkg_commit_hash"]], "if_datasource() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.if_datasource"]], "if_example_data() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.if_example_data"]], "if_templates() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.if_templates"]], "make_label_dec() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.make_label_dec"]], "needs_mpl_agg() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.needs_mpl_agg"]], "needs_review() (in module nipy.testing.decorators)": [[128, "nipy.testing.decorators.needs_review"]], "nipy.testing.decorators": [[128, "module-nipy.testing.decorators"]], "visibledeprecationwarning (class in nipy.utils)": [[129, "nipy.utils.VisibleDeprecationWarning"]], "__init__() (nipy.utils.visibledeprecationwarning method)": [[129, "nipy.utils.VisibleDeprecationWarning.__init__"]], "args (nipy.utils.visibledeprecationwarning attribute)": [[129, "nipy.utils.VisibleDeprecationWarning.args"]], "nipy.utils": [[129, "module-nipy.utils"]], "with_traceback() (nipy.utils.visibledeprecationwarning method)": [[129, "nipy.utils.VisibleDeprecationWarning.with_traceback"]], "nipy.utils.arrays": [[130, "module-nipy.utils.arrays"]], "strides_from() (in module nipy.utils.arrays)": [[130, "nipy.utils.arrays.strides_from"]], "check_deps() (in module nipy.utils.perlpie)": [[131, "nipy.utils.perlpie.check_deps"]], "main() (in module nipy.utils.perlpie)": [[131, "nipy.utils.perlpie.main"]], "nipy.utils.perlpie": [[131, "module-nipy.utils.perlpie"]], "perl_dash_pie() (in module nipy.utils.perlpie)": [[131, "nipy.utils.perlpie.perl_dash_pie"]], "print_extended_help() (in module nipy.utils.perlpie)": [[131, "nipy.utils.perlpie.print_extended_help"]], "is_iterable() (in module nipy.utils.utilities)": [[132, "nipy.utils.utilities.is_iterable"]], "is_numlike() (in module nipy.utils.utilities)": [[132, "nipy.utils.utilities.is_numlike"]], "nipy.utils.utilities": [[132, "module-nipy.utils.utilities"]], "seq_prod() (in module nipy.utils.utilities)": [[132, "nipy.utils.utilities.seq_prod"]]}})